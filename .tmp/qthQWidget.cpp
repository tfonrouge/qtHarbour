/*
 * $Id: qthQWidget.wip 129 2011-04-19 18:22:34Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QWidget>

#define RenderFlag                              QWidget::RenderFlag
#define RenderFlags                             QWidget::RenderFlags
#define DrawWindowBackground                    QWidget::DrawWindowBackground
#define DrawChildren                            QWidget::DrawChildren
#define IgnoreMask                              QWidget::IgnoreMask

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QWIDGET );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QOBJECT );
HB_FUNC_EXTERN( QPAINTDEVICE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class
HB_FUNC_EXTERN( QPOINT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QLAYOUT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QVARIANT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QWIDGET )
{ "QWIDGET", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QWIDGET )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QOBJECT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QOBJECT ) }, NULL },
{ "QPAINTDEVICE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QPAINTDEVICE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }, // REQUEST'ed Class
{ "QPOINT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QPOINT )}, NULL }, // REQUEST'ed Class
{ "QLAYOUT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QLAYOUT )}, NULL }, // REQUEST'ed Class
{ "QVARIANT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QVARIANT )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QWIDGET )

HB_FUNC( QWIDGET )
{
    qthClassObjCreator( symbols, 2 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 2 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QWidget ( QWidget * parent = 0, Qt::WindowFlags f = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) && qth_IsIntType( 2, "Qt::WindowFlags", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QWidget, new QWidget( parent, (Qt::WindowFlags) qth_par_IntType( 2, 0 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACCEPTDROPS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  acceptDrops () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->acceptDrops() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACCESSIBLEDESCRIPTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  accessibleDescription () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->accessibleDescription() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACCESSIBLENAME )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  accessibleName () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->accessibleName() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIONS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QList<QAction *>  actions () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QAction *>( p_widget->actions() ), "QList<QAction *>" );
            qth_errRT_UNKNOWNOBJ( "QWidget::actions", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIVATEWINDOW )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  activateWindow ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->activateWindow();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDACTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  addAction ( QAction * action )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_widget->addAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDACTIONS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  addActions ( QList<QAction *> actions )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QList" ) )
        {
            p_widget->addActions( * static_cast<QList<QAction *> *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADJUSTSIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  adjustSize ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->adjustSize();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOFILLBACKGROUND )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  autoFillBackground () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->autoFillBackground() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BACKGROUNDROLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPalette::ColorRole  backgroundRole () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->backgroundRole() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BASESIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSize  baseSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->baseSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CHILDAT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  childAt ( int x, int y ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->childAt( hb_parni( 1 ), hb_parni( 2 ) ), "QWidget" );
            return;
        }
        /*
         * _public_functions_ : QWidget *  childAt ( const QPoint & p ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & p = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemReturn( (PCPP_OBJECT) p_widget->childAt( p ), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CHILDRENRECT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRect  childrenRect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_widget->childrenRect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CHILDRENREGION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRegion  childrenRegion () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QRegion'
            // qth_itemPushNewReturn( QtH::QRegion, new QRegion( p_widget->childrenRegion() ), "QRegion" );
            qth_errRT_UNKNOWNOBJ( "QWidget::childrenRegion", "Don't know how to return type 'QRegion'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARFOCUS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  clearFocus ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->clearFocus();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMASK )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  clearMask ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->clearMask();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTENTSMARGINS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QMargins  contentsMargins () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QMargins'
            // qth_itemPushNewReturn( QtH::QMargins, new QMargins( p_widget->contentsMargins() ), "QMargins" );
            qth_errRT_UNKNOWNOBJ( "QWidget::contentsMargins", "Don't know how to return type 'QMargins'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTENTSRECT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRect  contentsRect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_widget->contentsRect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTEXTMENUPOLICY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::ContextMenuPolicy  contextMenuPolicy () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->contextMenuPolicy() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURSOR )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QCursor  cursor () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QCursor'
            // qth_itemPushNewReturn( QtH::QCursor, new QCursor( p_widget->cursor() ), "QCursor" );
            qth_errRT_UNKNOWNOBJ( "QWidget::cursor", "Don't know how to return type 'QCursor'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EFFECTIVEWINID )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : WId  effectiveWinId () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'WId'
            // qth_itemPushNewReturn( QtH::WId, new WId( p_widget->effectiveWinId() ), "WId" );
            qth_errRT_UNKNOWNOBJ( "QWidget::effectiveWinId", "Don't know how to return type 'WId'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ENSUREPOLISHED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  ensurePolished () const
         */
        if( hb_pcount() == 0 )
        {
            p_widget->ensurePolished();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FOCUSPOLICY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::FocusPolicy  focusPolicy () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->focusPolicy() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FOCUSPROXY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  focusProxy () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->focusProxy(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FOCUSWIDGET )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  focusWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->focusWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : const QFont &  font () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QFont'
            // qth_itemReturn( (PCPP_OBJECT)  & p_widget->font(), "QFont" );
            qth_errRT_UNKNOWNOBJ( "QWidget::font", "Don't know how to return type 'QFont'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTINFO )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QFontInfo  fontInfo () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QFontInfo'
            // qth_itemPushNewReturn( QtH::QFontInfo, new QFontInfo( p_widget->fontInfo() ), "QFontInfo" );
            qth_errRT_UNKNOWNOBJ( "QWidget::fontInfo", "Don't know how to return type 'QFontInfo'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTMETRICS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QFontMetrics  fontMetrics () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QFontMetrics'
            // qth_itemPushNewReturn( QtH::QFontMetrics, new QFontMetrics( p_widget->fontMetrics() ), "QFontMetrics" );
            qth_errRT_UNKNOWNOBJ( "QWidget::fontMetrics", "Don't know how to return type 'QFontMetrics'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FOREGROUNDROLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPalette::ColorRole  foregroundRole () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->foregroundRole() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FRAMEGEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRect  frameGeometry () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_widget->frameGeometry() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FRAMESIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSize  frameSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->frameSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : const QRect &  geometry () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT)  & p_widget->geometry(), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETCONTENTSMARGINS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  getContentsMargins ( int * left, int * top, int * right, int * bottom ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF ) )
        {
            int left = hb_parni( 1 );
            int top = hb_parni( 2 );
            int right = hb_parni( 3 );
            int bottom = hb_parni( 4 );
            p_widget->getContentsMargins( &left, &top, &right, &bottom );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( left, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( top, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( right, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( bottom, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRABGESTURE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  grabGesture ( Qt::GestureType gesture, Qt::GestureFlags flags = Qt::GestureFlags() )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "Qt::GestureType" ) && qth_IsIntType( 2, "Qt::GestureFlags", QTH_DEFAULT ) )
        {
            p_widget->grabGesture( (Qt::GestureType)  qth_par_IntType( 1 ), (Qt::GestureFlags) qth_par_IntType( 2, Qt::GestureFlags() ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRABKEYBOARD )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  grabKeyboard ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->grabKeyboard();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRABMOUSE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  grabMouse ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->grabMouse();
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  grabMouse ( const QCursor & cursor )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QCursor" ) )
        {
            const QCursor & cursor = * static_cast<QCursor *>( qth_par_QthObject( 1 ) );
            p_widget->grabMouse( cursor );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRABSHORTCUT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  grabShortcut ( const QKeySequence & key, Qt::ShortcutContext context = Qt::WindowShortcut )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QKeySequence" ) && qth_IsIntType( 2, "Qt::ShortcutContext", QTH_DEFAULT ) )
        {
            const QKeySequence & key = * static_cast<QKeySequence *>( qth_par_QthObject( 1 ) );
            hb_retni( p_widget->grabShortcut( key, (Qt::ShortcutContext) qth_par_IntType( 2, Qt::WindowShortcut ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRAPHICSEFFECT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QGraphicsEffect *  graphicsEffect () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QGraphicsEffect'
            // qth_itemReturn( (PCPP_OBJECT) p_widget->graphicsEffect(), "QGraphicsEffect" );
            qth_errRT_UNKNOWNOBJ( "QWidget::graphicsEffect", "Don't know how to return type 'QGraphicsEffect'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRAPHICSPROXYWIDGET )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QGraphicsProxyWidget *  graphicsProxyWidget () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QGraphicsProxyWidget'
            // qth_itemReturn( (PCPP_OBJECT) p_widget->graphicsProxyWidget(), "QGraphicsProxyWidget" );
            qth_errRT_UNKNOWNOBJ( "QWidget::graphicsProxyWidget", "Don't know how to return type 'QGraphicsProxyWidget'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASEDITFOCUS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if EmbeddedLinux
        /*
         * _public_functions_ : bool  hasEditFocus () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->hasEditFocus() == true );
            return;
        }
#endif  /* EmbeddedLinux */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASFOCUS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  hasFocus () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->hasFocus() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASMOUSETRACKING )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  hasMouseTracking () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->hasMouseTracking() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  height () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->height() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHTFORWIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : virtual int  heightForWidth ( int w ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_widget->heightForWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INPUTCONTEXT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QInputContext *  inputContext ()
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QInputContext'
            // qth_itemReturn( (PCPP_OBJECT) p_widget->inputContext(), "QInputContext" );
            qth_errRT_UNKNOWNOBJ( "QWidget::inputContext", "Don't know how to return type 'QInputContext'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INPUTMETHODHINTS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::InputMethodHints  inputMethodHints () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->inputMethodHints() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INPUTMETHODQUERY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : virtual QVariant  inputMethodQuery ( Qt::InputMethodQuery query ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::InputMethodQuery" ) )
        {
            qth_itemPushNewReturn( QtH::QVariant, new QVariant( p_widget->inputMethodQuery( (Qt::InputMethodQuery)  qth_par_IntType( 1 ) ) ), "QVariant" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTACTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  insertAction ( QAction * before, QAction * action )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QAction" ) && qth_IsObject( 2, "QAction" ) )
        {
            p_widget->insertAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ), static_cast<QAction *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTACTIONS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  insertActions ( QAction * before, QList<QAction *> actions )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QAction" ) && qth_IsObject( 2, "QList" ) )
        {
            p_widget->insertActions( static_cast<QAction *>( qth_par_QthObject( 1 ) ), * static_cast<QList<QAction *> *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISACTIVEWINDOW )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isActiveWindow () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isActiveWindow() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISANCESTOROF )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isAncestorOf ( const QWidget * child ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            const QWidget  * child = static_cast<QWidget *>( qth_par_QthObject( 1 ) );
            hb_retl( p_widget->isAncestorOf( child ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISENABLED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISENABLEDTO )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isEnabledTo ( QWidget * ancestor ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            hb_retl( p_widget->isEnabledTo( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISFULLSCREEN )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isFullScreen () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isFullScreen() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISHIDDEN )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isHidden () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isHidden() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISMAXIMIZED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isMaximized () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isMaximized() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISMINIMIZED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isMinimized () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isMinimized() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISMODAL )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isModal () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isModal() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVISIBLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isVisible () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isVisible() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVISIBLETO )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isVisibleTo ( QWidget * ancestor ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            hb_retl( p_widget->isVisibleTo( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISWINDOW )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isWindow () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isWindow() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISWINDOWMODIFIED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  isWindowModified () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->isWindowModified() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LAYOUT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QLayout *  layout () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->layout(), "QLayout" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LAYOUTDIRECTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::LayoutDirection  layoutDirection () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->layoutDirection() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOCALE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QLocale  locale () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QLocale'
            // qth_itemPushNewReturn( QtH::QLocale, new QLocale( p_widget->locale() ), "QLocale" );
            qth_errRT_UNKNOWNOBJ( "QWidget::locale", "Don't know how to return type 'QLocale'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MACCGHANDLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if __MAC__
        /*
         * _public_functions_ : Qt::HANDLE  macCGHandle () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'Qt::HANDLE'
            // qth_itemPushNewReturn( QtH::Qt::HANDLE, new Qt::HANDLE( p_widget->macCGHandle() ), "Qt::HANDLE" );
            qth_errRT_UNKNOWNOBJ( "QWidget::macCGHandle", "Don't know how to return type 'Qt::HANDLE'" ) ;
            return;
        }
#endif  /* __MAC__ */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MACQDHANDLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if __MAC__
        /*
         * _public_functions_ : Qt::HANDLE  macQDHandle () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'Qt::HANDLE'
            // qth_itemPushNewReturn( QtH::Qt::HANDLE, new Qt::HANDLE( p_widget->macQDHandle() ), "Qt::HANDLE" );
            qth_errRT_UNKNOWNOBJ( "QWidget::macQDHandle", "Don't know how to return type 'Qt::HANDLE'" ) ;
            return;
        }
#endif  /* __MAC__ */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAPFROM )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  mapFrom ( QWidget * parent, const QPoint & pos ) const
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 2 ) );
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->mapFrom( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), pos ) ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAPFROMGLOBAL )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  mapFromGlobal ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->mapFromGlobal( pos ) ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAPFROMPARENT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  mapFromParent ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->mapFromParent( pos ) ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAPTO )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  mapTo ( QWidget * parent, const QPoint & pos ) const
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 2 ) );
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->mapTo( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), pos ) ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAPTOGLOBAL )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  mapToGlobal ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->mapToGlobal( pos ) ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAPTOPARENT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  mapToParent ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->mapToParent( pos ) ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MASK )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRegion  mask () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QRegion'
            // qth_itemPushNewReturn( QtH::QRegion, new QRegion( p_widget->mask() ), "QRegion" );
            qth_errRT_UNKNOWNOBJ( "QWidget::mask", "Don't know how to return type 'QRegion'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMHEIGHT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  maximumHeight () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->maximumHeight() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMSIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSize  maximumSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->maximumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMWIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  maximumWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->maximumWidth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMHEIGHT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  minimumHeight () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->minimumHeight() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSize  minimumSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->minimumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMWIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  minimumWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->minimumWidth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  move ( const QPoint & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & p_QPoint1 = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_widget->move( p_QPoint1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  move ( int x, int y )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->move( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NATIVEPARENTWIDGET )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  nativeParentWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->nativeParentWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NEXTINFOCUSCHAIN )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  nextInFocusChain () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->nextInFocusChain(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NORMALGEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRect  normalGeometry () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_widget->normalGeometry() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OVERRIDEWINDOWFLAGS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  overrideWindowFlags ( Qt::WindowFlags flags )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::WindowFlags" ) )
        {
            p_widget->overrideWindowFlags( (Qt::WindowFlags)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PALETTE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : const QPalette &  palette () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QPalette'
            // qth_itemReturn( (PCPP_OBJECT)  & p_widget->palette(), "QPalette" );
            qth_errRT_UNKNOWNOBJ( "QWidget::palette", "Don't know how to return type 'QPalette'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PARENTWIDGET )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  parentWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->parentWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( POS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QPoint  pos () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_widget->pos() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PREVIOUSINFOCUSCHAIN )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  previousInFocusChain () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->previousInFocusChain(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RECT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRect  rect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_widget->rect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RELEASEKEYBOARD )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  releaseKeyboard ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->releaseKeyboard();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RELEASEMOUSE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  releaseMouse ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->releaseMouse();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RELEASESHORTCUT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  releaseShortcut ( int id )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->releaseShortcut( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVEACTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  removeAction ( QAction * action )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_widget->removeAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RENDER )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  render ( QPaintDevice * target, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion(), RenderFlags renderFlags = RenderFlags( DrawWindowBackground | DrawChildren ) )
         */
        if( ( hb_pcount() <= 4 ) && qth_IsObject( 1, "QPaintDevice" ) && qth_Is( 2, "QPoint", QTH_DEFAULT ) && qth_Is( 3, "QRegion", QTH_DEFAULT ) && qth_IsIntType( 4, "RenderFlags", QTH_DEFAULT ) )
        {
            const QPoint& targetOffset = hb_param( 2, HB_IT_OBJECT ) ? qth_parConstRef<QPoint>( 2 ) : QPoint();
            const QRegion& sourceRegion = hb_param( 3, HB_IT_OBJECT ) ? qth_parConstRef<QRegion>( 3 ) : QRegion();
            p_widget->render( static_cast<QPaintDevice *>( qth_par_QthObject( 1 ) ), targetOffset, sourceRegion, (RenderFlags) qth_par_IntType( 4, RenderFlags( DrawWindowBackground | DrawChildren ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  render ( QPainter * painter, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion(), RenderFlags renderFlags = RenderFlags( DrawWindowBackground | DrawChildren ) )
         */
        if( ( hb_pcount() <= 4 ) && qth_IsObject( 1, "QPainter" ) && qth_Is( 2, "QPoint", QTH_DEFAULT ) && qth_Is( 3, "QRegion", QTH_DEFAULT ) && qth_IsIntType( 4, "RenderFlags", QTH_DEFAULT ) )
        {
            const QPoint& targetOffset = hb_param( 2, HB_IT_OBJECT ) ? qth_parConstRef<QPoint>( 2 ) : QPoint();
            const QRegion& sourceRegion = hb_param( 3, HB_IT_OBJECT ) ? qth_parConstRef<QRegion>( 3 ) : QRegion();
            p_widget->render( static_cast<QPainter *>( qth_par_QthObject( 1 ) ), targetOffset, sourceRegion, (RenderFlags) qth_par_IntType( 4, RenderFlags( DrawWindowBackground | DrawChildren ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REPAINT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  repaint ( int x, int y, int w, int h )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_widget->repaint( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  repaint ( const QRect & rect )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & rect = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            p_widget->repaint( rect );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  repaint ( const QRegion & rgn )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRegion" ) )
        {
            const QRegion & rgn = * static_cast<QRegion *>( qth_par_QthObject( 1 ) );
            p_widget->repaint( rgn );
            hb_ret();
            return;
        }
        /*
         * _public_slots_ : void  repaint ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->repaint();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  resize ( const QSize & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & p_QSize1 = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_widget->resize( p_QSize1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  resize ( int w, int h )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->resize( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESTOREGEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  restoreGeometry ( const QByteArray & geometry )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QByteArray" ) )
        {
            const QByteArray & geometry = * static_cast<QByteArray *>( qth_par_QthObject( 1 ) );
            hb_retl( p_widget->restoreGeometry( geometry ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SAVEGEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QByteArray  saveGeometry () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QByteArray'
            // qth_itemPushNewReturn( QtH::QByteArray, new QByteArray( p_widget->saveGeometry() ), "QByteArray" );
            qth_errRT_UNKNOWNOBJ( "QWidget::saveGeometry", "Don't know how to return type 'QByteArray'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLL )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  scroll ( int dx, int dy )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->scroll( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  scroll ( int dx, int dy, const QRect & r )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsObject( 3, "QRect" ) )
        {
            const QRect & r = * static_cast<QRect *>( qth_par_QthObject( 3 ) );
            p_widget->scroll( hb_parni( 1 ), hb_parni( 2 ), r );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACCEPTDROPS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setAcceptDrops ( bool on )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setAcceptDrops( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACCESSIBLEDESCRIPTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setAccessibleDescription ( const QString & description )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString description =  qth_par_QString( 1 );
            p_widget->setAccessibleDescription( description );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACCESSIBLENAME )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setAccessibleName ( const QString & name )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString name =  qth_par_QString( 1 );
            p_widget->setAccessibleName( name );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETATTRIBUTE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setAttribute ( Qt::WidgetAttribute attribute, bool on = true )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "Qt::WidgetAttribute" ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            bool on = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : true;
            p_widget->setAttribute( (Qt::WidgetAttribute)  qth_par_IntType( 1 ), on );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOFILLBACKGROUND )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setAutoFillBackground ( bool enabled )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setAutoFillBackground( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBACKGROUNDROLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setBackgroundRole ( QPalette::ColorRole role )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QPalette::ColorRole" ) )
        {
            p_widget->setBackgroundRole( (QPalette::ColorRole)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBASESIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setBaseSize ( const QSize & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & p_QSize1 = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_widget->setBaseSize( p_QSize1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setBaseSize ( int basew, int baseh )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->setBaseSize( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCONTENTSMARGINS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setContentsMargins ( int left, int top, int right, int bottom )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_widget->setContentsMargins( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setContentsMargins ( const QMargins & margins )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMargins" ) )
        {
            const QMargins & margins = * static_cast<QMargins *>( qth_par_QthObject( 1 ) );
            p_widget->setContentsMargins( margins );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCONTEXTMENUPOLICY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setContextMenuPolicy ( Qt::ContextMenuPolicy policy )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::ContextMenuPolicy" ) )
        {
            p_widget->setContextMenuPolicy( (Qt::ContextMenuPolicy)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURSOR )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setCursor ( const QCursor & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QCursor" ) )
        {
            const QCursor & p_QCursor1 = * static_cast<QCursor *>( qth_par_QthObject( 1 ) );
            p_widget->setCursor( p_QCursor1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETEDITFOCUS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if EmbeddedLinux_Symbian
        /*
         * _public_functions_ : void  setEditFocus ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setEditFocus( hb_parl( 1 ) );
            hb_ret();
            return;
        }
#endif  /* EmbeddedLinux_Symbian */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFIXEDHEIGHT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFixedHeight ( int h )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->setFixedHeight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFIXEDSIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFixedSize ( const QSize & s )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & s = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_widget->setFixedSize( s );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setFixedSize ( int w, int h )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->setFixedSize( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFIXEDWIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFixedWidth ( int w )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->setFixedWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFOCUS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFocus ( Qt::FocusReason reason )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::FocusReason" ) )
        {
            p_widget->setFocus( (Qt::FocusReason)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
        /*
         * _public_slots_ : void  setFocus ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->setFocus();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFOCUSPOLICY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFocusPolicy ( Qt::FocusPolicy policy )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::FocusPolicy" ) )
        {
            p_widget->setFocusPolicy( (Qt::FocusPolicy)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFOCUSPROXY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFocusProxy ( QWidget * w )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_widget->setFocusProxy( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setFont ( const QFont & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QFont" ) )
        {
            const QFont & p_QFont1 = * static_cast<QFont *>( qth_par_QthObject( 1 ) );
            p_widget->setFont( p_QFont1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFOREGROUNDROLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setForegroundRole ( QPalette::ColorRole role )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QPalette::ColorRole" ) )
        {
            p_widget->setForegroundRole( (QPalette::ColorRole)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setGeometry ( const QRect & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & p_QRect1 = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            p_widget->setGeometry( p_QRect1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setGeometry ( int x, int y, int w, int h )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_widget->setGeometry( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGRAPHICSEFFECT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setGraphicsEffect ( QGraphicsEffect * effect )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QGraphicsEffect" ) )
        {
            p_widget->setGraphicsEffect( static_cast<QGraphicsEffect *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINPUTCONTEXT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setInputContext ( QInputContext * context )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QInputContext" ) )
        {
            p_widget->setInputContext( static_cast<QInputContext *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINPUTMETHODHINTS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setInputMethodHints ( Qt::InputMethodHints hints )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::InputMethodHints" ) )
        {
            p_widget->setInputMethodHints( (Qt::InputMethodHints)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLAYOUT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setLayout ( QLayout * layout )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLayout" ) )
        {
            p_widget->setLayout( static_cast<QLayout *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLAYOUTDIRECTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setLayoutDirection ( Qt::LayoutDirection direction )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::LayoutDirection" ) )
        {
            p_widget->setLayoutDirection( (Qt::LayoutDirection)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLOCALE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setLocale ( const QLocale & locale )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLocale" ) )
        {
            const QLocale & locale = * static_cast<QLocale *>( qth_par_QthObject( 1 ) );
            p_widget->setLocale( locale );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMASK )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMask ( const QBitmap & bitmap )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QBitmap" ) )
        {
            const QBitmap & bitmap = * static_cast<QBitmap *>( qth_par_QthObject( 1 ) );
            p_widget->setMask( bitmap );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setMask ( const QRegion & region )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRegion" ) )
        {
            const QRegion & region = * static_cast<QRegion *>( qth_par_QthObject( 1 ) );
            p_widget->setMask( region );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUMHEIGHT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMaximumHeight ( int maxh )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->setMaximumHeight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUMSIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMaximumSize ( const QSize & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & p_QSize1 = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_widget->setMaximumSize( p_QSize1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setMaximumSize ( int maxw, int maxh )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->setMaximumSize( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUMWIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMaximumWidth ( int maxw )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->setMaximumWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMHEIGHT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMinimumHeight ( int minh )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->setMinimumHeight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMSIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMinimumSize ( const QSize & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & p_QSize1 = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_widget->setMinimumSize( p_QSize1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setMinimumSize ( int minw, int minh )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->setMinimumSize( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMWIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMinimumWidth ( int minw )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_widget->setMinimumWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMOUSETRACKING )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setMouseTracking ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setMouseTracking( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETPALETTE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setPalette ( const QPalette & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPalette" ) )
        {
            const QPalette & p_QPalette1 = * static_cast<QPalette *>( qth_par_QthObject( 1 ) );
            p_widget->setPalette( p_QPalette1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETPARENT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setParent ( QWidget * parent )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_widget->setParent( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setParent ( QWidget * parent, Qt::WindowFlags f )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsIntType( 2, "Qt::WindowFlags" ) )
        {
            p_widget->setParent( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), (Qt::WindowFlags)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHORTCUTAUTOREPEAT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setShortcutAutoRepeat ( int id, bool enable = true )
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            bool enable = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : true;
            p_widget->setShortcutAutoRepeat( hb_parni( 1 ), enable );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHORTCUTENABLED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setShortcutEnabled ( int id, bool enable = true )
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            bool enable = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : true;
            p_widget->setShortcutEnabled( hb_parni( 1 ), enable );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSIZEINCREMENT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setSizeIncrement ( const QSize & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & p_QSize1 = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_widget->setSizeIncrement( p_QSize1 );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setSizeIncrement ( int w, int h )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_widget->setSizeIncrement( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSIZEPOLICY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if 0
        /*
         * _public_functions_ : void  setSizePolicy ( QSizePolicy )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSizePolicy" ) )
        {
            p_widget->setSizePolicy( * static_cast<QSizePolicy *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
#endif  /* 0 */
        /*
         * _public_functions_ : void  setSizePolicy ( QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical )
         */
        if( ( hb_pcount() == 2 ) && qth_IsIntType( 1, "QSizePolicy::Policy" ) && qth_IsIntType( 2, "QSizePolicy::Policy" ) )
        {
            p_widget->setSizePolicy( (QSizePolicy::Policy)  qth_par_IntType( 1 ), (QSizePolicy::Policy)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTATUSTIP )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setStatusTip ( const QString & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString p_QString1 =  qth_par_QString( 1 );
            p_widget->setStatusTip( p_QString1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTYLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setStyle ( QStyle * style )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QStyle" ) )
        {
            p_widget->setStyle( static_cast<QStyle *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOOLTIP )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setToolTip ( const QString & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString p_QString1 =  qth_par_QString( 1 );
            p_widget->setToolTip( p_QString1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETUPDATESENABLED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setUpdatesEnabled ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setUpdatesEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWHATSTHIS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWhatsThis ( const QString & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString p_QString1 =  qth_par_QString( 1 );
            p_widget->setWhatsThis( p_QString1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWFILEPATH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowFilePath ( const QString & filePath )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString filePath =  qth_par_QString( 1 );
            p_widget->setWindowFilePath( filePath );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWFLAGS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowFlags ( Qt::WindowFlags type )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::WindowFlags" ) )
        {
            p_widget->setWindowFlags( (Qt::WindowFlags)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWICON )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowIcon ( const QIcon & icon )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QIcon" ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            p_widget->setWindowIcon( icon );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWICONTEXT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowIconText ( const QString & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString p_QString1 =  qth_par_QString( 1 );
            p_widget->setWindowIconText( p_QString1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWMODALITY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowModality ( Qt::WindowModality windowModality )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::WindowModality" ) )
        {
            p_widget->setWindowModality( (Qt::WindowModality)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWOPACITY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowOpacity ( qreal level )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_widget->setWindowOpacity( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWROLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowRole ( const QString & role )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString role =  qth_par_QString( 1 );
            p_widget->setWindowRole( role );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWSTATE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowState ( Qt::WindowStates windowState )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::WindowStates" ) )
        {
            p_widget->setWindowState( (Qt::WindowStates)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWSURFACE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  setWindowSurface ( QWindowSurface * surface ) (preliminary)
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWindowSurface" ) )
        {
            p_widget->setWindowSurface( static_cast<QWindowSurface *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETUPUI )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if 0
        /*
         * _public_functions_ : void  setupUi ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_widget->setupUi( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
#endif  /* 0 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSize  size () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->size() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEINCREMENT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSize  sizeIncrement () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_widget->sizeIncrement() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEPOLICY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QSizePolicy  sizePolicy () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QSizePolicy'
            // qth_itemPushNewReturn( QtH::QSizePolicy, new QSizePolicy( p_widget->sizePolicy() ), "QSizePolicy" );
            qth_errRT_UNKNOWNOBJ( "QWidget::sizePolicy", "Don't know how to return type 'QSizePolicy'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STACKUNDER )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  stackUnder ( QWidget * w )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_widget->stackUnder( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STATUSTIP )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  statusTip () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->statusTip() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STYLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QStyle *  style () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QStyle'
            // qth_itemReturn( (PCPP_OBJECT) p_widget->style(), "QStyle" );
            qth_errRT_UNKNOWNOBJ( "QWidget::style", "Don't know how to return type 'QStyle'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STYLESHEET )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  styleSheet () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->styleSheet() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TESTATTRIBUTE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  testAttribute ( Qt::WidgetAttribute attribute ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::WidgetAttribute" ) )
        {
            hb_retl( p_widget->testAttribute( (Qt::WidgetAttribute)  qth_par_IntType( 1 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOOLTIP )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  toolTip () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->toolTip() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNDERMOUSE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  underMouse () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->underMouse() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNGRABGESTURE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  ungrabGesture ( Qt::GestureType gesture )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::GestureType" ) )
        {
            p_widget->ungrabGesture( (Qt::GestureType)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNSETCURSOR )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  unsetCursor ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->unsetCursor();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNSETLAYOUTDIRECTION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  unsetLayoutDirection ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->unsetLayoutDirection();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNSETLOCALE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  unsetLocale ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->unsetLocale();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UPDATE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  update ( int x, int y, int w, int h )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_widget->update( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  update ( const QRect & rect )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & rect = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            p_widget->update( rect );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  update ( const QRegion & rgn )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRegion" ) )
        {
            const QRegion & rgn = * static_cast<QRegion *>( qth_par_QthObject( 1 ) );
            p_widget->update( rgn );
            hb_ret();
            return;
        }
        /*
         * _public_slots_ : void  update ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->update();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UPDATEGEOMETRY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : void  updateGeometry ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->updateGeometry();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UPDATESENABLED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : bool  updatesEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->updatesEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VISIBLEREGION )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QRegion  visibleRegion () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QRegion'
            // qth_itemPushNewReturn( QtH::QRegion, new QRegion( p_widget->visibleRegion() ), "QRegion" );
            qth_errRT_UNKNOWNOBJ( "QWidget::visibleRegion", "Don't know how to return type 'QRegion'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WHATSTHIS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  whatsThis () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->whatsThis() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDTH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  width () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->width() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINID )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : WId  winId () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'WId'
            // qth_itemPushNewReturn( QtH::WId, new WId( p_widget->winId() ), "WId" );
            qth_errRT_UNKNOWNOBJ( "QWidget::winId", "Don't know how to return type 'WId'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOW )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWidget *  window () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_widget->window(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWFILEPATH )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  windowFilePath () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->windowFilePath() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWFLAGS )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::WindowFlags  windowFlags () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->windowFlags() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWICON )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QIcon  windowIcon () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QIcon, new QIcon( p_widget->windowIcon() ), "QIcon" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWICONTEXT )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  windowIconText () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->windowIconText() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWMODALITY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::WindowModality  windowModality () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->windowModality() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWOPACITY )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : qreal  windowOpacity () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_widget->windowOpacity() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWROLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  windowRole () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->windowRole() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWSTATE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::WindowStates  windowState () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->windowState() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWSURFACE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QWindowSurface *  windowSurface () const (preliminary)
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QWindowSurface'
            // qth_itemReturn( (PCPP_OBJECT) p_widget->windowSurface(), "QWindowSurface" );
            qth_errRT_UNKNOWNOBJ( "QWidget::windowSurface", "Don't know how to return type 'QWindowSurface'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWTITLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : QString  windowTitle () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_widget->windowTitle() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WINDOWTYPE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : Qt::WindowType  windowType () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->windowType() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  x () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->x() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X11INFO )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if X11
        /*
         * _public_functions_ : const QX11Info &  x11Info () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QX11Info'
            // qth_itemReturn( (PCPP_OBJECT)  & p_widget->x11Info(), "QX11Info" );
            qth_errRT_UNKNOWNOBJ( "QWidget::x11Info", "Don't know how to return type 'QX11Info'" ) ;
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X11PICTUREHANDLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if X11
        /*
         * _public_functions_ : Qt::HANDLE  x11PictureHandle () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'Qt::HANDLE'
            // qth_itemPushNewReturn( QtH::Qt::HANDLE, new Qt::HANDLE( p_widget->x11PictureHandle() ), "Qt::HANDLE" );
            qth_errRT_UNKNOWNOBJ( "QWidget::x11PictureHandle", "Don't know how to return type 'Qt::HANDLE'" ) ;
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( Y )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_functions_ : int  y () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_widget->y() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETDC )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if 0
        /*
         * _reimplemented_public_functions_ : virtual HDC  getDC () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'HDC'
            // qth_itemPushNewReturn( QtH::HDC, new HDC( p_widget->getDC() ), "HDC" );
            qth_errRT_UNKNOWNOBJ( "QWidget::getDC", "Don't know how to return type 'HDC'" ) ;
            return;
        }
#endif  /* 0 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PAINTENGINE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _reimplemented_public_functions_ : virtual QPaintEngine *  paintEngine () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QPaintEngine'
            // qth_itemReturn( (PCPP_OBJECT) p_widget->paintEngine(), "QPaintEngine" );
            qth_errRT_UNKNOWNOBJ( "QWidget::paintEngine", "Don't know how to return type 'QPaintEngine'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RELEASEDC )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
#if 0
        /*
         * _reimplemented_public_functions_ : virtual void  releaseDC ( HDC hdc ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "HDC" ) )
        {
            p_widget->releaseDC( * static_cast<HDC *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
#endif  /* 0 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLOSE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : bool  close ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_widget->close() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HIDE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  hide ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->hide();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOWER )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  lower ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->lower();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RAISE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  raise ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->raise();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDISABLED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  setDisabled ( bool disable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setDisabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETENABLED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  setEnabled ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHIDDEN )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  setHidden ( bool hidden )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setHidden( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTYLESHEET )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  setStyleSheet ( const QString & styleSheet )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString styleSheet =  qth_par_QString( 1 );
            p_widget->setStyleSheet( styleSheet );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVISIBLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : virtual void  setVisible ( bool visible )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setVisible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWMODIFIED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  setWindowModified ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_widget->setWindowModified( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWINDOWTITLE )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  setWindowTitle ( const QString & )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString p_QString1 =  qth_par_QString( 1 );
            p_widget->setWindowTitle( p_QString1 );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOW )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  show ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->show();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWFULLSCREEN )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  showFullScreen ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->showFullScreen();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWMAXIMIZED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  showMaximized ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->showMaximized();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWMINIMIZED )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  showMinimized ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->showMinimized();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWNORMAL )
{
    QWidget* p_widget = static_cast<QWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_widget )
    {
        /*
         * _public_slots_ : void  showNormal ()
         */
        if( hb_pcount() == 0 )
        {
            p_widget->showNormal();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QWIDGET_FIND )
{
    /*
     * _static_public_members_ : QWidget *  find ( WId id )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "WId" ) )
    {
        qth_itemReturn( (PCPP_OBJECT) QWidget::find( * static_cast<WId *>( qth_par_QthObject( 1 ) ) ), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QWIDGET_KEYBOARDGRABBER )
{
    /*
     * _static_public_members_ : QWidget *  keyboardGrabber ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemReturn( (PCPP_OBJECT) QWidget::keyboardGrabber(), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QWIDGET_MOUSEGRABBER )
{
    /*
     * _static_public_members_ : QWidget *  mouseGrabber ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemReturn( (PCPP_OBJECT) QWidget::mouseGrabber(), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QWIDGET_SETTABORDER )
{
    /*
     * _static_public_members_ : void  setTabOrder ( QWidget * first, QWidget * second )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QWidget" ) )
    {
        QWidget::setTabOrder( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), static_cast<QWidget *>( qth_par_QthObject( 2 ) ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                     , HB_FUNCNAME( NEW                      ) );
    hb_clsAdd( uiClass, "ACCEPTDROPS"             , HB_FUNCNAME( ACCEPTDROPS              ) );
    hb_clsAdd( uiClass, "ACCESSIBLEDESCRIPTION"   , HB_FUNCNAME( ACCESSIBLEDESCRIPTION    ) );
    hb_clsAdd( uiClass, "ACCESSIBLENAME"          , HB_FUNCNAME( ACCESSIBLENAME           ) );
    hb_clsAdd( uiClass, "ACTIONS"                 , HB_FUNCNAME( ACTIONS                  ) );
    hb_clsAdd( uiClass, "ACTIVATEWINDOW"          , HB_FUNCNAME( ACTIVATEWINDOW           ) );
    hb_clsAdd( uiClass, "ADDACTION"               , HB_FUNCNAME( ADDACTION                ) );
    hb_clsAdd( uiClass, "ADDACTIONS"              , HB_FUNCNAME( ADDACTIONS               ) );
    hb_clsAdd( uiClass, "ADJUSTSIZE"              , HB_FUNCNAME( ADJUSTSIZE               ) );
    hb_clsAdd( uiClass, "AUTOFILLBACKGROUND"      , HB_FUNCNAME( AUTOFILLBACKGROUND       ) );
    hb_clsAdd( uiClass, "BACKGROUNDROLE"          , HB_FUNCNAME( BACKGROUNDROLE           ) );
    hb_clsAdd( uiClass, "BASESIZE"                , HB_FUNCNAME( BASESIZE                 ) );
    hb_clsAdd( uiClass, "CHILDAT"                 , HB_FUNCNAME( CHILDAT                  ) );
    hb_clsAdd( uiClass, "CHILDRENRECT"            , HB_FUNCNAME( CHILDRENRECT             ) );
    hb_clsAdd( uiClass, "CHILDRENREGION"          , HB_FUNCNAME( CHILDRENREGION           ) );
    hb_clsAdd( uiClass, "CLEARFOCUS"              , HB_FUNCNAME( CLEARFOCUS               ) );
    hb_clsAdd( uiClass, "CLEARMASK"               , HB_FUNCNAME( CLEARMASK                ) );
    hb_clsAdd( uiClass, "CONTENTSMARGINS"         , HB_FUNCNAME( CONTENTSMARGINS          ) );
    hb_clsAdd( uiClass, "CONTENTSRECT"            , HB_FUNCNAME( CONTENTSRECT             ) );
    hb_clsAdd( uiClass, "CONTEXTMENUPOLICY"       , HB_FUNCNAME( CONTEXTMENUPOLICY        ) );
    hb_clsAdd( uiClass, "CURSOR"                  , HB_FUNCNAME( CURSOR                   ) );
    hb_clsAdd( uiClass, "EFFECTIVEWINID"          , HB_FUNCNAME( EFFECTIVEWINID           ) );
    hb_clsAdd( uiClass, "ENSUREPOLISHED"          , HB_FUNCNAME( ENSUREPOLISHED           ) );
    hb_clsAdd( uiClass, "FOCUSPOLICY"             , HB_FUNCNAME( FOCUSPOLICY              ) );
    hb_clsAdd( uiClass, "FOCUSPROXY"              , HB_FUNCNAME( FOCUSPROXY               ) );
    hb_clsAdd( uiClass, "FOCUSWIDGET"             , HB_FUNCNAME( FOCUSWIDGET              ) );
    hb_clsAdd( uiClass, "FONT"                    , HB_FUNCNAME( FONT                     ) );
    hb_clsAdd( uiClass, "FONTINFO"                , HB_FUNCNAME( FONTINFO                 ) );
    hb_clsAdd( uiClass, "FONTMETRICS"             , HB_FUNCNAME( FONTMETRICS              ) );
    hb_clsAdd( uiClass, "FOREGROUNDROLE"          , HB_FUNCNAME( FOREGROUNDROLE           ) );
    hb_clsAdd( uiClass, "FRAMEGEOMETRY"           , HB_FUNCNAME( FRAMEGEOMETRY            ) );
    hb_clsAdd( uiClass, "FRAMESIZE"               , HB_FUNCNAME( FRAMESIZE                ) );
    hb_clsAdd( uiClass, "GEOMETRY"                , HB_FUNCNAME( GEOMETRY                 ) );
    hb_clsAdd( uiClass, "GETCONTENTSMARGINS"      , HB_FUNCNAME( GETCONTENTSMARGINS       ) );
    hb_clsAdd( uiClass, "GRABGESTURE"             , HB_FUNCNAME( GRABGESTURE              ) );
    hb_clsAdd( uiClass, "GRABKEYBOARD"            , HB_FUNCNAME( GRABKEYBOARD             ) );
    hb_clsAdd( uiClass, "GRABMOUSE"               , HB_FUNCNAME( GRABMOUSE                ) );
    hb_clsAdd( uiClass, "GRABSHORTCUT"            , HB_FUNCNAME( GRABSHORTCUT             ) );
    hb_clsAdd( uiClass, "GRAPHICSEFFECT"          , HB_FUNCNAME( GRAPHICSEFFECT           ) );
    hb_clsAdd( uiClass, "GRAPHICSPROXYWIDGET"     , HB_FUNCNAME( GRAPHICSPROXYWIDGET      ) );
    hb_clsAdd( uiClass, "HASEDITFOCUS"            , HB_FUNCNAME( HASEDITFOCUS             ) );
    hb_clsAdd( uiClass, "HASFOCUS"                , HB_FUNCNAME( HASFOCUS                 ) );
    hb_clsAdd( uiClass, "HASMOUSETRACKING"        , HB_FUNCNAME( HASMOUSETRACKING         ) );
    hb_clsAdd( uiClass, "HEIGHT"                  , HB_FUNCNAME( HEIGHT                   ) );
    hb_clsAdd( uiClass, "HEIGHTFORWIDTH"          , HB_FUNCNAME( HEIGHTFORWIDTH           ) );
    hb_clsAdd( uiClass, "INPUTCONTEXT"            , HB_FUNCNAME( INPUTCONTEXT             ) );
    hb_clsAdd( uiClass, "INPUTMETHODHINTS"        , HB_FUNCNAME( INPUTMETHODHINTS         ) );
    hb_clsAdd( uiClass, "INPUTMETHODQUERY"        , HB_FUNCNAME( INPUTMETHODQUERY         ) );
    hb_clsAdd( uiClass, "INSERTACTION"            , HB_FUNCNAME( INSERTACTION             ) );
    hb_clsAdd( uiClass, "INSERTACTIONS"           , HB_FUNCNAME( INSERTACTIONS            ) );
    hb_clsAdd( uiClass, "ISACTIVEWINDOW"          , HB_FUNCNAME( ISACTIVEWINDOW           ) );
    hb_clsAdd( uiClass, "ISANCESTOROF"            , HB_FUNCNAME( ISANCESTOROF             ) );
    hb_clsAdd( uiClass, "ISENABLED"               , HB_FUNCNAME( ISENABLED                ) );
    hb_clsAdd( uiClass, "ISENABLEDTO"             , HB_FUNCNAME( ISENABLEDTO              ) );
    hb_clsAdd( uiClass, "ISFULLSCREEN"            , HB_FUNCNAME( ISFULLSCREEN             ) );
    hb_clsAdd( uiClass, "ISHIDDEN"                , HB_FUNCNAME( ISHIDDEN                 ) );
    hb_clsAdd( uiClass, "ISMAXIMIZED"             , HB_FUNCNAME( ISMAXIMIZED              ) );
    hb_clsAdd( uiClass, "ISMINIMIZED"             , HB_FUNCNAME( ISMINIMIZED              ) );
    hb_clsAdd( uiClass, "ISMODAL"                 , HB_FUNCNAME( ISMODAL                  ) );
    hb_clsAdd( uiClass, "ISVISIBLE"               , HB_FUNCNAME( ISVISIBLE                ) );
    hb_clsAdd( uiClass, "ISVISIBLETO"             , HB_FUNCNAME( ISVISIBLETO              ) );
    hb_clsAdd( uiClass, "ISWINDOW"                , HB_FUNCNAME( ISWINDOW                 ) );
    hb_clsAdd( uiClass, "ISWINDOWMODIFIED"        , HB_FUNCNAME( ISWINDOWMODIFIED         ) );
    hb_clsAdd( uiClass, "LAYOUT"                  , HB_FUNCNAME( LAYOUT                   ) );
    hb_clsAdd( uiClass, "LAYOUTDIRECTION"         , HB_FUNCNAME( LAYOUTDIRECTION          ) );
    hb_clsAdd( uiClass, "LOCALE"                  , HB_FUNCNAME( LOCALE                   ) );
    hb_clsAdd( uiClass, "MACCGHANDLE"             , HB_FUNCNAME( MACCGHANDLE              ) );
    hb_clsAdd( uiClass, "MACQDHANDLE"             , HB_FUNCNAME( MACQDHANDLE              ) );
    hb_clsAdd( uiClass, "MAPFROM"                 , HB_FUNCNAME( MAPFROM                  ) );
    hb_clsAdd( uiClass, "MAPFROMGLOBAL"           , HB_FUNCNAME( MAPFROMGLOBAL            ) );
    hb_clsAdd( uiClass, "MAPFROMPARENT"           , HB_FUNCNAME( MAPFROMPARENT            ) );
    hb_clsAdd( uiClass, "MAPTO"                   , HB_FUNCNAME( MAPTO                    ) );
    hb_clsAdd( uiClass, "MAPTOGLOBAL"             , HB_FUNCNAME( MAPTOGLOBAL              ) );
    hb_clsAdd( uiClass, "MAPTOPARENT"             , HB_FUNCNAME( MAPTOPARENT              ) );
    hb_clsAdd( uiClass, "MASK"                    , HB_FUNCNAME( MASK                     ) );
    hb_clsAdd( uiClass, "MAXIMUMHEIGHT"           , HB_FUNCNAME( MAXIMUMHEIGHT            ) );
    hb_clsAdd( uiClass, "MAXIMUMSIZE"             , HB_FUNCNAME( MAXIMUMSIZE              ) );
    hb_clsAdd( uiClass, "MAXIMUMWIDTH"            , HB_FUNCNAME( MAXIMUMWIDTH             ) );
    hb_clsAdd( uiClass, "MINIMUMHEIGHT"           , HB_FUNCNAME( MINIMUMHEIGHT            ) );
    hb_clsAdd( uiClass, "MINIMUMSIZE"             , HB_FUNCNAME( MINIMUMSIZE              ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT"         , HB_FUNCNAME( MINIMUMSIZEHINT          ) );
    hb_clsAdd( uiClass, "MINIMUMWIDTH"            , HB_FUNCNAME( MINIMUMWIDTH             ) );
    hb_clsAdd( uiClass, "MOVE"                    , HB_FUNCNAME( MOVE                     ) );
    hb_clsAdd( uiClass, "NATIVEPARENTWIDGET"      , HB_FUNCNAME( NATIVEPARENTWIDGET       ) );
    hb_clsAdd( uiClass, "NEXTINFOCUSCHAIN"        , HB_FUNCNAME( NEXTINFOCUSCHAIN         ) );
    hb_clsAdd( uiClass, "NORMALGEOMETRY"          , HB_FUNCNAME( NORMALGEOMETRY           ) );
    hb_clsAdd( uiClass, "OVERRIDEWINDOWFLAGS"     , HB_FUNCNAME( OVERRIDEWINDOWFLAGS      ) );
    hb_clsAdd( uiClass, "PALETTE"                 , HB_FUNCNAME( PALETTE                  ) );
    hb_clsAdd( uiClass, "PARENTWIDGET"            , HB_FUNCNAME( PARENTWIDGET             ) );
    hb_clsAdd( uiClass, "POS"                     , HB_FUNCNAME( POS                      ) );
    hb_clsAdd( uiClass, "PREVIOUSINFOCUSCHAIN"    , HB_FUNCNAME( PREVIOUSINFOCUSCHAIN     ) );
    hb_clsAdd( uiClass, "RECT"                    , HB_FUNCNAME( RECT                     ) );
    hb_clsAdd( uiClass, "RELEASEKEYBOARD"         , HB_FUNCNAME( RELEASEKEYBOARD          ) );
    hb_clsAdd( uiClass, "RELEASEMOUSE"            , HB_FUNCNAME( RELEASEMOUSE             ) );
    hb_clsAdd( uiClass, "RELEASESHORTCUT"         , HB_FUNCNAME( RELEASESHORTCUT          ) );
    hb_clsAdd( uiClass, "REMOVEACTION"            , HB_FUNCNAME( REMOVEACTION             ) );
    hb_clsAdd( uiClass, "RENDER"                  , HB_FUNCNAME( RENDER                   ) );
    hb_clsAdd( uiClass, "REPAINT"                 , HB_FUNCNAME( REPAINT                  ) );
    hb_clsAdd( uiClass, "RESIZE"                  , HB_FUNCNAME( RESIZE                   ) );
    hb_clsAdd( uiClass, "RESTOREGEOMETRY"         , HB_FUNCNAME( RESTOREGEOMETRY          ) );
    hb_clsAdd( uiClass, "SAVEGEOMETRY"            , HB_FUNCNAME( SAVEGEOMETRY             ) );
    hb_clsAdd( uiClass, "SCROLL"                  , HB_FUNCNAME( SCROLL                   ) );
    hb_clsAdd( uiClass, "SETACCEPTDROPS"          , HB_FUNCNAME( SETACCEPTDROPS           ) );
    hb_clsAdd( uiClass, "SETACCESSIBLEDESCRIPTION", HB_FUNCNAME( SETACCESSIBLEDESCRIPTION ) );
    hb_clsAdd( uiClass, "SETACCESSIBLENAME"       , HB_FUNCNAME( SETACCESSIBLENAME        ) );
    hb_clsAdd( uiClass, "SETATTRIBUTE"            , HB_FUNCNAME( SETATTRIBUTE             ) );
    hb_clsAdd( uiClass, "SETAUTOFILLBACKGROUND"   , HB_FUNCNAME( SETAUTOFILLBACKGROUND    ) );
    hb_clsAdd( uiClass, "SETBACKGROUNDROLE"       , HB_FUNCNAME( SETBACKGROUNDROLE        ) );
    hb_clsAdd( uiClass, "SETBASESIZE"             , HB_FUNCNAME( SETBASESIZE              ) );
    hb_clsAdd( uiClass, "SETCONTENTSMARGINS"      , HB_FUNCNAME( SETCONTENTSMARGINS       ) );
    hb_clsAdd( uiClass, "SETCONTEXTMENUPOLICY"    , HB_FUNCNAME( SETCONTEXTMENUPOLICY     ) );
    hb_clsAdd( uiClass, "SETCURSOR"               , HB_FUNCNAME( SETCURSOR                ) );
    hb_clsAdd( uiClass, "SETEDITFOCUS"            , HB_FUNCNAME( SETEDITFOCUS             ) );
    hb_clsAdd( uiClass, "SETFIXEDHEIGHT"          , HB_FUNCNAME( SETFIXEDHEIGHT           ) );
    hb_clsAdd( uiClass, "SETFIXEDSIZE"            , HB_FUNCNAME( SETFIXEDSIZE             ) );
    hb_clsAdd( uiClass, "SETFIXEDWIDTH"           , HB_FUNCNAME( SETFIXEDWIDTH            ) );
    hb_clsAdd( uiClass, "SETFOCUS"                , HB_FUNCNAME( SETFOCUS                 ) );
    hb_clsAdd( uiClass, "SETFOCUSPOLICY"          , HB_FUNCNAME( SETFOCUSPOLICY           ) );
    hb_clsAdd( uiClass, "SETFOCUSPROXY"           , HB_FUNCNAME( SETFOCUSPROXY            ) );
    hb_clsAdd( uiClass, "SETFONT"                 , HB_FUNCNAME( SETFONT                  ) );
    hb_clsAdd( uiClass, "SETFOREGROUNDROLE"       , HB_FUNCNAME( SETFOREGROUNDROLE        ) );
    hb_clsAdd( uiClass, "SETGEOMETRY"             , HB_FUNCNAME( SETGEOMETRY              ) );
    hb_clsAdd( uiClass, "SETGRAPHICSEFFECT"       , HB_FUNCNAME( SETGRAPHICSEFFECT        ) );
    hb_clsAdd( uiClass, "SETINPUTCONTEXT"         , HB_FUNCNAME( SETINPUTCONTEXT          ) );
    hb_clsAdd( uiClass, "SETINPUTMETHODHINTS"     , HB_FUNCNAME( SETINPUTMETHODHINTS      ) );
    hb_clsAdd( uiClass, "SETLAYOUT"               , HB_FUNCNAME( SETLAYOUT                ) );
    hb_clsAdd( uiClass, "SETLAYOUTDIRECTION"      , HB_FUNCNAME( SETLAYOUTDIRECTION       ) );
    hb_clsAdd( uiClass, "SETLOCALE"               , HB_FUNCNAME( SETLOCALE                ) );
    hb_clsAdd( uiClass, "SETMASK"                 , HB_FUNCNAME( SETMASK                  ) );
    hb_clsAdd( uiClass, "SETMAXIMUMHEIGHT"        , HB_FUNCNAME( SETMAXIMUMHEIGHT         ) );
    hb_clsAdd( uiClass, "SETMAXIMUMSIZE"          , HB_FUNCNAME( SETMAXIMUMSIZE           ) );
    hb_clsAdd( uiClass, "SETMAXIMUMWIDTH"         , HB_FUNCNAME( SETMAXIMUMWIDTH          ) );
    hb_clsAdd( uiClass, "SETMINIMUMHEIGHT"        , HB_FUNCNAME( SETMINIMUMHEIGHT         ) );
    hb_clsAdd( uiClass, "SETMINIMUMSIZE"          , HB_FUNCNAME( SETMINIMUMSIZE           ) );
    hb_clsAdd( uiClass, "SETMINIMUMWIDTH"         , HB_FUNCNAME( SETMINIMUMWIDTH          ) );
    hb_clsAdd( uiClass, "SETMOUSETRACKING"        , HB_FUNCNAME( SETMOUSETRACKING         ) );
    hb_clsAdd( uiClass, "SETPALETTE"              , HB_FUNCNAME( SETPALETTE               ) );
    hb_clsAdd( uiClass, "SETPARENT"               , HB_FUNCNAME( SETPARENT                ) );
    hb_clsAdd( uiClass, "SETSHORTCUTAUTOREPEAT"   , HB_FUNCNAME( SETSHORTCUTAUTOREPEAT    ) );
    hb_clsAdd( uiClass, "SETSHORTCUTENABLED"      , HB_FUNCNAME( SETSHORTCUTENABLED       ) );
    hb_clsAdd( uiClass, "SETSIZEINCREMENT"        , HB_FUNCNAME( SETSIZEINCREMENT         ) );
    hb_clsAdd( uiClass, "SETSIZEPOLICY"           , HB_FUNCNAME( SETSIZEPOLICY            ) );
    hb_clsAdd( uiClass, "SETSTATUSTIP"            , HB_FUNCNAME( SETSTATUSTIP             ) );
    hb_clsAdd( uiClass, "SETSTYLE"                , HB_FUNCNAME( SETSTYLE                 ) );
    hb_clsAdd( uiClass, "SETTOOLTIP"              , HB_FUNCNAME( SETTOOLTIP               ) );
    hb_clsAdd( uiClass, "SETUPDATESENABLED"       , HB_FUNCNAME( SETUPDATESENABLED        ) );
    hb_clsAdd( uiClass, "SETWHATSTHIS"            , HB_FUNCNAME( SETWHATSTHIS             ) );
    hb_clsAdd( uiClass, "SETWINDOWFILEPATH"       , HB_FUNCNAME( SETWINDOWFILEPATH        ) );
    hb_clsAdd( uiClass, "SETWINDOWFLAGS"          , HB_FUNCNAME( SETWINDOWFLAGS           ) );
    hb_clsAdd( uiClass, "SETWINDOWICON"           , HB_FUNCNAME( SETWINDOWICON            ) );
    hb_clsAdd( uiClass, "SETWINDOWICONTEXT"       , HB_FUNCNAME( SETWINDOWICONTEXT        ) );
    hb_clsAdd( uiClass, "SETWINDOWMODALITY"       , HB_FUNCNAME( SETWINDOWMODALITY        ) );
    hb_clsAdd( uiClass, "SETWINDOWOPACITY"        , HB_FUNCNAME( SETWINDOWOPACITY         ) );
    hb_clsAdd( uiClass, "SETWINDOWROLE"           , HB_FUNCNAME( SETWINDOWROLE            ) );
    hb_clsAdd( uiClass, "SETWINDOWSTATE"          , HB_FUNCNAME( SETWINDOWSTATE           ) );
    hb_clsAdd( uiClass, "SETWINDOWSURFACE"        , HB_FUNCNAME( SETWINDOWSURFACE         ) );
    hb_clsAdd( uiClass, "SETUPUI"                 , HB_FUNCNAME( SETUPUI                  ) );
    hb_clsAdd( uiClass, "SIZE"                    , HB_FUNCNAME( SIZE                     ) );
    hb_clsAdd( uiClass, "SIZEHINT"                , HB_FUNCNAME( SIZEHINT                 ) );
    hb_clsAdd( uiClass, "SIZEINCREMENT"           , HB_FUNCNAME( SIZEINCREMENT            ) );
    hb_clsAdd( uiClass, "SIZEPOLICY"              , HB_FUNCNAME( SIZEPOLICY               ) );
    hb_clsAdd( uiClass, "STACKUNDER"              , HB_FUNCNAME( STACKUNDER               ) );
    hb_clsAdd( uiClass, "STATUSTIP"               , HB_FUNCNAME( STATUSTIP                ) );
    hb_clsAdd( uiClass, "STYLE"                   , HB_FUNCNAME( STYLE                    ) );
    hb_clsAdd( uiClass, "STYLESHEET"              , HB_FUNCNAME( STYLESHEET               ) );
    hb_clsAdd( uiClass, "TESTATTRIBUTE"           , HB_FUNCNAME( TESTATTRIBUTE            ) );
    hb_clsAdd( uiClass, "TOOLTIP"                 , HB_FUNCNAME( TOOLTIP                  ) );
    hb_clsAdd( uiClass, "UNDERMOUSE"              , HB_FUNCNAME( UNDERMOUSE               ) );
    hb_clsAdd( uiClass, "UNGRABGESTURE"           , HB_FUNCNAME( UNGRABGESTURE            ) );
    hb_clsAdd( uiClass, "UNSETCURSOR"             , HB_FUNCNAME( UNSETCURSOR              ) );
    hb_clsAdd( uiClass, "UNSETLAYOUTDIRECTION"    , HB_FUNCNAME( UNSETLAYOUTDIRECTION     ) );
    hb_clsAdd( uiClass, "UNSETLOCALE"             , HB_FUNCNAME( UNSETLOCALE              ) );
    hb_clsAdd( uiClass, "UPDATE"                  , HB_FUNCNAME( UPDATE                   ) );
    hb_clsAdd( uiClass, "UPDATEGEOMETRY"          , HB_FUNCNAME( UPDATEGEOMETRY           ) );
    hb_clsAdd( uiClass, "UPDATESENABLED"          , HB_FUNCNAME( UPDATESENABLED           ) );
    hb_clsAdd( uiClass, "VISIBLEREGION"           , HB_FUNCNAME( VISIBLEREGION            ) );
    hb_clsAdd( uiClass, "WHATSTHIS"               , HB_FUNCNAME( WHATSTHIS                ) );
    hb_clsAdd( uiClass, "WIDTH"                   , HB_FUNCNAME( WIDTH                    ) );
    hb_clsAdd( uiClass, "WINID"                   , HB_FUNCNAME( WINID                    ) );
    hb_clsAdd( uiClass, "WINDOW"                  , HB_FUNCNAME( WINDOW                   ) );
    hb_clsAdd( uiClass, "WINDOWFILEPATH"          , HB_FUNCNAME( WINDOWFILEPATH           ) );
    hb_clsAdd( uiClass, "WINDOWFLAGS"             , HB_FUNCNAME( WINDOWFLAGS              ) );
    hb_clsAdd( uiClass, "WINDOWICON"              , HB_FUNCNAME( WINDOWICON               ) );
    hb_clsAdd( uiClass, "WINDOWICONTEXT"          , HB_FUNCNAME( WINDOWICONTEXT           ) );
    hb_clsAdd( uiClass, "WINDOWMODALITY"          , HB_FUNCNAME( WINDOWMODALITY           ) );
    hb_clsAdd( uiClass, "WINDOWOPACITY"           , HB_FUNCNAME( WINDOWOPACITY            ) );
    hb_clsAdd( uiClass, "WINDOWROLE"              , HB_FUNCNAME( WINDOWROLE               ) );
    hb_clsAdd( uiClass, "WINDOWSTATE"             , HB_FUNCNAME( WINDOWSTATE              ) );
    hb_clsAdd( uiClass, "WINDOWSURFACE"           , HB_FUNCNAME( WINDOWSURFACE            ) );
    hb_clsAdd( uiClass, "WINDOWTITLE"             , HB_FUNCNAME( WINDOWTITLE              ) );
    hb_clsAdd( uiClass, "WINDOWTYPE"              , HB_FUNCNAME( WINDOWTYPE               ) );
    hb_clsAdd( uiClass, "X"                       , HB_FUNCNAME( X                        ) );
    hb_clsAdd( uiClass, "X11INFO"                 , HB_FUNCNAME( X11INFO                  ) );
    hb_clsAdd( uiClass, "X11PICTUREHANDLE"        , HB_FUNCNAME( X11PICTUREHANDLE         ) );
    hb_clsAdd( uiClass, "Y"                       , HB_FUNCNAME( Y                        ) );
    hb_clsAdd( uiClass, "GETDC"                   , HB_FUNCNAME( GETDC                    ) );
    hb_clsAdd( uiClass, "PAINTENGINE"             , HB_FUNCNAME( PAINTENGINE              ) );
    hb_clsAdd( uiClass, "RELEASEDC"               , HB_FUNCNAME( RELEASEDC                ) );
    hb_clsAdd( uiClass, "CLOSE"                   , HB_FUNCNAME( CLOSE                    ) );
    hb_clsAdd( uiClass, "HIDE"                    , HB_FUNCNAME( HIDE                     ) );
    hb_clsAdd( uiClass, "LOWER"                   , HB_FUNCNAME( LOWER                    ) );
    hb_clsAdd( uiClass, "RAISE"                   , HB_FUNCNAME( RAISE                    ) );
    hb_clsAdd( uiClass, "SETDISABLED"             , HB_FUNCNAME( SETDISABLED              ) );
    hb_clsAdd( uiClass, "SETENABLED"              , HB_FUNCNAME( SETENABLED               ) );
    hb_clsAdd( uiClass, "SETHIDDEN"               , HB_FUNCNAME( SETHIDDEN                ) );
    hb_clsAdd( uiClass, "SETSTYLESHEET"           , HB_FUNCNAME( SETSTYLESHEET            ) );
    hb_clsAdd( uiClass, "SETVISIBLE"              , HB_FUNCNAME( SETVISIBLE               ) );
    hb_clsAdd( uiClass, "SETWINDOWMODIFIED"       , HB_FUNCNAME( SETWINDOWMODIFIED        ) );
    hb_clsAdd( uiClass, "SETWINDOWTITLE"          , HB_FUNCNAME( SETWINDOWTITLE           ) );
    hb_clsAdd( uiClass, "SHOW"                    , HB_FUNCNAME( SHOW                     ) );
    hb_clsAdd( uiClass, "SHOWFULLSCREEN"          , HB_FUNCNAME( SHOWFULLSCREEN           ) );
    hb_clsAdd( uiClass, "SHOWMAXIMIZED"           , HB_FUNCNAME( SHOWMAXIMIZED            ) );
    hb_clsAdd( uiClass, "SHOWMINIMIZED"           , HB_FUNCNAME( SHOWMINIMIZED            ) );
    hb_clsAdd( uiClass, "SHOWNORMAL"              , HB_FUNCNAME( SHOWNORMAL               ) );
    hb_clsAdd( uiClass, "FIND"                    , HB_FUNCNAME( QWIDGET_FIND             ) );
    hb_clsAdd( uiClass, "KEYBOARDGRABBER"         , HB_FUNCNAME( QWIDGET_KEYBOARDGRABBER  ) );
    hb_clsAdd( uiClass, "MOUSEGRABBER"            , HB_FUNCNAME( QWIDGET_MOUSEGRABBER     ) );
    hb_clsAdd( uiClass, "SETTABORDER"             , HB_FUNCNAME( QWIDGET_SETTABORDER      ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
