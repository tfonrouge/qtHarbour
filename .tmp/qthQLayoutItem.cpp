/*
 * $Id: qthQLayoutItem.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QLayoutItem>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QLAYOUTITEM );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QWIDGET ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QLAYOUT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QLAYOUTITEM )
{ "QLAYOUTITEM", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QLAYOUTITEM )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QWIDGET", {HB_FS_PUBLIC}, {HB_FUNCNAME( QWIDGET )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QLAYOUT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QLAYOUT )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QLAYOUTITEM )

HB_FUNC( QLAYOUTITEM )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( ALIGNMENT )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : Qt::Alignment  alignment () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_layoutItem->alignment() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTROLTYPES )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : QSizePolicy::ControlTypes  controlTypes () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QSizePolicy::ControlTypes'
            // qth_itemPushNewReturn( QtH::QSizePolicy::ControlTypes, new QSizePolicy::ControlTypes( p_layoutItem->controlTypes() ), "QSizePolicy::ControlTypes" );
            qth_errRT_UNKNOWNOBJ( "QLayoutItem::controlTypes", "Don't know how to return type 'QSizePolicy::ControlTypes'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EXPANDINGDIRECTIONS )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual Qt::Orientations  expandingDirections () const = 0
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_layoutItem->expandingDirections() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GEOMETRY )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QRect  geometry () const = 0
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_layoutItem->geometry() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASHEIGHTFORWIDTH )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual bool  hasHeightForWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_layoutItem->hasHeightForWidth() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHTFORWIDTH )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual int  heightForWidth ( int w ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_layoutItem->heightForWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INVALIDATE )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual void  invalidate ()
         */
        if( hb_pcount() == 0 )
        {
            p_layoutItem->invalidate();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISEMPTY )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual bool  isEmpty () const = 0
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_layoutItem->isEmpty() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LAYOUT )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QLayout *  layout ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layoutItem->layout(), "QLayout" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMSIZE )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QSize  maximumSize () const = 0
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_layoutItem->maximumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMHEIGHTFORWIDTH )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual int  minimumHeightForWidth ( int w ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_layoutItem->minimumHeightForWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZE )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QSize  minimumSize () const = 0
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_layoutItem->minimumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALIGNMENT )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : void  setAlignment ( Qt::Alignment alignment )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Alignment" ) )
        {
            p_layoutItem->setAlignment( (Qt::Alignment)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGEOMETRY )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual void  setGeometry ( const QRect & r ) = 0
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & r = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            p_layoutItem->setGeometry( r );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QSize  sizeHint () const = 0
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_layoutItem->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPACERITEM )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QSpacerItem *  spacerItem ()
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QSpacerItem'
            // qth_itemReturn( (PCPP_OBJECT) p_layoutItem->spacerItem(), "QSpacerItem" );
            qth_errRT_UNKNOWNOBJ( "QLayoutItem::spacerItem", "Don't know how to return type 'QSpacerItem'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDGET )
{
    QLayoutItem* p_layoutItem = static_cast<QLayoutItem *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layoutItem )
    {
        /*
         * _public_functions_ : virtual QWidget *  widget ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layoutItem->widget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "ALIGNMENT"            , HB_FUNCNAME( ALIGNMENT             ) );
    hb_clsAdd( uiClass, "CONTROLTYPES"         , HB_FUNCNAME( CONTROLTYPES          ) );
    hb_clsAdd( uiClass, "EXPANDINGDIRECTIONS"  , HB_FUNCNAME( EXPANDINGDIRECTIONS   ) );
    hb_clsAdd( uiClass, "GEOMETRY"             , HB_FUNCNAME( GEOMETRY              ) );
    hb_clsAdd( uiClass, "HASHEIGHTFORWIDTH"    , HB_FUNCNAME( HASHEIGHTFORWIDTH     ) );
    hb_clsAdd( uiClass, "HEIGHTFORWIDTH"       , HB_FUNCNAME( HEIGHTFORWIDTH        ) );
    hb_clsAdd( uiClass, "INVALIDATE"           , HB_FUNCNAME( INVALIDATE            ) );
    hb_clsAdd( uiClass, "ISEMPTY"              , HB_FUNCNAME( ISEMPTY               ) );
    hb_clsAdd( uiClass, "LAYOUT"               , HB_FUNCNAME( LAYOUT                ) );
    hb_clsAdd( uiClass, "MAXIMUMSIZE"          , HB_FUNCNAME( MAXIMUMSIZE           ) );
    hb_clsAdd( uiClass, "MINIMUMHEIGHTFORWIDTH", HB_FUNCNAME( MINIMUMHEIGHTFORWIDTH ) );
    hb_clsAdd( uiClass, "MINIMUMSIZE"          , HB_FUNCNAME( MINIMUMSIZE           ) );
    hb_clsAdd( uiClass, "SETALIGNMENT"         , HB_FUNCNAME( SETALIGNMENT          ) );
    hb_clsAdd( uiClass, "SETGEOMETRY"          , HB_FUNCNAME( SETGEOMETRY           ) );
    hb_clsAdd( uiClass, "SIZEHINT"             , HB_FUNCNAME( SIZEHINT              ) );
    hb_clsAdd( uiClass, "SPACERITEM"           , HB_FUNCNAME( SPACERITEM            ) );
    hb_clsAdd( uiClass, "WIDGET"               , HB_FUNCNAME( WIDGET                ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
