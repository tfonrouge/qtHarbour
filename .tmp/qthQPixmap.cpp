/*
 * $Id: qthQPixmap.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QPixmap>

#define HBitmapFormat                           QPixmap::HBitmapFormat
#define ShareMode                               QPixmap::ShareMode
/*
 * Wip: Dump Section INIT
 */

#include <QBitmap>
/*
 * Wip: Dump Section END
 */


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QPIXMAP );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QPAINTDEVICE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QIMAGE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QPIXMAP )
{ "QPIXMAP", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QPIXMAP )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QPAINTDEVICE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QPAINTDEVICE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QIMAGE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QIMAGE )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QPIXMAP )

HB_FUNC( QPIXMAP )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QPixmap ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QPixmap, new QPixmap() );
        return;
    }
    /*
     * _public_functions_ : QPixmap ( int width, int height )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
    {
        qth_itemPushReturn( QtH::QPixmap, new QPixmap( hb_parni( 1 ), hb_parni( 2 ) ) );
        return;
    }
    /*
     * _public_functions_ : QPixmap ( const QString & fileName, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
     */
    if( ( hb_pcount() <= 3 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_IsIntType( 3, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
    {
        QString fileName =  qth_par_QString( 1 );
        const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
        qth_itemPushReturn( QtH::QPixmap, new QPixmap( fileName, format, (Qt::ImageConversionFlags) qth_par_IntType( 3, Qt::AutoColor ) ) );
        return;
    }
    /*
     * _public_functions_ : QPixmap ( const char * const[] xpm )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        const char *  xpm = hb_parc( 1 );
        qth_itemPushReturn( QtH::QPixmap, new QPixmap( xpm ) );
        return;
    }
    /*
     * _public_functions_ : QPixmap ( const QPixmap & pixmap )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPixmap" ) )
    {
        const QPixmap & pixmap = * static_cast<QPixmap *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QPixmap, new QPixmap( pixmap ) );
        return;
    }
    /*
     * _public_functions_ : QPixmap ( const QSize & size )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
    {
        const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QPixmap, new QPixmap( size ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CACHEKEY )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : qint64  cacheKey () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnll( p_pixmap->cacheKey() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONVERTFROMIMAGE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if QT_VERSION >= 0x040700
        /*
         * _public_functions_ : bool  convertFromImage ( const QImage & image, Qt::ImageConversionFlags flags = Qt::AutoColor )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QImage" ) && qth_IsIntType( 2, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            const QImage & image = * static_cast<QImage *>( qth_par_QthObject( 1 ) );
            hb_retl( p_pixmap->convertFromImage( image, (Qt::ImageConversionFlags) qth_par_IntType( 2, Qt::AutoColor ) ) == true );
            return;
        }
#endif  /* QT_VERSION >= 0x040700 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COPY )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QPixmap  copy ( const QRect & rectangle = QRect() ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QRect", QTH_DEFAULT ) )
        {
            const QRect& rectangle = hb_param( 1, HB_IT_OBJECT ) ? qth_parConstRef<QRect>( 1 ) : QRect();
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->copy( rectangle ) ), "QPixmap" );
            return;
        }
        /*
         * _public_functions_ : QPixmap  copy ( int x, int y, int width, int height ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->copy( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) ), "QPixmap" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATEHEURISTICMASK )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QBitmap  createHeuristicMask ( bool clipTight = true ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            // bool clipTight = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : true;
            // ! Don't know how to return type 'QBitmap'
            // qth_itemPushNewReturn( QtH::QBitmap, new QBitmap( p_pixmap->createHeuristicMask( clipTight ) ), "QBitmap" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::createHeuristicMask", "Don't know how to return type 'QBitmap'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATEMASKFROMCOLOR )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QBitmap  createMaskFromColor ( const QColor & maskColor, Qt::MaskMode mode ) const
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QColor" ) && qth_IsIntType( 2, "Qt::MaskMode" ) )
        {
            // const QColor & maskColor = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
            // ! Don't know how to return type 'QBitmap'
            // qth_itemPushNewReturn( QtH::QBitmap, new QBitmap( p_pixmap->createMaskFromColor( maskColor, (Qt::MaskMode)  qth_par_IntType( 2 ) ) ), "QBitmap" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::createMaskFromColor", "Don't know how to return type 'QBitmap'" ) ;
            return;
        }
        /*
         * _public_functions_ : QBitmap  createMaskFromColor ( const QColor & maskColor ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QColor" ) )
        {
            // const QColor & maskColor = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
            // ! Don't know how to return type 'QBitmap'
            // qth_itemPushNewReturn( QtH::QBitmap, new QBitmap( p_pixmap->createMaskFromColor( maskColor ) ), "QBitmap" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::createMaskFromColor", "Don't know how to return type 'QBitmap'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DEPTH )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : int  depth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_pixmap->depth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DETACH )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : void  detach ()
         */
        if( hb_pcount() == 0 )
        {
            p_pixmap->detach();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FILL )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : void  fill ( const QColor & color = Qt::white )
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QColor", QTH_DEFAULT ) )
        {
            const QColor& color = hb_param( 1, HB_IT_OBJECT ) ? qth_parConstRef<QColor>( 1 ) : Qt::white;
            p_pixmap->fill( color );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  fill ( const QWidget * widget, const QPoint & offset )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QPoint" ) )
        {
            const QWidget  * widget = static_cast<QWidget *>( qth_par_QthObject( 1 ) );
            const QPoint & offset = * static_cast<QPoint *>( qth_par_QthObject( 2 ) );
            p_pixmap->fill( widget, offset );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  fill ( const QWidget * widget, int x, int y )
         */
        if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QWidget" ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
        {
            const QWidget  * widget = static_cast<QWidget *>( qth_par_QthObject( 1 ) );
            p_pixmap->fill( widget, hb_parni( 2 ), hb_parni( 3 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HANDLE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if X11
        /*
         * _public_functions_ : Qt::HANDLE  handle () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'Qt::HANDLE'
            // qth_itemPushNewReturn( QtH::Qt::HANDLE, new Qt::HANDLE( p_pixmap->handle() ), "Qt::HANDLE" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::handle", "Don't know how to return type 'Qt::HANDLE'" ) ;
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASALPHA )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  hasAlpha () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_pixmap->hasAlpha() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASALPHACHANNEL )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  hasAlphaChannel () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_pixmap->hasAlphaChannel() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHT )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : int  height () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_pixmap->height() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_pixmap->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISQBITMAP )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  isQBitmap () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_pixmap->isQBitmap() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOAD )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  load ( const QString & fileName, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
         */
        if( ( hb_pcount() <= 3 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_IsIntType( 3, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            QString fileName =  qth_par_QString( 1 );
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            hb_retl( p_pixmap->load( fileName, format, (Qt::ImageConversionFlags) qth_par_IntType( 3, Qt::AutoColor ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOADFROMDATA )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  loadFromData ( const uchar * data, uint len, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_STRING, QTH_DEFAULT ) && qth_IsIntType( 4, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            const uchar * data = (uchar*)  hb_parc( 1 );
            const char* format = hb_param( 3, HB_IT_STRING ) ? hb_parc( 3 ) : 0;
            hb_retl( p_pixmap->loadFromData( data, (uint)  hb_parni( 2 ), format, (Qt::ImageConversionFlags) qth_par_IntType( 4, Qt::AutoColor ) ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  loadFromData ( const QByteArray & data, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
         */
        if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QByteArray" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_IsIntType( 3, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            const QByteArray & data = * static_cast<QByteArray *>( qth_par_QthObject( 1 ) );
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            hb_retl( p_pixmap->loadFromData( data, format, (Qt::ImageConversionFlags) qth_par_IntType( 3, Qt::AutoColor ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MASK )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QBitmap  mask () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QBitmap'
            // qth_itemPushNewReturn( QtH::QBitmap, new QBitmap( p_pixmap->mask() ), "QBitmap" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::mask", "Don't know how to return type 'QBitmap'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RECT )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QRect  rect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_pixmap->rect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SAVE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : bool  save ( const QString & fileName, const char * format = 0, int quality = -1 ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            QString fileName =  qth_par_QString( 1 );
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            int quality = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : -1;
            hb_retl( p_pixmap->save( fileName, format, quality ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  save ( QIODevice * device, const char * format = 0, int quality = -1 ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QIODevice" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            int quality = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : -1;
            hb_retl( p_pixmap->save( static_cast<QIODevice *>( qth_par_QthObject( 1 ) ), format, quality ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCALED )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QPixmap  scaled ( const QSize & size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QSize" ) && qth_IsIntType( 2, "Qt::AspectRatioMode", QTH_DEFAULT ) && qth_IsIntType( 3, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->scaled( size, (Qt::AspectRatioMode) qth_par_IntType( 2, Qt::IgnoreAspectRatio ), (Qt::TransformationMode) qth_par_IntType( 3, Qt::FastTransformation ) ) ), "QPixmap" );
            return;
        }
        /*
         * _public_functions_ : QPixmap  scaled ( int width, int height, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsIntType( 3, "Qt::AspectRatioMode", QTH_DEFAULT ) && qth_IsIntType( 4, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->scaled( hb_parni( 1 ), hb_parni( 2 ), (Qt::AspectRatioMode) qth_par_IntType( 3, Qt::IgnoreAspectRatio ), (Qt::TransformationMode) qth_par_IntType( 4, Qt::FastTransformation ) ) ), "QPixmap" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCALEDTOHEIGHT )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QPixmap  scaledToHeight ( int height, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->scaledToHeight( hb_parni( 1 ), (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QPixmap" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCALEDTOWIDTH )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QPixmap  scaledToWidth ( int width, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->scaledToWidth( hb_parni( 1 ), (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QPixmap" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLL )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : void  scroll ( int dx, int dy, int x, int y, int width, int height, QRegion * exposed = 0 )
         */
        if( ( hb_pcount() <= 7 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) && qth_Is( 5, HB_IT_INTEGER ) && qth_Is( 6, HB_IT_INTEGER ) && qth_Is( 7, "QRegion", QTH_DEFAULT ) )
        {
            QRegion* exposed = hb_param( 7, HB_IT_OBJECT ) ? qth_parPtr<QRegion>( 7 ) : ( QRegion* ) 0;
            p_pixmap->scroll( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), exposed );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  scroll ( int dx, int dy, const QRect & rect, QRegion * exposed = 0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsObject( 3, "QRect" ) && qth_Is( 4, "QRegion", QTH_DEFAULT ) )
        {
            const QRect & rect = * static_cast<QRect *>( qth_par_QthObject( 3 ) );
            QRegion* exposed = hb_param( 4, HB_IT_OBJECT ) ? qth_parPtr<QRegion>( 4 ) : ( QRegion* ) 0;
            p_pixmap->scroll( hb_parni( 1 ), hb_parni( 2 ), rect, exposed );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMASK )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : void  setMask ( const QBitmap & mask )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QBitmap" ) )
        {
            const QBitmap & mask = * static_cast<QBitmap *>( qth_par_QthObject( 1 ) );
            p_pixmap->setMask( mask );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QSize  size () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_pixmap->size() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOIMAGE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QImage  toImage () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_pixmap->toImage() ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOMACCGIMAGEREF )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if Mac
        /*
         * _public_functions_ : CGImageRef  toMacCGImageRef () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'CGImageRef'
            // qth_itemPushNewReturn( QtH::CGImageRef, new CGImageRef( p_pixmap->toMacCGImageRef() ), "CGImageRef" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::toMacCGImageRef", "Don't know how to return type 'CGImageRef'" ) ;
            return;
        }
#endif  /* Mac */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSYMBIANCFBSBITMAP )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if Symbian
        /*
         * _public_functions_ : CFbsBitmap *  toSymbianCFbsBitmap () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'CFbsBitmap'
            // qth_itemReturn( (PCPP_OBJECT) p_pixmap->toSymbianCFbsBitmap(), "CFbsBitmap" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::toSymbianCFbsBitmap", "Don't know how to return type 'CFbsBitmap'" ) ;
            return;
        }
#endif  /* Symbian */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSYMBIANRSGIMAGE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if Symbian
        /*
         * _public_functions_ : RSgImage *  toSymbianRSgImage () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'RSgImage'
            // qth_itemReturn( (PCPP_OBJECT) p_pixmap->toSymbianRSgImage(), "RSgImage" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::toSymbianRSgImage", "Don't know how to return type 'RSgImage'" ) ;
            return;
        }
#endif  /* Symbian */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOWINHBITMAP )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if __WIN32__no
        /*
         * _public_functions_ : HBITMAP  toWinHBITMAP ( HBitmapFormat format = NoAlpha ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "HBitmapFormat", QTH_DEFAULT ) )
        {
            // ! Don't know how to return type 'HBITMAP'
            // qth_itemPushNewReturn( QtH::HBITMAP, new HBITMAP( p_pixmap->toWinHBITMAP( (HBitmapFormat) qth_par_IntType( 1, NoAlpha ) ) ), "HBITMAP" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::toWinHBITMAP", "Don't know how to return type 'HBITMAP'" ) ;
            return;
        }
#endif  /* __WIN32__no */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOWINHICON )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if __WIN32__
        /*
         * _public_functions_ : HICON  toWinHICON () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'HICON'
            // qth_itemPushNewReturn( QtH::HICON, new HICON( p_pixmap->toWinHICON() ), "HICON" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::toWinHICON", "Don't know how to return type 'HICON'" ) ;
            return;
        }
#endif  /* __WIN32__ */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TRANSFORMED )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : QPixmap  transformed ( const QTransform & transform, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QTransform" ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            const QTransform & transform = * static_cast<QTransform *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->transformed( transform, (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QPixmap" );
            return;
        }
        /*
         * _public_functions_ : QPixmap  transformed ( const QMatrix & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QMatrix" ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            const QMatrix & matrix = * static_cast<QMatrix *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_pixmap->transformed( matrix, (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QPixmap" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDTH )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
        /*
         * _public_functions_ : int  width () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_pixmap->width() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X11INFO )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if X11
        /*
         * _public_functions_ : const QX11Info &  x11Info () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QX11Info'
            // qth_itemReturn( (PCPP_OBJECT)  & p_pixmap->x11Info(), "QX11Info" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::x11Info", "Don't know how to return type 'QX11Info'" ) ;
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X11PICTUREHANDLE )
{
    QPixmap* p_pixmap = static_cast<QPixmap *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_pixmap )
    {
#if X11
        /*
         * _public_functions_ : Qt::HANDLE  x11PictureHandle () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'Qt::HANDLE'
            // qth_itemPushNewReturn( QtH::Qt::HANDLE, new Qt::HANDLE( p_pixmap->x11PictureHandle() ), "Qt::HANDLE" );
            qth_errRT_UNKNOWNOBJ( "QPixmap::x11PictureHandle", "Don't know how to return type 'Qt::HANDLE'" ) ;
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_DEFAULTDEPTH )
{
    /*
     * _static_public_members_ : int  defaultDepth ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QPixmap::defaultDepth() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMIMAGE )
{
    /*
     * _static_public_members_ : QPixmap  fromImage ( const QImage & image, Qt::ImageConversionFlags flags = Qt::AutoColor )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QImage" ) && qth_IsIntType( 2, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
    {
        const QImage & image = * static_cast<QImage *>( qth_par_QthObject( 1 ) );
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromImage( image, (Qt::ImageConversionFlags) qth_par_IntType( 2, Qt::AutoColor ) ) ), "QPixmap" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMIMAGEREADER )
{
#if QT_VERSION >= 0x040700
    /*
     * _static_public_members_ : QPixmap  fromImageReader ( QImageReader * imageReader, Qt::ImageConversionFlags flags = Qt::AutoColor )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QImageReader" ) && qth_IsIntType( 2, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromImageReader( static_cast<QImageReader *>( qth_par_QthObject( 1 ) ), (Qt::ImageConversionFlags) qth_par_IntType( 2, Qt::AutoColor ) ) ), "QPixmap" );
        return;
    }
#endif  /* QT_VERSION >= 0x040700 */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMMACCGIMAGEREF )
{
#if Mac
    /*
     * _static_public_members_ : QPixmap  fromMacCGImageRef ( CGImageRef image )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "CGImageRef" ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromMacCGImageRef( * static_cast<CGImageRef *>( qth_par_QthObject( 1 ) ) ) ), "QPixmap" );
        return;
    }
#endif  /* Mac */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMSYMBIANCFBSBITMAP )
{
#if Symbian
    /*
     * _static_public_members_ : QPixmap  fromSymbianCFbsBitmap ( CFbsBitmap * bitmap )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "CFbsBitmap" ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromSymbianCFbsBitmap( static_cast<CFbsBitmap *>( qth_par_QthObject( 1 ) ) ) ), "QPixmap" );
        return;
    }
#endif  /* Symbian */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMSYMBIANRSGIMAGE )
{
#if Symbian
    /*
     * _static_public_members_ : QPixmap  fromSymbianRSgImage ( RSgImage * sgImage )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "RSgImage" ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromSymbianRSgImage( static_cast<RSgImage *>( qth_par_QthObject( 1 ) ) ) ), "QPixmap" );
        return;
    }
#endif  /* Symbian */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMWINHBITMAP )
{
#if __WIN32__no
    /*
     * _static_public_members_ : QPixmap  fromWinHBITMAP ( HBITMAP bitmap, HBitmapFormat format = NoAlpha )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "HBITMAP" ) && qth_IsIntType( 2, "HBitmapFormat", QTH_DEFAULT ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromWinHBITMAP( * static_cast<HBITMAP *>( qth_par_QthObject( 1 ) ), (HBitmapFormat) qth_par_IntType( 2, NoAlpha ) ) ), "QPixmap" );
        return;
    }
#endif  /* __WIN32__no */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMWINHICON )
{
#if __WIN32__no
    /*
     * _static_public_members_ : QPixmap  fromWinHICON ( HICON icon )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "HICON" ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromWinHICON( * static_cast<HICON *>( qth_par_QthObject( 1 ) ) ) ), "QPixmap" );
        return;
    }
#endif  /* __WIN32__no */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_FROMX11PIXMAP )
{
#if X11
    /*
     * _static_public_members_ : QPixmap  fromX11Pixmap ( Qt::HANDLE pixmap, ShareMode mode = ImplicitlyShared )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "Qt::HANDLE" ) && qth_IsIntType( 2, "ShareMode", QTH_DEFAULT ) )
    {
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::fromX11Pixmap( * static_cast<Qt::HANDLE *>( qth_par_QthObject( 1 ) ), (ShareMode) qth_par_IntType( 2, ImplicitlyShared ) ) ), "QPixmap" );
        return;
    }
#endif  /* X11 */
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_GRABWIDGET )
{
    /*
     * _static_public_members_ : QPixmap  grabWidget ( QWidget * widget, const QRect & rectangle )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QRect" ) )
    {
        const QRect & rectangle = * static_cast<QRect *>( qth_par_QthObject( 2 ) );
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::grabWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), rectangle ) ), "QPixmap" );
        return;
    }
    /*
     * _static_public_members_ : QPixmap  grabWidget ( QWidget * widget, int x = 0, int y = 0, int width = -1, int height = -1 )
     */
    if( ( hb_pcount() <= 5 ) && qth_IsObject( 1, "QWidget" ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 5, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int x = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
        int y = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : 0;
        int width = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : -1;
        int height = hb_param( 5, HB_IT_INTEGER ) ? hb_parni( 5 ) : -1;
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::grabWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), x, y, width, height ) ), "QPixmap" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_GRABWINDOW )
{
    /*
     * _static_public_members_ : QPixmap  grabWindow ( WId window, int x = 0, int y = 0, int width = -1, int height = -1 )
     */
    if( ( hb_pcount() <= 5 ) && qth_IsObject( 1, "WId" ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 5, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int x = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
        int y = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : 0;
        int width = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : -1;
        int height = hb_param( 5, HB_IT_INTEGER ) ? hb_parni( 5 ) : -1;
        qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( QPixmap::grabWindow( * static_cast<WId *>( qth_par_QthObject( 1 ) ), x, y, width, height ) ), "QPixmap" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QPIXMAP_TRUEMATRIX )
{
    /*
     * _static_public_members_ : QTransform  trueMatrix ( const QTransform & matrix, int width, int height )
     */
    if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QTransform" ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
    {
        // const QTransform & matrix = * static_cast<QTransform *>( qth_par_QthObject( 1 ) );
        // ! Don't know how to return type 'QTransform'
        // qth_itemPushNewReturn( QtH::QTransform, new QTransform( QPixmap::trueMatrix( matrix, hb_parni( 2 ), hb_parni( 3 ) ) ), "QTransform" );
        qth_errRT_UNKNOWNOBJ( "QPixmap::trueMatrix", "Don't know how to return type 'QTransform'" ) ;
        return;
    }
    /*
     * _static_public_members_ : QMatrix  trueMatrix ( const QMatrix & m, int w, int h )
     */
    if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QMatrix" ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
    {
        // const QMatrix & m = * static_cast<QMatrix *>( qth_par_QthObject( 1 ) );
        // ! Don't know how to return type 'QMatrix'
        // qth_itemPushNewReturn( QtH::QMatrix, new QMatrix( QPixmap::trueMatrix( m, hb_parni( 2 ), hb_parni( 3 ) ) ), "QMatrix" );
        qth_errRT_UNKNOWNOBJ( "QPixmap::trueMatrix", "Don't know how to return type 'QMatrix'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                  , HB_FUNCNAME( NEW                           ) );
    hb_clsAdd( uiClass, "CACHEKEY"             , HB_FUNCNAME( CACHEKEY                      ) );
    hb_clsAdd( uiClass, "CONVERTFROMIMAGE"     , HB_FUNCNAME( CONVERTFROMIMAGE              ) );
    hb_clsAdd( uiClass, "COPY"                 , HB_FUNCNAME( COPY                          ) );
    hb_clsAdd( uiClass, "CREATEHEURISTICMASK"  , HB_FUNCNAME( CREATEHEURISTICMASK           ) );
    hb_clsAdd( uiClass, "CREATEMASKFROMCOLOR"  , HB_FUNCNAME( CREATEMASKFROMCOLOR           ) );
    hb_clsAdd( uiClass, "DEPTH"                , HB_FUNCNAME( DEPTH                         ) );
    hb_clsAdd( uiClass, "DETACH"               , HB_FUNCNAME( DETACH                        ) );
    hb_clsAdd( uiClass, "FILL"                 , HB_FUNCNAME( FILL                          ) );
    hb_clsAdd( uiClass, "HANDLE"               , HB_FUNCNAME( HANDLE                        ) );
    hb_clsAdd( uiClass, "HASALPHA"             , HB_FUNCNAME( HASALPHA                      ) );
    hb_clsAdd( uiClass, "HASALPHACHANNEL"      , HB_FUNCNAME( HASALPHACHANNEL               ) );
    hb_clsAdd( uiClass, "HEIGHT"               , HB_FUNCNAME( HEIGHT                        ) );
    hb_clsAdd( uiClass, "ISNULL"               , HB_FUNCNAME( ISNULL                        ) );
    hb_clsAdd( uiClass, "ISQBITMAP"            , HB_FUNCNAME( ISQBITMAP                     ) );
    hb_clsAdd( uiClass, "LOAD"                 , HB_FUNCNAME( LOAD                          ) );
    hb_clsAdd( uiClass, "LOADFROMDATA"         , HB_FUNCNAME( LOADFROMDATA                  ) );
    hb_clsAdd( uiClass, "MASK"                 , HB_FUNCNAME( MASK                          ) );
    hb_clsAdd( uiClass, "RECT"                 , HB_FUNCNAME( RECT                          ) );
    hb_clsAdd( uiClass, "SAVE"                 , HB_FUNCNAME( SAVE                          ) );
    hb_clsAdd( uiClass, "SCALED"               , HB_FUNCNAME( SCALED                        ) );
    hb_clsAdd( uiClass, "SCALEDTOHEIGHT"       , HB_FUNCNAME( SCALEDTOHEIGHT                ) );
    hb_clsAdd( uiClass, "SCALEDTOWIDTH"        , HB_FUNCNAME( SCALEDTOWIDTH                 ) );
    hb_clsAdd( uiClass, "SCROLL"               , HB_FUNCNAME( SCROLL                        ) );
    hb_clsAdd( uiClass, "SETMASK"              , HB_FUNCNAME( SETMASK                       ) );
    hb_clsAdd( uiClass, "SIZE"                 , HB_FUNCNAME( SIZE                          ) );
    hb_clsAdd( uiClass, "TOIMAGE"              , HB_FUNCNAME( TOIMAGE                       ) );
    hb_clsAdd( uiClass, "TOMACCGIMAGEREF"      , HB_FUNCNAME( TOMACCGIMAGEREF               ) );
    hb_clsAdd( uiClass, "TOSYMBIANCFBSBITMAP"  , HB_FUNCNAME( TOSYMBIANCFBSBITMAP           ) );
    hb_clsAdd( uiClass, "TOSYMBIANRSGIMAGE"    , HB_FUNCNAME( TOSYMBIANRSGIMAGE             ) );
    hb_clsAdd( uiClass, "TOWINHBITMAP"         , HB_FUNCNAME( TOWINHBITMAP                  ) );
    hb_clsAdd( uiClass, "TOWINHICON"           , HB_FUNCNAME( TOWINHICON                    ) );
    hb_clsAdd( uiClass, "TRANSFORMED"          , HB_FUNCNAME( TRANSFORMED                   ) );
    hb_clsAdd( uiClass, "WIDTH"                , HB_FUNCNAME( WIDTH                         ) );
    hb_clsAdd( uiClass, "X11INFO"              , HB_FUNCNAME( X11INFO                       ) );
    hb_clsAdd( uiClass, "X11PICTUREHANDLE"     , HB_FUNCNAME( X11PICTUREHANDLE              ) );
    hb_clsAdd( uiClass, "DEFAULTDEPTH"         , HB_FUNCNAME( QPIXMAP_DEFAULTDEPTH          ) );
    hb_clsAdd( uiClass, "FROMIMAGE"            , HB_FUNCNAME( QPIXMAP_FROMIMAGE             ) );
    hb_clsAdd( uiClass, "FROMIMAGEREADER"      , HB_FUNCNAME( QPIXMAP_FROMIMAGEREADER       ) );
    hb_clsAdd( uiClass, "FROMMACCGIMAGEREF"    , HB_FUNCNAME( QPIXMAP_FROMMACCGIMAGEREF     ) );
    hb_clsAdd( uiClass, "FROMSYMBIANCFBSBITMAP", HB_FUNCNAME( QPIXMAP_FROMSYMBIANCFBSBITMAP ) );
    hb_clsAdd( uiClass, "FROMSYMBIANRSGIMAGE"  , HB_FUNCNAME( QPIXMAP_FROMSYMBIANRSGIMAGE   ) );
    hb_clsAdd( uiClass, "FROMWINHBITMAP"       , HB_FUNCNAME( QPIXMAP_FROMWINHBITMAP        ) );
    hb_clsAdd( uiClass, "FROMWINHICON"         , HB_FUNCNAME( QPIXMAP_FROMWINHICON          ) );
    hb_clsAdd( uiClass, "FROMX11PIXMAP"        , HB_FUNCNAME( QPIXMAP_FROMX11PIXMAP         ) );
    hb_clsAdd( uiClass, "GRABWIDGET"           , HB_FUNCNAME( QPIXMAP_GRABWIDGET            ) );
    hb_clsAdd( uiClass, "GRABWINDOW"           , HB_FUNCNAME( QPIXMAP_GRABWINDOW            ) );
    hb_clsAdd( uiClass, "TRUEMATRIX"           , HB_FUNCNAME( QPIXMAP_TRUEMATRIX            ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
