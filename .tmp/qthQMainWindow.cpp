/*
 * $Id: qthQMainWindow.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QMainWindow>

#define DockOption                              QMainWindow::DockOption
#define DockOptions                             QMainWindow::DockOptions
/*
 * Wip: Dump Section INIT
 */

#include <QPushButton>
/*
 * Wip: Dump Section END
 */


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QMAINWINDOW );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSTATUSBAR ); // REQUEST'ed Class
HB_FUNC_EXTERN( QMENUBAR ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QMENU ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QMAINWINDOW )
{ "QMAINWINDOW", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QMAINWINDOW )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSTATUSBAR", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSTATUSBAR )}, NULL }, // REQUEST'ed Class
{ "QMENUBAR", {HB_FS_PUBLIC}, {HB_FUNCNAME( QMENUBAR )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QMENU", {HB_FS_PUBLIC}, {HB_FUNCNAME( QMENU )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QMAINWINDOW )

HB_FUNC( QMAINWINDOW )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QMainWindow ( QWidget * parent = 0, Qt::WindowFlags flags = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) && qth_IsIntType( 2, "Qt::WindowFlags", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QMainWindow, new QMainWindow( parent, (Qt::WindowFlags) qth_par_IntType( 2, 0 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDDOCKWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  addDockWidget ( Qt::DockWidgetArea area, QDockWidget * dockwidget )
         */
        if( ( hb_pcount() == 2 ) && qth_IsIntType( 1, "Qt::DockWidgetArea" ) && qth_IsObject( 2, "QDockWidget" ) )
        {
            p_mainWindow->addDockWidget( (Qt::DockWidgetArea)  qth_par_IntType( 1 ), static_cast<QDockWidget *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  addDockWidget ( Qt::DockWidgetArea area, QDockWidget * dockwidget, Qt::Orientation orientation )
         */
        if( ( hb_pcount() == 3 ) && qth_IsIntType( 1, "Qt::DockWidgetArea" ) && qth_IsObject( 2, "QDockWidget" ) && qth_IsIntType( 3, "Qt::Orientation" ) )
        {
            p_mainWindow->addDockWidget( (Qt::DockWidgetArea)  qth_par_IntType( 1 ), static_cast<QDockWidget *>( qth_par_QthObject( 2 ) ), (Qt::Orientation)  qth_par_IntType( 3 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDTOOLBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  addToolBar ( Qt::ToolBarArea area, QToolBar * toolbar )
         */
        if( ( hb_pcount() == 2 ) && qth_IsIntType( 1, "Qt::ToolBarArea" ) && qth_IsObject( 2, "QToolBar" ) )
        {
            p_mainWindow->addToolBar( (Qt::ToolBarArea)  qth_par_IntType( 1 ), static_cast<QToolBar *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  addToolBar ( QToolBar * toolbar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QToolBar" ) )
        {
            p_mainWindow->addToolBar( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : QToolBar *  addToolBar ( const QString & title )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            // QString title =  qth_par_QString( 1 );
            // ! Don't know how to return type 'QToolBar'
            // qth_itemReturn( (PCPP_OBJECT) p_mainWindow->addToolBar( title ), "QToolBar" );
            qth_errRT_UNKNOWNOBJ( "QMainWindow::addToolBar", "Don't know how to return type 'QToolBar'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDTOOLBARBREAK )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  addToolBarBreak ( Qt::ToolBarArea area = Qt::TopToolBarArea )
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::ToolBarArea", QTH_DEFAULT ) )
        {
            p_mainWindow->addToolBarBreak( (Qt::ToolBarArea) qth_par_IntType( 1, Qt::TopToolBarArea ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CENTRALWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QWidget *  centralWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_mainWindow->centralWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CORNER )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : Qt::DockWidgetArea  corner ( Qt::Corner corner ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Corner" ) )
        {
            hb_retni( p_mainWindow->corner( (Qt::Corner)  qth_par_IntType( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATEPOPUPMENU )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : virtual QMenu *  createPopupMenu ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_mainWindow->createPopupMenu(), "QMenu" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOCKOPTIONS )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : DockOptions  dockOptions () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_mainWindow->dockOptions() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOCKWIDGETAREA )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : Qt::DockWidgetArea  dockWidgetArea ( QDockWidget * dockwidget ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDockWidget" ) )
        {
            hb_retni( p_mainWindow->dockWidgetArea( static_cast<QDockWidget *>( qth_par_QthObject( 1 ) ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOCUMENTMODE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  documentMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_mainWindow->documentMode() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICONSIZE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QSize  iconSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_mainWindow->iconSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTTOOLBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  insertToolBar ( QToolBar * before, QToolBar * toolbar )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QToolBar" ) && qth_IsObject( 2, "QToolBar" ) )
        {
            p_mainWindow->insertToolBar( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ), static_cast<QToolBar *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTTOOLBARBREAK )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  insertToolBarBreak ( QToolBar * before )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QToolBar" ) )
        {
            p_mainWindow->insertToolBarBreak( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISANIMATED )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  isAnimated () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_mainWindow->isAnimated() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISDOCKNESTINGENABLED )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  isDockNestingEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_mainWindow->isDockNestingEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MENUBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QMenuBar *  menuBar () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_mainWindow->menuBar(), "QMenuBar" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MENUWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QWidget *  menuWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_mainWindow->menuWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVEDOCKWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  removeDockWidget ( QDockWidget * dockwidget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDockWidget" ) )
        {
            p_mainWindow->removeDockWidget( static_cast<QDockWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVETOOLBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  removeToolBar ( QToolBar * toolbar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QToolBar" ) )
        {
            p_mainWindow->removeToolBar( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVETOOLBARBREAK )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  removeToolBarBreak ( QToolBar * before )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QToolBar" ) )
        {
            p_mainWindow->removeToolBarBreak( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESTOREDOCKWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  restoreDockWidget ( QDockWidget * dockwidget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDockWidget" ) )
        {
            hb_retl( p_mainWindow->restoreDockWidget( static_cast<QDockWidget *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESTORESTATE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  restoreState ( const QByteArray & state, int version = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QByteArray" ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            const QByteArray & state = * static_cast<QByteArray *>( qth_par_QthObject( 1 ) );
            int version = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
            hb_retl( p_mainWindow->restoreState( state, version ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SAVESTATE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QByteArray  saveState ( int version = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            // int version = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 0;
            // ! Don't know how to return type 'QByteArray'
            // qth_itemPushNewReturn( QtH::QByteArray, new QByteArray( p_mainWindow->saveState( version ) ), "QByteArray" );
            qth_errRT_UNKNOWNOBJ( "QMainWindow::saveState", "Don't know how to return type 'QByteArray'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCENTRALWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setCentralWidget ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_mainWindow->setCentralWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCORNER )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setCorner ( Qt::Corner corner, Qt::DockWidgetArea area )
         */
        if( ( hb_pcount() == 2 ) && qth_IsIntType( 1, "Qt::Corner" ) && qth_IsIntType( 2, "Qt::DockWidgetArea" ) )
        {
            p_mainWindow->setCorner( (Qt::Corner)  qth_par_IntType( 1 ), (Qt::DockWidgetArea)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOCKOPTIONS )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setDockOptions ( DockOptions options )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "DockOptions" ) )
        {
            p_mainWindow->setDockOptions( (DockOptions)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOCUMENTMODE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setDocumentMode ( bool enabled )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_mainWindow->setDocumentMode( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICONSIZE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setIconSize ( const QSize & iconSize )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & iconSize = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_mainWindow->setIconSize( iconSize );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMENUBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setMenuBar ( QMenuBar * menuBar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMenuBar" ) )
        {
            p_mainWindow->setMenuBar( static_cast<QMenuBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMENUWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setMenuWidget ( QWidget * menuBar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_mainWindow->setMenuWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTATUSBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setStatusBar ( QStatusBar * statusbar /Transfer/ )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QStatusBar" ) )
        {
            p_mainWindow->setStatusBar( static_cast<QStatusBar *>( qth_par_QthObject( 1, QTHI_TRANSFER  ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABPOSITION )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setTabPosition ( Qt::DockWidgetAreas areas, QTabWidget::TabPosition tabPosition )
         */
        if( ( hb_pcount() == 2 ) && qth_IsIntType( 1, "Qt::DockWidgetAreas" ) && qth_IsIntType( 2, "QTabWidget::TabPosition" ) )
        {
            p_mainWindow->setTabPosition( (Qt::DockWidgetAreas)  qth_par_IntType( 1 ), (QTabWidget::TabPosition)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABSHAPE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setTabShape ( QTabWidget::TabShape tabShape )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QTabWidget::TabShape" ) )
        {
            p_mainWindow->setTabShape( (QTabWidget::TabShape)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOOLBUTTONSTYLE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setToolButtonStyle ( Qt::ToolButtonStyle toolButtonStyle )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::ToolButtonStyle" ) )
        {
            p_mainWindow->setToolButtonStyle( (Qt::ToolButtonStyle)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETUNIFIEDTITLEANDTOOLBARONMAC )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  setUnifiedTitleAndToolBarOnMac ( bool set )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_mainWindow->setUnifiedTitleAndToolBarOnMac( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPLITDOCKWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  splitDockWidget ( QDockWidget * first, QDockWidget * second, Qt::Orientation orientation )
         */
        if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QDockWidget" ) && qth_IsObject( 2, "QDockWidget" ) && qth_IsIntType( 3, "Qt::Orientation" ) )
        {
            p_mainWindow->splitDockWidget( static_cast<QDockWidget *>( qth_par_QthObject( 1 ) ), static_cast<QDockWidget *>( qth_par_QthObject( 2 ) ), (Qt::Orientation)  qth_par_IntType( 3 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STATUSBAR )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QStatusBar *  statusBar () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_mainWindow->statusBar(), "QStatusBar" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABPOSITION )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QTabWidget::TabPosition  tabPosition ( Qt::DockWidgetArea area ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::DockWidgetArea" ) )
        {
            hb_retni( p_mainWindow->tabPosition( (Qt::DockWidgetArea)  qth_par_IntType( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABSHAPE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QTabWidget::TabShape  tabShape () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_mainWindow->tabShape() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABIFIEDDOCKWIDGETS )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : QList<QDockWidget *>  tabifiedDockWidgets ( QDockWidget * dockwidget ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDockWidget" ) )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QDockWidget *>( p_mainWindow->tabifiedDockWidgets( static_cast<QDockWidget *>( qth_par_QthObject( 1 ) ) ) ), "QList<QDockWidget *>" );
            qth_errRT_UNKNOWNOBJ( "QMainWindow::tabifiedDockWidgets", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABIFYDOCKWIDGET )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : void  tabifyDockWidget ( QDockWidget * first, QDockWidget * second )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QDockWidget" ) && qth_IsObject( 2, "QDockWidget" ) )
        {
            p_mainWindow->tabifyDockWidget( static_cast<QDockWidget *>( qth_par_QthObject( 1 ) ), static_cast<QDockWidget *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOOLBARAREA )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : Qt::ToolBarArea  toolBarArea ( QToolBar * toolbar ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QToolBar" ) )
        {
            hb_retni( p_mainWindow->toolBarArea( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOOLBARBREAK )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  toolBarBreak ( QToolBar * toolbar ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QToolBar" ) )
        {
            hb_retl( p_mainWindow->toolBarBreak( static_cast<QToolBar *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOOLBUTTONSTYLE )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : Qt::ToolButtonStyle  toolButtonStyle () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_mainWindow->toolButtonStyle() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNIFIEDTITLEANDTOOLBARONMAC )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_functions_ : bool  unifiedTitleAndToolBarOnMac () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_mainWindow->unifiedTitleAndToolBarOnMac() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETANIMATED )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_slots_ : void  setAnimated ( bool enabled )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_mainWindow->setAnimated( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOCKNESTINGENABLED )
{
    QMainWindow* p_mainWindow = static_cast<QMainWindow *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_mainWindow )
    {
        /*
         * _public_slots_ : void  setDockNestingEnabled ( bool enabled )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_mainWindow->setDockNestingEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                           , HB_FUNCNAME( NEW                            ) );
    hb_clsAdd( uiClass, "ADDDOCKWIDGET"                 , HB_FUNCNAME( ADDDOCKWIDGET                  ) );
    hb_clsAdd( uiClass, "ADDTOOLBAR"                    , HB_FUNCNAME( ADDTOOLBAR                     ) );
    hb_clsAdd( uiClass, "ADDTOOLBARBREAK"               , HB_FUNCNAME( ADDTOOLBARBREAK                ) );
    hb_clsAdd( uiClass, "CENTRALWIDGET"                 , HB_FUNCNAME( CENTRALWIDGET                  ) );
    hb_clsAdd( uiClass, "CORNER"                        , HB_FUNCNAME( CORNER                         ) );
    hb_clsAdd( uiClass, "CREATEPOPUPMENU"               , HB_FUNCNAME( CREATEPOPUPMENU                ) );
    hb_clsAdd( uiClass, "DOCKOPTIONS"                   , HB_FUNCNAME( DOCKOPTIONS                    ) );
    hb_clsAdd( uiClass, "DOCKWIDGETAREA"                , HB_FUNCNAME( DOCKWIDGETAREA                 ) );
    hb_clsAdd( uiClass, "DOCUMENTMODE"                  , HB_FUNCNAME( DOCUMENTMODE                   ) );
    hb_clsAdd( uiClass, "ICONSIZE"                      , HB_FUNCNAME( ICONSIZE                       ) );
    hb_clsAdd( uiClass, "INSERTTOOLBAR"                 , HB_FUNCNAME( INSERTTOOLBAR                  ) );
    hb_clsAdd( uiClass, "INSERTTOOLBARBREAK"            , HB_FUNCNAME( INSERTTOOLBARBREAK             ) );
    hb_clsAdd( uiClass, "ISANIMATED"                    , HB_FUNCNAME( ISANIMATED                     ) );
    hb_clsAdd( uiClass, "ISDOCKNESTINGENABLED"          , HB_FUNCNAME( ISDOCKNESTINGENABLED           ) );
    hb_clsAdd( uiClass, "MENUBAR"                       , HB_FUNCNAME( MENUBAR                        ) );
    hb_clsAdd( uiClass, "MENUWIDGET"                    , HB_FUNCNAME( MENUWIDGET                     ) );
    hb_clsAdd( uiClass, "REMOVEDOCKWIDGET"              , HB_FUNCNAME( REMOVEDOCKWIDGET               ) );
    hb_clsAdd( uiClass, "REMOVETOOLBAR"                 , HB_FUNCNAME( REMOVETOOLBAR                  ) );
    hb_clsAdd( uiClass, "REMOVETOOLBARBREAK"            , HB_FUNCNAME( REMOVETOOLBARBREAK             ) );
    hb_clsAdd( uiClass, "RESTOREDOCKWIDGET"             , HB_FUNCNAME( RESTOREDOCKWIDGET              ) );
    hb_clsAdd( uiClass, "RESTORESTATE"                  , HB_FUNCNAME( RESTORESTATE                   ) );
    hb_clsAdd( uiClass, "SAVESTATE"                     , HB_FUNCNAME( SAVESTATE                      ) );
    hb_clsAdd( uiClass, "SETCENTRALWIDGET"              , HB_FUNCNAME( SETCENTRALWIDGET               ) );
    hb_clsAdd( uiClass, "SETCORNER"                     , HB_FUNCNAME( SETCORNER                      ) );
    hb_clsAdd( uiClass, "SETDOCKOPTIONS"                , HB_FUNCNAME( SETDOCKOPTIONS                 ) );
    hb_clsAdd( uiClass, "SETDOCUMENTMODE"               , HB_FUNCNAME( SETDOCUMENTMODE                ) );
    hb_clsAdd( uiClass, "SETICONSIZE"                   , HB_FUNCNAME( SETICONSIZE                    ) );
    hb_clsAdd( uiClass, "SETMENUBAR"                    , HB_FUNCNAME( SETMENUBAR                     ) );
    hb_clsAdd( uiClass, "SETMENUWIDGET"                 , HB_FUNCNAME( SETMENUWIDGET                  ) );
    hb_clsAdd( uiClass, "SETSTATUSBAR"                  , HB_FUNCNAME( SETSTATUSBAR                   ) );
    hb_clsAdd( uiClass, "SETTABPOSITION"                , HB_FUNCNAME( SETTABPOSITION                 ) );
    hb_clsAdd( uiClass, "SETTABSHAPE"                   , HB_FUNCNAME( SETTABSHAPE                    ) );
    hb_clsAdd( uiClass, "SETTOOLBUTTONSTYLE"            , HB_FUNCNAME( SETTOOLBUTTONSTYLE             ) );
    hb_clsAdd( uiClass, "SETUNIFIEDTITLEANDTOOLBARONMAC", HB_FUNCNAME( SETUNIFIEDTITLEANDTOOLBARONMAC ) );
    hb_clsAdd( uiClass, "SPLITDOCKWIDGET"               , HB_FUNCNAME( SPLITDOCKWIDGET                ) );
    hb_clsAdd( uiClass, "STATUSBAR"                     , HB_FUNCNAME( STATUSBAR                      ) );
    hb_clsAdd( uiClass, "TABPOSITION"                   , HB_FUNCNAME( TABPOSITION                    ) );
    hb_clsAdd( uiClass, "TABSHAPE"                      , HB_FUNCNAME( TABSHAPE                       ) );
    hb_clsAdd( uiClass, "TABIFIEDDOCKWIDGETS"           , HB_FUNCNAME( TABIFIEDDOCKWIDGETS            ) );
    hb_clsAdd( uiClass, "TABIFYDOCKWIDGET"              , HB_FUNCNAME( TABIFYDOCKWIDGET               ) );
    hb_clsAdd( uiClass, "TOOLBARAREA"                   , HB_FUNCNAME( TOOLBARAREA                    ) );
    hb_clsAdd( uiClass, "TOOLBARBREAK"                  , HB_FUNCNAME( TOOLBARBREAK                   ) );
    hb_clsAdd( uiClass, "TOOLBUTTONSTYLE"               , HB_FUNCNAME( TOOLBUTTONSTYLE                ) );
    hb_clsAdd( uiClass, "UNIFIEDTITLEANDTOOLBARONMAC"   , HB_FUNCNAME( UNIFIEDTITLEANDTOOLBARONMAC    ) );
    hb_clsAdd( uiClass, "SETANIMATED"                   , HB_FUNCNAME( SETANIMATED                    ) );
    hb_clsAdd( uiClass, "SETDOCKNESTINGENABLED"         , HB_FUNCNAME( SETDOCKNESTINGENABLED          ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
