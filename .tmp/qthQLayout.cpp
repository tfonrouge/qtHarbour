/*
 * $Id: qthQLayout.wip 128 2011-04-14 15:49:46Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QLayout>

#define SizeConstraint                          QLayout::SizeConstraint

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QLAYOUT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QOBJECT );
HB_FUNC_EXTERN( QLAYOUTITEM );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QWIDGET ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QLAYOUT )
{ "QLAYOUT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QLAYOUT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QOBJECT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QOBJECT ) }, NULL },
{ "QLAYOUTITEM", { HB_FS_PUBLIC }, { HB_FUNCNAME( QLAYOUTITEM ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QWIDGET", {HB_FS_PUBLIC}, {HB_FUNCNAME( QWIDGET )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QLAYOUT )

HB_FUNC( QLAYOUT )
{
    qthClassObjCreator( symbols, 2 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 2 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( ACTIVATE )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : bool  activate ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_layout->activate() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDITEM )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : virtual void  addItem ( QLayoutItem * item ) = 0
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLayoutItem" ) )
        {
            p_layout->addItem( static_cast<QLayoutItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDWIDGET )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  addWidget ( QWidget * w )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_layout->addWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTENTSMARGINS )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : QMargins  contentsMargins () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QMargins'
            // qth_itemPushNewReturn( QtH::QMargins, new QMargins( p_layout->contentsMargins() ), "QMargins" );
            qth_errRT_UNKNOWNOBJ( "QLayout::contentsMargins", "Don't know how to return type 'QMargins'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTENTSRECT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : QRect  contentsRect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_layout->contentsRect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COUNT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : virtual int  count () const = 0
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_layout->count() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETCONTENTSMARGINS )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  getContentsMargins ( int * left, int * top, int * right, int * bottom ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF ) )
        {
            int left = hb_parni( 1 );
            int top = hb_parni( 2 );
            int right = hb_parni( 3 );
            int bottom = hb_parni( 4 );
            p_layout->getContentsMargins( &left, &top, &right, &bottom );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( left, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( top, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( right, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( bottom, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INDEXOF )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : virtual int  indexOf ( QWidget * widget ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            hb_retni( p_layout->indexOf( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISENABLED )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : bool  isEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_layout->isEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMAT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : virtual QLayoutItem *  itemAt ( int index ) const = 0
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layout->itemAt( hb_parni( 1 ) ), "QLayoutItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MENUBAR )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : QWidget *  menuBar () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layout->menuBar(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PARENTWIDGET )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : QWidget *  parentWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layout->parentWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVEITEM )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  removeItem ( QLayoutItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLayoutItem" ) )
        {
            p_layout->removeItem( static_cast<QLayoutItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVEWIDGET )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  removeWidget ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_layout->removeWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALIGNMENT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : bool  setAlignment ( QWidget * w, Qt::Alignment alignment )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsIntType( 2, "Qt::Alignment" ) )
        {
            hb_retl( p_layout->setAlignment( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), (Qt::Alignment)  qth_par_IntType( 2 ) ) == true );
            return;
        }
        /*
         * _public_functions_ : void  setAlignment ( Qt::Alignment alignment )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Alignment" ) )
        {
            p_layout->setAlignment( (Qt::Alignment)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : bool  setAlignment ( QLayout * l, Qt::Alignment alignment )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QLayout" ) && qth_IsIntType( 2, "Qt::Alignment" ) )
        {
            hb_retl( p_layout->setAlignment( static_cast<QLayout *>( qth_par_QthObject( 1 ) ), (Qt::Alignment)  qth_par_IntType( 2 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCONTENTSMARGINS )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  setContentsMargins ( int left, int top, int right, int bottom )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_layout->setContentsMargins( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setContentsMargins ( const QMargins & margins )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMargins" ) )
        {
            const QMargins & margins = * static_cast<QMargins *>( qth_par_QthObject( 1 ) );
            p_layout->setContentsMargins( margins );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETENABLED )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  setEnabled ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_layout->setEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMENUBAR )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  setMenuBar ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_layout->setMenuBar( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSIZECONSTRAINT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  setSizeConstraint ( SizeConstraint )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "SizeConstraint" ) )
        {
            p_layout->setSizeConstraint( (SizeConstraint)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSPACING )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  setSpacing ( int )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_layout->setSpacing( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZECONSTRAINT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : SizeConstraint  sizeConstraint () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_layout->sizeConstraint() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPACING )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : int  spacing () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_layout->spacing() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TAKEAT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : virtual QLayoutItem *  takeAt ( int index ) = 0
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layout->takeAt( hb_parni( 1 ) ), "QLayoutItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UPDATE )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void  update ()
         */
        if( hb_pcount() == 0 )
        {
            p_layout->update();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMARGIN )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _public_functions_ : void setMargin(int);
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_layout->setMargin( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EXPANDINGDIRECTIONS )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual Qt::Orientations  expandingDirections () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_layout->expandingDirections() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GEOMETRY )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QRect  geometry () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_layout->geometry() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INVALIDATE )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  invalidate ()
         */
        if( hb_pcount() == 0 )
        {
            p_layout->invalidate();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISEMPTY )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual bool  isEmpty () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_layout->isEmpty() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LAYOUT )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QLayout *  layout ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_layout->layout(), "QLayout" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMSIZE )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  maximumSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_layout->maximumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZE )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_layout->minimumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGEOMETRY )
{
    QLayout* p_layout = static_cast<QLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_layout )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  setGeometry ( const QRect & r )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & r = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            p_layout->setGeometry( r );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QLAYOUT_CLOSESTACCEPTABLESIZE )
{
    /*
     * _static_public_members_ : QSize  closestAcceptableSize ( const QWidget * widget, const QSize & size )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QSize" ) )
    {
        const QWidget  * widget = static_cast<QWidget *>( qth_par_QthObject( 1 ) );
        const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 2 ) );
        qth_itemPushNewReturn( QtH::QSize, new QSize( QLayout::closestAcceptableSize( widget, size ) ), "QSize" );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "ACTIVATE"             , HB_FUNCNAME( ACTIVATE                      ) );
    hb_clsAdd( uiClass, "ADDITEM"              , HB_FUNCNAME( ADDITEM                       ) );
    hb_clsAdd( uiClass, "ADDWIDGET"            , HB_FUNCNAME( ADDWIDGET                     ) );
    hb_clsAdd( uiClass, "CONTENTSMARGINS"      , HB_FUNCNAME( CONTENTSMARGINS               ) );
    hb_clsAdd( uiClass, "CONTENTSRECT"         , HB_FUNCNAME( CONTENTSRECT                  ) );
    hb_clsAdd( uiClass, "COUNT"                , HB_FUNCNAME( COUNT                         ) );
    hb_clsAdd( uiClass, "GETCONTENTSMARGINS"   , HB_FUNCNAME( GETCONTENTSMARGINS            ) );
    hb_clsAdd( uiClass, "INDEXOF"              , HB_FUNCNAME( INDEXOF                       ) );
    hb_clsAdd( uiClass, "ISENABLED"            , HB_FUNCNAME( ISENABLED                     ) );
    hb_clsAdd( uiClass, "ITEMAT"               , HB_FUNCNAME( ITEMAT                        ) );
    hb_clsAdd( uiClass, "MENUBAR"              , HB_FUNCNAME( MENUBAR                       ) );
    hb_clsAdd( uiClass, "PARENTWIDGET"         , HB_FUNCNAME( PARENTWIDGET                  ) );
    hb_clsAdd( uiClass, "REMOVEITEM"           , HB_FUNCNAME( REMOVEITEM                    ) );
    hb_clsAdd( uiClass, "REMOVEWIDGET"         , HB_FUNCNAME( REMOVEWIDGET                  ) );
    hb_clsAdd( uiClass, "SETALIGNMENT"         , HB_FUNCNAME( SETALIGNMENT                  ) );
    hb_clsAdd( uiClass, "SETCONTENTSMARGINS"   , HB_FUNCNAME( SETCONTENTSMARGINS            ) );
    hb_clsAdd( uiClass, "SETENABLED"           , HB_FUNCNAME( SETENABLED                    ) );
    hb_clsAdd( uiClass, "SETMENUBAR"           , HB_FUNCNAME( SETMENUBAR                    ) );
    hb_clsAdd( uiClass, "SETSIZECONSTRAINT"    , HB_FUNCNAME( SETSIZECONSTRAINT             ) );
    hb_clsAdd( uiClass, "SETSPACING"           , HB_FUNCNAME( SETSPACING                    ) );
    hb_clsAdd( uiClass, "SIZECONSTRAINT"       , HB_FUNCNAME( SIZECONSTRAINT                ) );
    hb_clsAdd( uiClass, "SPACING"              , HB_FUNCNAME( SPACING                       ) );
    hb_clsAdd( uiClass, "TAKEAT"               , HB_FUNCNAME( TAKEAT                        ) );
    hb_clsAdd( uiClass, "UPDATE"               , HB_FUNCNAME( UPDATE                        ) );
    hb_clsAdd( uiClass, "SETMARGIN"            , HB_FUNCNAME( SETMARGIN                     ) );
    hb_clsAdd( uiClass, "EXPANDINGDIRECTIONS"  , HB_FUNCNAME( EXPANDINGDIRECTIONS           ) );
    hb_clsAdd( uiClass, "GEOMETRY"             , HB_FUNCNAME( GEOMETRY                      ) );
    hb_clsAdd( uiClass, "INVALIDATE"           , HB_FUNCNAME( INVALIDATE                    ) );
    hb_clsAdd( uiClass, "ISEMPTY"              , HB_FUNCNAME( ISEMPTY                       ) );
    hb_clsAdd( uiClass, "LAYOUT"               , HB_FUNCNAME( LAYOUT                        ) );
    hb_clsAdd( uiClass, "MAXIMUMSIZE"          , HB_FUNCNAME( MAXIMUMSIZE                   ) );
    hb_clsAdd( uiClass, "MINIMUMSIZE"          , HB_FUNCNAME( MINIMUMSIZE                   ) );
    hb_clsAdd( uiClass, "SETGEOMETRY"          , HB_FUNCNAME( SETGEOMETRY                   ) );
    hb_clsAdd( uiClass, "CLOSESTACCEPTABLESIZE", HB_FUNCNAME( QLAYOUT_CLOSESTACCEPTABLESIZE ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
