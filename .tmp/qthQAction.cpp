/*
 * $Id: qthQAction.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QAction>

#define ActionEvent                             QAction::ActionEvent
#define MenuRole                                QAction::MenuRole
#define Priority                                QAction::Priority
#define SoftKeyRole                             QAction::SoftKeyRole

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QACTION );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QOBJECT );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QWIDGET ); // REQUEST'ed Class
HB_FUNC_EXTERN( QMENU ); // REQUEST'ed Class
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class
HB_FUNC_EXTERN( QVARIANT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QACTION )
{ "QACTION", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QACTION )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QOBJECT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QOBJECT ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QWIDGET", {HB_FS_PUBLIC}, {HB_FUNCNAME( QWIDGET )}, NULL }, // REQUEST'ed Class
{ "QMENU", {HB_FS_PUBLIC}, {HB_FUNCNAME( QMENU )}, NULL }, // REQUEST'ed Class
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }, // REQUEST'ed Class
{ "QVARIANT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QVARIANT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QACTION )

HB_FUNC( QACTION )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QAction ( QObject * parent )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QObject" ) )
    {
        qth_itemPushReturn( QtH::QAction, new QAction( static_cast<QObject *>( qth_par_QthObject( 1 ) ) ) );
        return;
    }
    /*
     * _public_functions_ : QAction ( const QString & text, QObject * parent )
     */
    if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsObject( 2, "QObject" ) )
    {
        QString text =  qth_par_QString( 1 );
        qth_itemPushReturn( QtH::QAction, new QAction( text, static_cast<QObject *>( qth_par_QthObject( 2 ) ) ) );
        return;
    }
    /*
     * _public_functions_ : QAction ( const QIcon & icon, const QString & text, QObject * parent )
     */
    if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QIcon" ) && qth_IsString( 2 ) && qth_IsObject( 3, "QObject" ) )
    {
        const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
        QString text =  qth_par_QString( 2 );
        qth_itemPushReturn( QtH::QAction, new QAction( icon, text, static_cast<QObject *>( qth_par_QthObject( 3 ) ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIONGROUP )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QActionGroup *  actionGroup () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QActionGroup'
            // qth_itemReturn( (PCPP_OBJECT) p_action->actionGroup(), "QActionGroup" );
            qth_errRT_UNKNOWNOBJ( "QAction::actionGroup", "Don't know how to return type 'QActionGroup'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIVATE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  activate ( ActionEvent event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "ActionEvent" ) )
        {
            p_action->activate( (ActionEvent)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ASSOCIATEDGRAPHICSWIDGETS )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QList<QGraphicsWidget *>  associatedGraphicsWidgets () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QGraphicsWidget *>( p_action->associatedGraphicsWidgets() ), "QList<QGraphicsWidget *>" );
            qth_errRT_UNKNOWNOBJ( "QAction::associatedGraphicsWidgets", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ASSOCIATEDWIDGETS )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QList<QWidget *>  associatedWidgets () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QWidget *>( p_action->associatedWidgets() ), "QList<QWidget *>" );
            qth_errRT_UNKNOWNOBJ( "QAction::associatedWidgets", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOREPEAT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  autoRepeat () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->autoRepeat() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DATA )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QVariant  data () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QVariant, new QVariant( p_action->data() ), "QVariant" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QFont  font () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QFont'
            // qth_itemPushNewReturn( QtH::QFont, new QFont( p_action->font() ), "QFont" );
            qth_errRT_UNKNOWNOBJ( "QAction::font", "Don't know how to return type 'QFont'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICON )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QIcon  icon () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QIcon, new QIcon( p_action->icon() ), "QIcon" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICONTEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QString  iconText () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_action->iconText() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISCHECKABLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  isCheckable () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->isCheckable() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISCHECKED )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  isChecked () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->isChecked() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISENABLED )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  isEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->isEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISICONVISIBLEINMENU )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  isIconVisibleInMenu () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->isIconVisibleInMenu() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISSEPARATOR )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  isSeparator () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->isSeparator() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVISIBLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  isVisible () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_action->isVisible() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MENU )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QMenu *  menu () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_action->menu(), "QMenu" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MENUROLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : MenuRole  menuRole () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_action->menuRole() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PARENTWIDGET )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QWidget *  parentWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_action->parentWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PRIORITY )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : Priority  priority () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_action->priority() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACTIONGROUP )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setActionGroup ( QActionGroup * group )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QActionGroup" ) )
        {
            p_action->setActionGroup( static_cast<QActionGroup *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOREPEAT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setAutoRepeat ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setAutoRepeat( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCHECKABLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setCheckable ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setCheckable( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATA )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setData ( const QVariant & userData )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QVariant" ) )
        {
            const QVariant & userData = * static_cast<QVariant *>( qth_par_QthObject( 1 ) );
            p_action->setData( userData );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setFont ( const QFont & font )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QFont" ) )
        {
            const QFont & font = * static_cast<QFont *>( qth_par_QthObject( 1 ) );
            p_action->setFont( font );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICON )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setIcon ( const QIcon & icon )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QIcon" ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            p_action->setIcon( icon );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICONTEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setIconText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_action->setIconText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICONVISIBLEINMENU )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setIconVisibleInMenu ( bool visible )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setIconVisibleInMenu( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMENU )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setMenu ( QMenu * menu )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMenu" ) )
        {
            p_action->setMenu( static_cast<QMenu *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMENUROLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setMenuRole ( MenuRole menuRole )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "MenuRole" ) )
        {
            p_action->setMenuRole( (MenuRole)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETPRIORITY )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setPriority ( Priority priority )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Priority" ) )
        {
            p_action->setPriority( (Priority)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSEPARATOR )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setSeparator ( bool b )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setSeparator( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHORTCUT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setShortcut ( const QKeySequence & shortcut )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QKeySequence" ) )
        {
            const QKeySequence & shortcut = * static_cast<QKeySequence *>( qth_par_QthObject( 1 ) );
            p_action->setShortcut( shortcut );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHORTCUTCONTEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setShortcutContext ( Qt::ShortcutContext context )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::ShortcutContext" ) )
        {
            p_action->setShortcutContext( (Qt::ShortcutContext)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHORTCUTS )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setShortcuts ( const QList<QKeySequence> & shortcuts )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QList" ) )
        {
            const QList<QKeySequence> & shortcuts = * static_cast<QList<QKeySequence> *>( qth_par_QthObject( 1 ) );
            p_action->setShortcuts( shortcuts );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setShortcuts ( QKeySequence::StandardKey key )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QKeySequence::StandardKey" ) )
        {
            p_action->setShortcuts( (QKeySequence::StandardKey)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSOFTKEYROLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setSoftKeyRole ( SoftKeyRole softKeyRole )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "SoftKeyRole" ) )
        {
            p_action->setSoftKeyRole( (SoftKeyRole)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTATUSTIP )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setStatusTip ( const QString & statusTip )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString statusTip =  qth_par_QString( 1 );
            p_action->setStatusTip( statusTip );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_action->setText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOOLTIP )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setToolTip ( const QString & tip )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString tip =  qth_par_QString( 1 );
            p_action->setToolTip( tip );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWHATSTHIS )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : void  setWhatsThis ( const QString & what )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString what =  qth_par_QString( 1 );
            p_action->setWhatsThis( what );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHORTCUT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QKeySequence  shortcut () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QKeySequence'
            // qth_itemPushNewReturn( QtH::QKeySequence, new QKeySequence( p_action->shortcut() ), "QKeySequence" );
            qth_errRT_UNKNOWNOBJ( "QAction::shortcut", "Don't know how to return type 'QKeySequence'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHORTCUTCONTEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : Qt::ShortcutContext  shortcutContext () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_action->shortcutContext() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHORTCUTS )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QList<QKeySequence>  shortcuts () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QKeySequence>( p_action->shortcuts() ), "QList<QKeySequence>" );
            qth_errRT_UNKNOWNOBJ( "QAction::shortcuts", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWSTATUSTEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : bool  showStatusText ( QWidget * widget = 0 )
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
        {
            QWidget* widget = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
            hb_retl( p_action->showStatusText( widget ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SOFTKEYROLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : SoftKeyRole  softKeyRole () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_action->softKeyRole() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STATUSTIP )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QString  statusTip () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_action->statusTip() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXT )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QString  text () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_action->text() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOOLTIP )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QString  toolTip () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_action->toolTip() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WHATSTHIS )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_functions_ : QString  whatsThis () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_action->whatsThis() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HOVER )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  hover ()
         */
        if( hb_pcount() == 0 )
        {
            p_action->hover();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCHECKED )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  setChecked ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setChecked( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDISABLED )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  setDisabled ( bool b )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setDisabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETENABLED )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  setEnabled ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVISIBLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  setVisible ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_action->setVisible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOGGLE )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  toggle ()
         */
        if( hb_pcount() == 0 )
        {
            p_action->toggle();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TRIGGER )
{
    QAction* p_action = static_cast<QAction *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_action )
    {
        /*
         * _public_slots_ : void  trigger ()
         */
        if( hb_pcount() == 0 )
        {
            p_action->trigger();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                      , HB_FUNCNAME( NEW                       ) );
    hb_clsAdd( uiClass, "ACTIONGROUP"              , HB_FUNCNAME( ACTIONGROUP               ) );
    hb_clsAdd( uiClass, "ACTIVATE"                 , HB_FUNCNAME( ACTIVATE                  ) );
    hb_clsAdd( uiClass, "ASSOCIATEDGRAPHICSWIDGETS", HB_FUNCNAME( ASSOCIATEDGRAPHICSWIDGETS ) );
    hb_clsAdd( uiClass, "ASSOCIATEDWIDGETS"        , HB_FUNCNAME( ASSOCIATEDWIDGETS         ) );
    hb_clsAdd( uiClass, "AUTOREPEAT"               , HB_FUNCNAME( AUTOREPEAT                ) );
    hb_clsAdd( uiClass, "DATA"                     , HB_FUNCNAME( DATA                      ) );
    hb_clsAdd( uiClass, "FONT"                     , HB_FUNCNAME( FONT                      ) );
    hb_clsAdd( uiClass, "ICON"                     , HB_FUNCNAME( ICON                      ) );
    hb_clsAdd( uiClass, "ICONTEXT"                 , HB_FUNCNAME( ICONTEXT                  ) );
    hb_clsAdd( uiClass, "ISCHECKABLE"              , HB_FUNCNAME( ISCHECKABLE               ) );
    hb_clsAdd( uiClass, "ISCHECKED"                , HB_FUNCNAME( ISCHECKED                 ) );
    hb_clsAdd( uiClass, "ISENABLED"                , HB_FUNCNAME( ISENABLED                 ) );
    hb_clsAdd( uiClass, "ISICONVISIBLEINMENU"      , HB_FUNCNAME( ISICONVISIBLEINMENU       ) );
    hb_clsAdd( uiClass, "ISSEPARATOR"              , HB_FUNCNAME( ISSEPARATOR               ) );
    hb_clsAdd( uiClass, "ISVISIBLE"                , HB_FUNCNAME( ISVISIBLE                 ) );
    hb_clsAdd( uiClass, "MENU"                     , HB_FUNCNAME( MENU                      ) );
    hb_clsAdd( uiClass, "MENUROLE"                 , HB_FUNCNAME( MENUROLE                  ) );
    hb_clsAdd( uiClass, "PARENTWIDGET"             , HB_FUNCNAME( PARENTWIDGET              ) );
    hb_clsAdd( uiClass, "PRIORITY"                 , HB_FUNCNAME( PRIORITY                  ) );
    hb_clsAdd( uiClass, "SETACTIONGROUP"           , HB_FUNCNAME( SETACTIONGROUP            ) );
    hb_clsAdd( uiClass, "SETAUTOREPEAT"            , HB_FUNCNAME( SETAUTOREPEAT             ) );
    hb_clsAdd( uiClass, "SETCHECKABLE"             , HB_FUNCNAME( SETCHECKABLE              ) );
    hb_clsAdd( uiClass, "SETDATA"                  , HB_FUNCNAME( SETDATA                   ) );
    hb_clsAdd( uiClass, "SETFONT"                  , HB_FUNCNAME( SETFONT                   ) );
    hb_clsAdd( uiClass, "SETICON"                  , HB_FUNCNAME( SETICON                   ) );
    hb_clsAdd( uiClass, "SETICONTEXT"              , HB_FUNCNAME( SETICONTEXT               ) );
    hb_clsAdd( uiClass, "SETICONVISIBLEINMENU"     , HB_FUNCNAME( SETICONVISIBLEINMENU      ) );
    hb_clsAdd( uiClass, "SETMENU"                  , HB_FUNCNAME( SETMENU                   ) );
    hb_clsAdd( uiClass, "SETMENUROLE"              , HB_FUNCNAME( SETMENUROLE               ) );
    hb_clsAdd( uiClass, "SETPRIORITY"              , HB_FUNCNAME( SETPRIORITY               ) );
    hb_clsAdd( uiClass, "SETSEPARATOR"             , HB_FUNCNAME( SETSEPARATOR              ) );
    hb_clsAdd( uiClass, "SETSHORTCUT"              , HB_FUNCNAME( SETSHORTCUT               ) );
    hb_clsAdd( uiClass, "SETSHORTCUTCONTEXT"       , HB_FUNCNAME( SETSHORTCUTCONTEXT        ) );
    hb_clsAdd( uiClass, "SETSHORTCUTS"             , HB_FUNCNAME( SETSHORTCUTS              ) );
    hb_clsAdd( uiClass, "SETSOFTKEYROLE"           , HB_FUNCNAME( SETSOFTKEYROLE            ) );
    hb_clsAdd( uiClass, "SETSTATUSTIP"             , HB_FUNCNAME( SETSTATUSTIP              ) );
    hb_clsAdd( uiClass, "SETTEXT"                  , HB_FUNCNAME( SETTEXT                   ) );
    hb_clsAdd( uiClass, "SETTOOLTIP"               , HB_FUNCNAME( SETTOOLTIP                ) );
    hb_clsAdd( uiClass, "SETWHATSTHIS"             , HB_FUNCNAME( SETWHATSTHIS              ) );
    hb_clsAdd( uiClass, "SHORTCUT"                 , HB_FUNCNAME( SHORTCUT                  ) );
    hb_clsAdd( uiClass, "SHORTCUTCONTEXT"          , HB_FUNCNAME( SHORTCUTCONTEXT           ) );
    hb_clsAdd( uiClass, "SHORTCUTS"                , HB_FUNCNAME( SHORTCUTS                 ) );
    hb_clsAdd( uiClass, "SHOWSTATUSTEXT"           , HB_FUNCNAME( SHOWSTATUSTEXT            ) );
    hb_clsAdd( uiClass, "SOFTKEYROLE"              , HB_FUNCNAME( SOFTKEYROLE               ) );
    hb_clsAdd( uiClass, "STATUSTIP"                , HB_FUNCNAME( STATUSTIP                 ) );
    hb_clsAdd( uiClass, "TEXT"                     , HB_FUNCNAME( TEXT                      ) );
    hb_clsAdd( uiClass, "TOOLTIP"                  , HB_FUNCNAME( TOOLTIP                   ) );
    hb_clsAdd( uiClass, "WHATSTHIS"                , HB_FUNCNAME( WHATSTHIS                 ) );
    hb_clsAdd( uiClass, "HOVER"                    , HB_FUNCNAME( HOVER                     ) );
    hb_clsAdd( uiClass, "SETCHECKED"               , HB_FUNCNAME( SETCHECKED                ) );
    hb_clsAdd( uiClass, "SETDISABLED"              , HB_FUNCNAME( SETDISABLED               ) );
    hb_clsAdd( uiClass, "SETENABLED"               , HB_FUNCNAME( SETENABLED                ) );
    hb_clsAdd( uiClass, "SETVISIBLE"               , HB_FUNCNAME( SETVISIBLE                ) );
    hb_clsAdd( uiClass, "TOGGLE"                   , HB_FUNCNAME( TOGGLE                    ) );
    hb_clsAdd( uiClass, "TRIGGER"                  , HB_FUNCNAME( TRIGGER                   ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
