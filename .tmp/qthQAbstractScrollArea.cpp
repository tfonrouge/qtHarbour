/*
 * $Id: qthQAbstractScrollArea.wip 134 2011-06-07 12:35:37Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QAbstractScrollArea>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QABSTRACTSCROLLAREA );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QFRAME );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QABSTRACTSCROLLAREA )
{ "QABSTRACTSCROLLAREA", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QABSTRACTSCROLLAREA )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QFRAME", { HB_FS_PUBLIC }, { HB_FUNCNAME( QFRAME ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QABSTRACTSCROLLAREA )

HB_FUNC( QABSTRACTSCROLLAREA )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QAbstractScrollArea ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QAbstractScrollArea, new QAbstractScrollArea( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSCROLLBARWIDGET )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  addScrollBarWidget ( QWidget * widget, Qt::Alignment alignment )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsIntType( 2, "Qt::Alignment" ) )
        {
            p_abstractScrollArea->addScrollBarWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), (Qt::Alignment)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CORNERWIDGET )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : QWidget *  cornerWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_abstractScrollArea->cornerWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HORIZONTALSCROLLBAR )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : QScrollBar *  horizontalScrollBar () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QScrollBar'
            // qth_itemReturn( (PCPP_OBJECT) p_abstractScrollArea->horizontalScrollBar(), "QScrollBar" );
            qth_errRT_UNKNOWNOBJ( "QAbstractScrollArea::horizontalScrollBar", "Don't know how to return type 'QScrollBar'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HORIZONTALSCROLLBARPOLICY )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : Qt::ScrollBarPolicy  horizontalScrollBarPolicy () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractScrollArea->horizontalScrollBarPolicy() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMVIEWPORTSIZE )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : QSize  maximumViewportSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstractScrollArea->maximumViewportSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCORNERWIDGET )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  setCornerWidget ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_abstractScrollArea->setCornerWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHORIZONTALSCROLLBAR )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  setHorizontalScrollBar ( QScrollBar * scrollBar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QScrollBar" ) )
        {
            p_abstractScrollArea->setHorizontalScrollBar( static_cast<QScrollBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHORIZONTALSCROLLBARPOLICY )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  setHorizontalScrollBarPolicy ( Qt::ScrollBarPolicy )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::ScrollBarPolicy" ) )
        {
            p_abstractScrollArea->setHorizontalScrollBarPolicy( (Qt::ScrollBarPolicy)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVERTICALSCROLLBAR )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  setVerticalScrollBar ( QScrollBar * scrollBar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QScrollBar" ) )
        {
            p_abstractScrollArea->setVerticalScrollBar( static_cast<QScrollBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVERTICALSCROLLBARPOLICY )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  setVerticalScrollBarPolicy ( Qt::ScrollBarPolicy )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::ScrollBarPolicy" ) )
        {
            p_abstractScrollArea->setVerticalScrollBarPolicy( (Qt::ScrollBarPolicy)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVIEWPORT )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : void  setViewport ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_abstractScrollArea->setViewport( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VERTICALSCROLLBAR )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : QScrollBar *  verticalScrollBar () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QScrollBar'
            // qth_itemReturn( (PCPP_OBJECT) p_abstractScrollArea->verticalScrollBar(), "QScrollBar" );
            qth_errRT_UNKNOWNOBJ( "QAbstractScrollArea::verticalScrollBar", "Don't know how to return type 'QScrollBar'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VERTICALSCROLLBARPOLICY )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : Qt::ScrollBarPolicy  verticalScrollBarPolicy () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractScrollArea->verticalScrollBarPolicy() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VIEWPORT )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _public_functions_ : QWidget *  viewport () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_abstractScrollArea->viewport(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstractScrollArea->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QAbstractScrollArea* p_abstractScrollArea = static_cast<QAbstractScrollArea *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractScrollArea )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstractScrollArea->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                         , HB_FUNCNAME( NEW                          ) );
    hb_clsAdd( uiClass, "ADDSCROLLBARWIDGET"          , HB_FUNCNAME( ADDSCROLLBARWIDGET           ) );
    hb_clsAdd( uiClass, "CORNERWIDGET"                , HB_FUNCNAME( CORNERWIDGET                 ) );
    hb_clsAdd( uiClass, "HORIZONTALSCROLLBAR"         , HB_FUNCNAME( HORIZONTALSCROLLBAR          ) );
    hb_clsAdd( uiClass, "HORIZONTALSCROLLBARPOLICY"   , HB_FUNCNAME( HORIZONTALSCROLLBARPOLICY    ) );
    hb_clsAdd( uiClass, "MAXIMUMVIEWPORTSIZE"         , HB_FUNCNAME( MAXIMUMVIEWPORTSIZE          ) );
    hb_clsAdd( uiClass, "SETCORNERWIDGET"             , HB_FUNCNAME( SETCORNERWIDGET              ) );
    hb_clsAdd( uiClass, "SETHORIZONTALSCROLLBAR"      , HB_FUNCNAME( SETHORIZONTALSCROLLBAR       ) );
    hb_clsAdd( uiClass, "SETHORIZONTALSCROLLBARPOLICY", HB_FUNCNAME( SETHORIZONTALSCROLLBARPOLICY ) );
    hb_clsAdd( uiClass, "SETVERTICALSCROLLBAR"        , HB_FUNCNAME( SETVERTICALSCROLLBAR         ) );
    hb_clsAdd( uiClass, "SETVERTICALSCROLLBARPOLICY"  , HB_FUNCNAME( SETVERTICALSCROLLBARPOLICY   ) );
    hb_clsAdd( uiClass, "SETVIEWPORT"                 , HB_FUNCNAME( SETVIEWPORT                  ) );
    hb_clsAdd( uiClass, "VERTICALSCROLLBAR"           , HB_FUNCNAME( VERTICALSCROLLBAR            ) );
    hb_clsAdd( uiClass, "VERTICALSCROLLBARPOLICY"     , HB_FUNCNAME( VERTICALSCROLLBARPOLICY      ) );
    hb_clsAdd( uiClass, "VIEWPORT"                    , HB_FUNCNAME( VIEWPORT                     ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT"             , HB_FUNCNAME( MINIMUMSIZEHINT              ) );
    hb_clsAdd( uiClass, "SIZEHINT"                    , HB_FUNCNAME( SIZEHINT                     ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
