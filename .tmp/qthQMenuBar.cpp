/*
 * $Id: qthQMenuBar.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QMenuBar>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QMENUBAR );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QMENU ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QACTION ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QMENUBAR )
{ "QMENUBAR", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QMENUBAR )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QMENU", {HB_FS_PUBLIC}, {HB_FUNCNAME( QMENU )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QACTION", {HB_FS_PUBLIC}, {HB_FUNCNAME( QACTION )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QMENUBAR )

HB_FUNC( QMENUBAR )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QMenuBar ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QMenuBar, new QMenuBar( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIONAT )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  actionAt ( const QPoint & pt ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pt = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->actionAt( pt ), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIONGEOMETRY )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QRect  actionGeometry ( QAction * act ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_menuBar->actionGeometry( static_cast<QAction *>( qth_par_QthObject( 1 ) ) ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIVEACTION )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  activeAction () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->activeAction(), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDACTION )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  addAction ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->addAction( text ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QAction *  addAction ( const QString & text, const QObject * receiver, const char * member )
         */
        if( ( hb_pcount() == 3 ) && qth_IsString( 1 ) && qth_IsObject( 2, "QObject" ) && qth_Is( 3, HB_IT_STRING ) )
        {
            QString text =  qth_par_QString( 1 );
            const QObject  * receiver = static_cast<QObject *>( qth_par_QthObject( 2 ) );
            const char * member = hb_parc( 3 );
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->addAction( text, receiver, member ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : void  addAction ( QAction * action )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_menuBar->addAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDMENU )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  addMenu ( QMenu * menu )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMenu" ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->addMenu( static_cast<QMenu *>( qth_par_QthObject( 1 ) ) ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QMenu *  addMenu ( const QString & title )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString title =  qth_par_QString( 1 );
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->addMenu( title ), "QMenu" );
            return;
        }
        /*
         * _public_functions_ : QMenu *  addMenu ( const QIcon & icon, const QString & title )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QIcon" ) && qth_IsString( 2 ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            QString title =  qth_par_QString( 2 );
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->addMenu( icon, title ), "QMenu" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSEPARATOR )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  addSeparator ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->addSeparator(), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_menuBar->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CORNERWIDGET )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QWidget *  cornerWidget ( Qt::Corner corner = Qt::TopRightCorner ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::Corner", QTH_DEFAULT ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->cornerWidget( (Qt::Corner) qth_par_IntType( 1, Qt::TopRightCorner ) ), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DEFAULTACTION )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
#if WindowsMobile
        /*
         * _public_functions_ : QAction *  defaultAction () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->defaultAction(), "QAction" );
            return;
        }
#endif  /* WindowsMobile */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTMENU )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  insertMenu ( QAction * before, QMenu * menu )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QAction" ) && qth_IsObject( 2, "QMenu" ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->insertMenu( static_cast<QAction *>( qth_par_QthObject( 1 ) ), static_cast<QMenu *>( qth_par_QthObject( 2 ) ) ), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTSEPARATOR )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : QAction *  insertSeparator ( QAction * before )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menuBar->insertSeparator( static_cast<QAction *>( qth_par_QthObject( 1 ) ) ), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISDEFAULTUP )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : bool  isDefaultUp () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_menuBar->isDefaultUp() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNATIVEMENUBAR )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : bool  isNativeMenuBar () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_menuBar->isNativeMenuBar() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACTIVEACTION )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : void  setActiveAction ( QAction * act )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_menuBar->setActiveAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCORNERWIDGET )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : void  setCornerWidget ( QWidget * widget, Qt::Corner corner = Qt::TopRightCorner )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsIntType( 2, "Qt::Corner", QTH_DEFAULT ) )
        {
            p_menuBar->setCornerWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), (Qt::Corner) qth_par_IntType( 2, Qt::TopRightCorner ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDEFAULTACTION )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
#if WindowsMobile
        /*
         * _public_functions_ : void  setDefaultAction ( QAction * act )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_menuBar->setDefaultAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
#endif  /* WindowsMobile */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDEFAULTUP )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : void  setDefaultUp ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_menuBar->setDefaultUp( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETNATIVEMENUBAR )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_functions_ : void  setNativeMenuBar ( bool nativeMenuBar )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_menuBar->setNativeMenuBar( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHTFORWIDTH )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _reimplemented_public_functions_ : virtual int  heightForWidth ( int ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_menuBar->heightForWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_menuBar->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_menuBar->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVISIBLE )
{
    QMenuBar* p_menuBar = static_cast<QMenuBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menuBar )
    {
        /*
         * _public_slots_ : virtual void  setVisible ( bool visible )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_menuBar->setVisible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"             , HB_FUNCNAME( NEW              ) );
    hb_clsAdd( uiClass, "ACTIONAT"        , HB_FUNCNAME( ACTIONAT         ) );
    hb_clsAdd( uiClass, "ACTIONGEOMETRY"  , HB_FUNCNAME( ACTIONGEOMETRY   ) );
    hb_clsAdd( uiClass, "ACTIVEACTION"    , HB_FUNCNAME( ACTIVEACTION     ) );
    hb_clsAdd( uiClass, "ADDACTION"       , HB_FUNCNAME( ADDACTION        ) );
    hb_clsAdd( uiClass, "ADDMENU"         , HB_FUNCNAME( ADDMENU          ) );
    hb_clsAdd( uiClass, "ADDSEPARATOR"    , HB_FUNCNAME( ADDSEPARATOR     ) );
    hb_clsAdd( uiClass, "CLEAR"           , HB_FUNCNAME( CLEAR            ) );
    hb_clsAdd( uiClass, "CORNERWIDGET"    , HB_FUNCNAME( CORNERWIDGET     ) );
    hb_clsAdd( uiClass, "DEFAULTACTION"   , HB_FUNCNAME( DEFAULTACTION    ) );
    hb_clsAdd( uiClass, "INSERTMENU"      , HB_FUNCNAME( INSERTMENU       ) );
    hb_clsAdd( uiClass, "INSERTSEPARATOR" , HB_FUNCNAME( INSERTSEPARATOR  ) );
    hb_clsAdd( uiClass, "ISDEFAULTUP"     , HB_FUNCNAME( ISDEFAULTUP      ) );
    hb_clsAdd( uiClass, "ISNATIVEMENUBAR" , HB_FUNCNAME( ISNATIVEMENUBAR  ) );
    hb_clsAdd( uiClass, "SETACTIVEACTION" , HB_FUNCNAME( SETACTIVEACTION  ) );
    hb_clsAdd( uiClass, "SETCORNERWIDGET" , HB_FUNCNAME( SETCORNERWIDGET  ) );
    hb_clsAdd( uiClass, "SETDEFAULTACTION", HB_FUNCNAME( SETDEFAULTACTION ) );
    hb_clsAdd( uiClass, "SETDEFAULTUP"    , HB_FUNCNAME( SETDEFAULTUP     ) );
    hb_clsAdd( uiClass, "SETNATIVEMENUBAR", HB_FUNCNAME( SETNATIVEMENUBAR ) );
    hb_clsAdd( uiClass, "HEIGHTFORWIDTH"  , HB_FUNCNAME( HEIGHTFORWIDTH   ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT" , HB_FUNCNAME( MINIMUMSIZEHINT  ) );
    hb_clsAdd( uiClass, "SIZEHINT"        , HB_FUNCNAME( SIZEHINT         ) );
    hb_clsAdd( uiClass, "SETVISIBLE"      , HB_FUNCNAME( SETVISIBLE       ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
