/*
 * $Id: qthQTime.wip 128 2011-04-14 15:49:46Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QTime>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTIME );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTIME )
{ "QTIME", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTIME )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTIME )

HB_FUNC( QTIME )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QTime ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QTime, new QTime() );
        return;
    }
    /*
     * _public_functions_ : QTime ( int h, int m, int s = 0, int ms = 0 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int s = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : 0;
        int ms = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 0;
        qth_itemPushReturn( QtH::QTime, new QTime( hb_parni( 1 ), hb_parni( 2 ), s, ms ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDMSECS )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : QTime  addMSecs ( int ms ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_time->addMSecs( hb_parni( 1 ) ) ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSECS )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : QTime  addSecs ( int s ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_time->addSecs( hb_parni( 1 ) ) ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ELAPSED )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  elapsed () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_time->elapsed() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HOUR )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  hour () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_time->hour() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_time->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTIME_ISVALID )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : bool  isValid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_time->isValid() == true );
            return;
        }
    }
    /*
     * _static_public_members_ : bool  isValid ( int h, int m, int s, int ms = 0 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int ms = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 0;
        hb_retl( QTime::isValid( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), ms ) == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINUTE )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  minute () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_time->minute() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MSEC )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  msec () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_time->msec() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MSECSTO )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  msecsTo ( const QTime & t ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
        {
            const QTime & t = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            hb_retni( p_time->msecsTo( t ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESTART )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  restart ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_time->restart() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SECOND )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  second () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_time->second() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SECSTO )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : int  secsTo ( const QTime & t ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
        {
            const QTime & t = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            hb_retni( p_time->secsTo( t ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHMS )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : bool  setHMS ( int h, int m, int s, int ms = 0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int ms = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 0;
            hb_retl( p_time->setHMS( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), ms ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( START )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : void  start ()
         */
        if( hb_pcount() == 0 )
        {
            p_time->start();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSTRING )
{
    QTime* p_time = static_cast<QTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_time )
    {
        /*
         * _public_functions_ : QString  toString ( const QString & format ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString format =  qth_par_QString( 1 );
            qth_ret_QString( p_time->toString( format ) );
            return;
        }
        /*
         * _public_functions_ : QString  toString ( Qt::DateFormat format = Qt::TextDate ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::DateFormat", QTH_DEFAULT ) )
        {
            qth_ret_QString( p_time->toString( (Qt::DateFormat) qth_par_IntType( 1, Qt::TextDate ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTIME_CURRENTTIME )
{
    /*
     * _static_public_members_ : QTime  currentTime ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushNewReturn( QtH::QTime, new QTime( QTime::currentTime() ), "QTime" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTIME_FROMSTRING )
{
    /*
     * _static_public_members_ : QTime  fromString ( const QString & string, Qt::DateFormat format = Qt::TextDate )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_IsIntType( 2, "Qt::DateFormat", QTH_DEFAULT ) )
    {
        QString string =  qth_par_QString( 1 );
        qth_itemPushNewReturn( QtH::QTime, new QTime( QTime::fromString( string, (Qt::DateFormat) qth_par_IntType( 2, Qt::TextDate ) ) ), "QTime" );
        return;
    }
    /*
     * _static_public_members_ : QTime  fromString ( const QString & string, const QString & format )
     */
    if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsString( 2 ) )
    {
        QString string =  qth_par_QString( 1 );
        QString format =  qth_par_QString( 2 );
        qth_itemPushNewReturn( QtH::QTime, new QTime( QTime::fromString( string, format ) ), "QTime" );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"        , HB_FUNCNAME( NEW               ) );
    hb_clsAdd( uiClass, "ADDMSECS"   , HB_FUNCNAME( ADDMSECS          ) );
    hb_clsAdd( uiClass, "ADDSECS"    , HB_FUNCNAME( ADDSECS           ) );
    hb_clsAdd( uiClass, "ELAPSED"    , HB_FUNCNAME( ELAPSED           ) );
    hb_clsAdd( uiClass, "HOUR"       , HB_FUNCNAME( HOUR              ) );
    hb_clsAdd( uiClass, "ISNULL"     , HB_FUNCNAME( ISNULL            ) );
    hb_clsAdd( uiClass, "ISVALID"    , HB_FUNCNAME( QTIME_ISVALID     ) );
    hb_clsAdd( uiClass, "MINUTE"     , HB_FUNCNAME( MINUTE            ) );
    hb_clsAdd( uiClass, "MSEC"       , HB_FUNCNAME( MSEC              ) );
    hb_clsAdd( uiClass, "MSECSTO"    , HB_FUNCNAME( MSECSTO           ) );
    hb_clsAdd( uiClass, "RESTART"    , HB_FUNCNAME( RESTART           ) );
    hb_clsAdd( uiClass, "SECOND"     , HB_FUNCNAME( SECOND            ) );
    hb_clsAdd( uiClass, "SECSTO"     , HB_FUNCNAME( SECSTO            ) );
    hb_clsAdd( uiClass, "SETHMS"     , HB_FUNCNAME( SETHMS            ) );
    hb_clsAdd( uiClass, "START"      , HB_FUNCNAME( START             ) );
    hb_clsAdd( uiClass, "TOSTRING"   , HB_FUNCNAME( TOSTRING          ) );
    hb_clsAdd( uiClass, "CURRENTTIME", HB_FUNCNAME( QTIME_CURRENTTIME ) );
    hb_clsAdd( uiClass, "FROMSTRING" , HB_FUNCNAME( QTIME_FROMSTRING  ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
