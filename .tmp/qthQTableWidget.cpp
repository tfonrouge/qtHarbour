/*
 * $Id: qthQTableWidget.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QTableWidget>

#define DragDropMode                            QAbstractItemView::DragDropMode
#define EditTrigger                             QAbstractItemView::EditTrigger
#define EditTriggers                            QAbstractItemView::EditTriggers
#define ScrollHint                              QAbstractItemView::ScrollHint
#define EnsureVisible                           QAbstractItemView::EnsureVisible
#define PositionAtTop                           QAbstractItemView::PositionAtTop
#define PositionAtBottom                        QAbstractItemView::PositionAtBottom
#define PositionAtCenter                        QAbstractItemView::PositionAtCenter
#define ScrollMode                              QAbstractItemView::ScrollMode
#define SelectionBehavior                       QAbstractItemView::SelectionBehavior
#define SelectionMode                           QAbstractItemView::SelectionMode
/*
 * Wip: Dump Section INIT
 */

#include <QStandardItem>
/*
 * Wip: Dump Section END
 */


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTABLEWIDGET );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTABLEVIEW );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QTABLEWIDGETITEM ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTABLEWIDGET )
{ "QTABLEWIDGET", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTABLEWIDGET )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTABLEVIEW", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTABLEVIEW ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QTABLEWIDGETITEM", {HB_FS_PUBLIC}, {HB_FUNCNAME( QTABLEWIDGETITEM )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTABLEWIDGET )

HB_FUNC( QTABLEWIDGET )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QTableWidget ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QTableWidget, new QTableWidget( parent ) );
        return;
    }
    /*
     * _public_functions_ : QTableWidget ( int rows, int columns, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 3, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 3 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QTableWidget, new QTableWidget( hb_parni( 1 ), hb_parni( 2 ), parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CELLWIDGET )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QWidget *  cellWidget ( int row, int column ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->cellWidget( hb_parni( 1 ), hb_parni( 2 ) ), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLOSEPERSISTENTEDITOR )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  closePersistentEditor ( QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            p_tableWidget->closePersistentEditor( static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLUMN )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  column ( const QTableWidgetItem * item ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            const QTableWidgetItem  * item = static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) );
            hb_retni( p_tableWidget->column( item ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLUMNCOUNT )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  columnCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tableWidget->columnCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTCOLUMN )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  currentColumn () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tableWidget->currentColumn() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  currentItem () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->currentItem(), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTROW )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  currentRow () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tableWidget->currentRow() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EDITITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  editItem ( QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            p_tableWidget->editItem( static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FINDITEMS )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QList<QTableWidgetItem *>  findItems ( const QString & text, Qt::MatchFlags flags ) const
         */
        if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsIntType( 2, "Qt::MatchFlags" ) )
        {
            // QString text =  qth_par_QString( 1 );
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QTableWidgetItem *>( p_tableWidget->findItems( text, (Qt::MatchFlags)  qth_par_IntType( 2 ) ) ), "QList<QTableWidgetItem *>" );
            qth_errRT_UNKNOWNOBJ( "QTableWidget::findItems", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HORIZONTALHEADERITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  horizontalHeaderItem ( int column ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->horizontalHeaderItem( hb_parni( 1 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  item ( int row, int column ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->item( hb_parni( 1 ), hb_parni( 2 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMAT )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  itemAt ( const QPoint & point ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & point = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->itemAt( point ), "QTableWidgetItem" );
            return;
        }
        /*
         * _public_functions_ : QTableWidgetItem *  itemAt ( int ax, int ay ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->itemAt( hb_parni( 1 ), hb_parni( 2 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMPROTOTYPE )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : const QTableWidgetItem *  itemPrototype () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->itemPrototype(), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OPENPERSISTENTEDITOR )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  openPersistentEditor ( QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            p_tableWidget->openPersistentEditor( static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVECELLWIDGET )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  removeCellWidget ( int row, int column )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_tableWidget->removeCellWidget( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROW )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  row ( const QTableWidgetItem * item ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            const QTableWidgetItem  * item = static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) );
            hb_retni( p_tableWidget->row( item ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROWCOUNT )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  rowCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tableWidget->rowCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTEDITEMS )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QList<QTableWidgetItem *>  selectedItems ()
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QTableWidgetItem *>( p_tableWidget->selectedItems() ), "QList<QTableWidgetItem *>" );
            qth_errRT_UNKNOWNOBJ( "QTableWidget::selectedItems", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTEDRANGES )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QList<QTableWidgetSelectionRange>  selectedRanges () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QTableWidgetSelectionRange>( p_tableWidget->selectedRanges() ), "QList<QTableWidgetSelectionRange>" );
            qth_errRT_UNKNOWNOBJ( "QTableWidget::selectedRanges", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCELLWIDGET )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setCellWidget ( int row, int column, QWidget * widget )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsObject( 3, "QWidget" ) )
        {
            p_tableWidget->setCellWidget( hb_parni( 1 ), hb_parni( 2 ), static_cast<QWidget *>( qth_par_QthObject( 3 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLUMNCOUNT )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setColumnCount ( int columns )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableWidget->setColumnCount( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTCELL )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setCurrentCell ( int row, int column )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_tableWidget->setCurrentCell( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setCurrentCell ( int row, int column, QItemSelectionModel::SelectionFlags command )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsIntType( 3, "QItemSelectionModel::SelectionFlags" ) )
        {
            p_tableWidget->setCurrentCell( hb_parni( 1 ), hb_parni( 2 ), (QItemSelectionModel::SelectionFlags)  qth_par_IntType( 3 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setCurrentItem ( QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            p_tableWidget->setCurrentItem( static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setCurrentItem ( QTableWidgetItem * item, QItemSelectionModel::SelectionFlags command )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QTableWidgetItem" ) && qth_IsIntType( 2, "QItemSelectionModel::SelectionFlags" ) )
        {
            p_tableWidget->setCurrentItem( static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) ), (QItemSelectionModel::SelectionFlags)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHORIZONTALHEADERITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setHorizontalHeaderItem ( int column, QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QTableWidgetItem" ) )
        {
            p_tableWidget->setHorizontalHeaderItem( hb_parni( 1 ), static_cast<QTableWidgetItem *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHORIZONTALHEADERLABELS )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setHorizontalHeaderLabels ( const QStringList & labels )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QStringList" ) )
        {
            const QStringList & labels = * static_cast<QStringList *>( qth_par_QthObject( 1 ) );
            p_tableWidget->setHorizontalHeaderLabels( labels );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setItem ( int row, int column, QTableWidgetItem * item /Transfer/ )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsObject( 3, "QTableWidgetItem" ) )
        {
            p_tableWidget->setItem( hb_parni( 1 ), hb_parni( 2 ), static_cast<QTableWidgetItem *>( qth_par_QthObject( 3, QTHI_TRANSFER  ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETITEMPROTOTYPE )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setItemPrototype ( const QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            const QTableWidgetItem  * item = static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) );
            p_tableWidget->setItemPrototype( item );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRANGESELECTED )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setRangeSelected ( const QTableWidgetSelectionRange & range, bool select )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QTableWidgetSelectionRange" ) && qth_Is( 2, HB_IT_LOGICAL ) )
        {
            const QTableWidgetSelectionRange & range = * static_cast<QTableWidgetSelectionRange *>( qth_par_QthObject( 1 ) );
            p_tableWidget->setRangeSelected( range, hb_parl( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETROWCOUNT )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setRowCount ( int rows )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableWidget->setRowCount( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVERTICALHEADERITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setVerticalHeaderItem ( int row, QTableWidgetItem * item )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QTableWidgetItem" ) )
        {
            p_tableWidget->setVerticalHeaderItem( hb_parni( 1 ), static_cast<QTableWidgetItem *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVERTICALHEADERLABELS )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  setVerticalHeaderLabels ( const QStringList & labels )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QStringList" ) )
        {
            const QStringList & labels = * static_cast<QStringList *>( qth_par_QthObject( 1 ) );
            p_tableWidget->setVerticalHeaderLabels( labels );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SORTITEMS )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : void  sortItems ( int column, Qt::SortOrder order = Qt::AscendingOrder )
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "Qt::SortOrder", QTH_DEFAULT ) )
        {
            p_tableWidget->sortItems( hb_parni( 1 ), (Qt::SortOrder) qth_par_IntType( 2, Qt::AscendingOrder ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TAKEHORIZONTALHEADERITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  takeHorizontalHeaderItem ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->takeHorizontalHeaderItem( hb_parni( 1 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TAKEITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  takeItem ( int row, int column ) /TransferBack/
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->takeItem( hb_parni( 1 ), hb_parni( 2 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TAKEVERTICALHEADERITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  takeVerticalHeaderItem ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->takeVerticalHeaderItem( hb_parni( 1 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VERTICALHEADERITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QTableWidgetItem *  verticalHeaderItem ( int row ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tableWidget->verticalHeaderItem( hb_parni( 1 ) ), "QTableWidgetItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VISUALCOLUMN )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  visualColumn ( int logicalColumn ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableWidget->visualColumn( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VISUALITEMRECT )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : QRect  visualItemRect ( const QTableWidgetItem * item ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTableWidgetItem" ) )
        {
            const QTableWidgetItem  * item = static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_tableWidget->visualItemRect( item ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VISUALROW )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_functions_ : int  visualRow ( int logicalRow ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableWidget->visualRow( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_tableWidget->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARCONTENTS )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  clearContents ()
         */
        if( hb_pcount() == 0 )
        {
            p_tableWidget->clearContents();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTCOLUMN )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  insertColumn ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableWidget->insertColumn( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTROW )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  insertRow ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableWidget->insertRow( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVECOLUMN )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  removeColumn ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableWidget->removeColumn( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVEROW )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  removeRow ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableWidget->removeRow( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLLTOITEM )
{
    QTableWidget* p_tableWidget = static_cast<QTableWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableWidget )
    {
        /*
         * _public_slots_ : void  scrollToItem ( const QTableWidgetItem * item, QAbstractItemView::ScrollHint hint = EnsureVisible )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QTableWidgetItem" ) && qth_IsIntType( 2, "QAbstractItemView::ScrollHint", QTH_DEFAULT ) )
        {
            const QTableWidgetItem  * item = static_cast<QTableWidgetItem *>( qth_par_QthObject( 1 ) );
            p_tableWidget->scrollToItem( item, (QAbstractItemView::ScrollHint) qth_par_IntType( 2, EnsureVisible ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                      , HB_FUNCNAME( NEW                       ) );
    hb_clsAdd( uiClass, "CELLWIDGET"               , HB_FUNCNAME( CELLWIDGET                ) );
    hb_clsAdd( uiClass, "CLOSEPERSISTENTEDITOR"    , HB_FUNCNAME( CLOSEPERSISTENTEDITOR     ) );
    hb_clsAdd( uiClass, "COLUMN"                   , HB_FUNCNAME( COLUMN                    ) );
    hb_clsAdd( uiClass, "COLUMNCOUNT"              , HB_FUNCNAME( COLUMNCOUNT               ) );
    hb_clsAdd( uiClass, "CURRENTCOLUMN"            , HB_FUNCNAME( CURRENTCOLUMN             ) );
    hb_clsAdd( uiClass, "CURRENTITEM"              , HB_FUNCNAME( CURRENTITEM               ) );
    hb_clsAdd( uiClass, "CURRENTROW"               , HB_FUNCNAME( CURRENTROW                ) );
    hb_clsAdd( uiClass, "EDITITEM"                 , HB_FUNCNAME( EDITITEM                  ) );
    hb_clsAdd( uiClass, "FINDITEMS"                , HB_FUNCNAME( FINDITEMS                 ) );
    hb_clsAdd( uiClass, "HORIZONTALHEADERITEM"     , HB_FUNCNAME( HORIZONTALHEADERITEM      ) );
    hb_clsAdd( uiClass, "ITEM"                     , HB_FUNCNAME( ITEM                      ) );
    hb_clsAdd( uiClass, "ITEMAT"                   , HB_FUNCNAME( ITEMAT                    ) );
    hb_clsAdd( uiClass, "ITEMPROTOTYPE"            , HB_FUNCNAME( ITEMPROTOTYPE             ) );
    hb_clsAdd( uiClass, "OPENPERSISTENTEDITOR"     , HB_FUNCNAME( OPENPERSISTENTEDITOR      ) );
    hb_clsAdd( uiClass, "REMOVECELLWIDGET"         , HB_FUNCNAME( REMOVECELLWIDGET          ) );
    hb_clsAdd( uiClass, "ROW"                      , HB_FUNCNAME( ROW                       ) );
    hb_clsAdd( uiClass, "ROWCOUNT"                 , HB_FUNCNAME( ROWCOUNT                  ) );
    hb_clsAdd( uiClass, "SELECTEDITEMS"            , HB_FUNCNAME( SELECTEDITEMS             ) );
    hb_clsAdd( uiClass, "SELECTEDRANGES"           , HB_FUNCNAME( SELECTEDRANGES            ) );
    hb_clsAdd( uiClass, "SETCELLWIDGET"            , HB_FUNCNAME( SETCELLWIDGET             ) );
    hb_clsAdd( uiClass, "SETCOLUMNCOUNT"           , HB_FUNCNAME( SETCOLUMNCOUNT            ) );
    hb_clsAdd( uiClass, "SETCURRENTCELL"           , HB_FUNCNAME( SETCURRENTCELL            ) );
    hb_clsAdd( uiClass, "SETCURRENTITEM"           , HB_FUNCNAME( SETCURRENTITEM            ) );
    hb_clsAdd( uiClass, "SETHORIZONTALHEADERITEM"  , HB_FUNCNAME( SETHORIZONTALHEADERITEM   ) );
    hb_clsAdd( uiClass, "SETHORIZONTALHEADERLABELS", HB_FUNCNAME( SETHORIZONTALHEADERLABELS ) );
    hb_clsAdd( uiClass, "SETITEM"                  , HB_FUNCNAME( SETITEM                   ) );
    hb_clsAdd( uiClass, "SETITEMPROTOTYPE"         , HB_FUNCNAME( SETITEMPROTOTYPE          ) );
    hb_clsAdd( uiClass, "SETRANGESELECTED"         , HB_FUNCNAME( SETRANGESELECTED          ) );
    hb_clsAdd( uiClass, "SETROWCOUNT"              , HB_FUNCNAME( SETROWCOUNT               ) );
    hb_clsAdd( uiClass, "SETVERTICALHEADERITEM"    , HB_FUNCNAME( SETVERTICALHEADERITEM     ) );
    hb_clsAdd( uiClass, "SETVERTICALHEADERLABELS"  , HB_FUNCNAME( SETVERTICALHEADERLABELS   ) );
    hb_clsAdd( uiClass, "SORTITEMS"                , HB_FUNCNAME( SORTITEMS                 ) );
    hb_clsAdd( uiClass, "TAKEHORIZONTALHEADERITEM" , HB_FUNCNAME( TAKEHORIZONTALHEADERITEM  ) );
    hb_clsAdd( uiClass, "TAKEITEM"                 , HB_FUNCNAME( TAKEITEM                  ) );
    hb_clsAdd( uiClass, "TAKEVERTICALHEADERITEM"   , HB_FUNCNAME( TAKEVERTICALHEADERITEM    ) );
    hb_clsAdd( uiClass, "VERTICALHEADERITEM"       , HB_FUNCNAME( VERTICALHEADERITEM        ) );
    hb_clsAdd( uiClass, "VISUALCOLUMN"             , HB_FUNCNAME( VISUALCOLUMN              ) );
    hb_clsAdd( uiClass, "VISUALITEMRECT"           , HB_FUNCNAME( VISUALITEMRECT            ) );
    hb_clsAdd( uiClass, "VISUALROW"                , HB_FUNCNAME( VISUALROW                 ) );
    hb_clsAdd( uiClass, "CLEAR"                    , HB_FUNCNAME( CLEAR                     ) );
    hb_clsAdd( uiClass, "CLEARCONTENTS"            , HB_FUNCNAME( CLEARCONTENTS             ) );
    hb_clsAdd( uiClass, "INSERTCOLUMN"             , HB_FUNCNAME( INSERTCOLUMN              ) );
    hb_clsAdd( uiClass, "INSERTROW"                , HB_FUNCNAME( INSERTROW                 ) );
    hb_clsAdd( uiClass, "REMOVECOLUMN"             , HB_FUNCNAME( REMOVECOLUMN              ) );
    hb_clsAdd( uiClass, "REMOVEROW"                , HB_FUNCNAME( REMOVEROW                 ) );
    hb_clsAdd( uiClass, "SCROLLTOITEM"             , HB_FUNCNAME( SCROLLTOITEM              ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
