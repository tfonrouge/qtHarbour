/*
 * $Id: qthQImage.wip 139 2011-07-23 05:56:29Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QImage>

#define Format                                  QImage::Format
#define InvertMode                              QImage::InvertMode
#define InvertRgb                               QImage::InvertRgb
#define InvertRgba                              QImage::InvertRgba

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QIMAGE );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QPAINTDEVICE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QPOINT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QIMAGE )
{ "QIMAGE", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QIMAGE )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QPAINTDEVICE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QPAINTDEVICE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QPOINT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QPOINT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QIMAGE )

HB_FUNC( QIMAGE )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QImage ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QImage, new QImage() );
        return;
    }
    /*
     * _public_functions_ : QImage ( const QSize & size, Format format )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QSize" ) && qth_IsIntType( 2, "Format" ) )
    {
        const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QImage, new QImage( size, (Format)  qth_par_IntType( 2 ) ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( int width, int height, Format format )
     */
    if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsIntType( 3, "Format" ) )
    {
        qth_itemPushReturn( QtH::QImage, new QImage( hb_parni( 1 ), hb_parni( 2 ), (Format)  qth_par_IntType( 3 ) ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( uchar * data, int width, int height, Format format )
     */
    if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_IsIntType( 4, "Format" ) )
    {
        uchar * data = (uchar*)  hb_parc( 1 );
        qth_itemPushReturn( QtH::QImage, new QImage( data, hb_parni( 2 ), hb_parni( 3 ), (Format)  qth_par_IntType( 4 ) ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( const uchar * data, int width, int height, Format format )
     */
    if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_IsIntType( 4, "Format" ) )
    {
        const uchar * data = (uchar*)  hb_parc( 1 );
        qth_itemPushReturn( QtH::QImage, new QImage( data, hb_parni( 2 ), hb_parni( 3 ), (Format)  qth_par_IntType( 4 ) ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( uchar * data, int width, int height, int bytesPerLine, Format format )
     */
    if( ( hb_pcount() == 5 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) && qth_IsIntType( 5, "Format" ) )
    {
        uchar * data = (uchar*)  hb_parc( 1 );
        qth_itemPushReturn( QtH::QImage, new QImage( data, hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), (Format)  qth_par_IntType( 5 ) ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( const uchar * data, int width, int height, int bytesPerLine, Format format )
     */
    if( ( hb_pcount() == 5 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) && qth_IsIntType( 5, "Format" ) )
    {
        const uchar * data = (uchar*)  hb_parc( 1 );
        qth_itemPushReturn( QtH::QImage, new QImage( data, hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), (Format)  qth_par_IntType( 5 ) ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( const char * const[] xpm )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        const char *  xpm = hb_parc( 1 );
        qth_itemPushReturn( QtH::QImage, new QImage( xpm ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( const QString & fileName, const char * format = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
    {
        QString fileName =  qth_par_QString( 1 );
        const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
        qth_itemPushReturn( QtH::QImage, new QImage( fileName, format ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( const char * fileName, const char * format = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
    {
        const char * fileName = hb_parc( 1 );
        const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
        qth_itemPushReturn( QtH::QImage, new QImage( fileName, format ) );
        return;
    }
    /*
     * _public_functions_ : QImage ( const QImage & image )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QImage" ) )
    {
        const QImage & image = * static_cast<QImage *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QImage, new QImage( image ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALLGRAY )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  allGray () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_image->allGray() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BITPLANECOUNT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  bitPlaneCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->bitPlaneCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BITS )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
#if Implemented
        /*
         * _public_functions_ : uchar *  bits ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retc( p_image->bits() );
            return;
        }
#endif  /* Implemented */
#if Implemented
        /*
         * _public_functions_ : const uchar *  bits () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retc( p_image->bits() );
            return;
        }
#endif  /* Implemented */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BYTECOUNT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  byteCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->byteCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BYTESPERLINE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  bytesPerLine () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->bytesPerLine() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CACHEKEY )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : qint64  cacheKey () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnll( p_image->cacheKey() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLOR )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QRgb  color ( int i ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_image->color( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLORCOUNT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  colorCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->colorCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLORTABLE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QVector<QRgb>  colorTable () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QVector'
            // qth_itemPushNewReturn( QtH::QVector, new QVector<QRgb>( p_image->colorTable() ), "QVector<QRgb>" );
            qth_errRT_UNKNOWNOBJ( "QImage::colorTable", "Don't know how to return type 'QVector'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONSTBITS )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
#if Implemented
        /*
         * _public_functions_ : const uchar *  constBits () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retc( p_image->constBits() );
            return;
        }
#endif  /* Implemented */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONSTSCANLINE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
#if Implemented
        /*
         * _public_functions_ : const uchar *  constScanLine ( int i ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retc( p_image->constScanLine( hb_parni( 1 ) ) );
            return;
        }
#endif  /* Implemented */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONVERTTOFORMAT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  convertToFormat ( Format format, Qt::ImageConversionFlags flags = Qt::AutoColor ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "Format" ) && qth_IsIntType( 2, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->convertToFormat( (Format)  qth_par_IntType( 1 ), (Qt::ImageConversionFlags) qth_par_IntType( 2, Qt::AutoColor ) ) ), "QImage" );
            return;
        }
        /*
         * _public_functions_ : QImage  convertToFormat ( Format format, const QVector<QRgb> & colorTable, Qt::ImageConversionFlags flags = Qt::AutoColor ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsIntType( 1, "Format" ) && qth_IsObject( 2, "QVector" ) && qth_IsIntType( 3, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            const QVector<QRgb> & colorTable = * static_cast<QVector<QRgb> *>( qth_par_QthObject( 2 ) );
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->convertToFormat( (Format)  qth_par_IntType( 1 ), colorTable, (Qt::ImageConversionFlags) qth_par_IntType( 3, Qt::AutoColor ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COPY )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  copy ( const QRect & rectangle = QRect() ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QRect", QTH_DEFAULT ) )
        {
            const QRect& rectangle = hb_param( 1, HB_IT_OBJECT ) ? qth_parConstRef<QRect>( 1 ) : QRect();
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->copy( rectangle ) ), "QImage" );
            return;
        }
        /*
         * _public_functions_ : QImage  copy ( int x, int y, int width, int height ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->copy( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATEALPHAMASK )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  createAlphaMask ( Qt::ImageConversionFlags flags = Qt::AutoColor ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::ImageConversionFlags", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->createAlphaMask( (Qt::ImageConversionFlags) qth_par_IntType( 1, Qt::AutoColor ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATEHEURISTICMASK )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  createHeuristicMask ( bool clipTight = true ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            bool clipTight = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : true;
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->createHeuristicMask( clipTight ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATEMASKFROMCOLOR )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  createMaskFromColor ( QRgb color, Qt::MaskMode mode = Qt::MaskInColor ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "QRgb" ) && qth_IsIntType( 2, "Qt::MaskMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->createMaskFromColor( (QRgb)  qth_par_IntType( 1 ), (Qt::MaskMode) qth_par_IntType( 2, Qt::MaskInColor ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DEPTH )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  depth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->depth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOTSPERMETERX )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  dotsPerMeterX () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->dotsPerMeterX() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOTSPERMETERY )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  dotsPerMeterY () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->dotsPerMeterY() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FILL )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  fill ( uint pixelValue )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_image->fill( (uint)  hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FORMAT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : Format  format () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->format() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASALPHACHANNEL )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  hasAlphaChannel () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_image->hasAlphaChannel() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  height () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->height() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INVERTPIXELS )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  invertPixels ( InvertMode mode = InvertRgb )
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "InvertMode", QTH_DEFAULT ) )
        {
            p_image->invertPixels( (InvertMode) qth_par_IntType( 1, InvertRgb ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISGRAYSCALE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  isGrayscale () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_image->isGrayscale() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_image->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOAD )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  load ( const QString & fileName, const char * format = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
        {
            QString fileName =  qth_par_QString( 1 );
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            hb_retl( p_image->load( fileName, format ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  load ( QIODevice * device, const char * format )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QIODevice" ) && qth_Is( 2, HB_IT_STRING ) )
        {
            const char * format = hb_parc( 2 );
            hb_retl( p_image->load( static_cast<QIODevice *>( qth_par_QthObject( 1 ) ), format ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOADFROMDATA )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  loadFromData ( const uchar * data, int len, const char * format = 0 )
         */
        if( ( hb_pcount() <= 3 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_STRING, QTH_DEFAULT ) )
        {
            const uchar * data = (uchar*)  hb_parc( 1 );
            const char* format = hb_param( 3, HB_IT_STRING ) ? hb_parc( 3 ) : 0;
            hb_retl( p_image->loadFromData( data, hb_parni( 2 ), format ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  loadFromData ( const QByteArray & data, const char * format = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QByteArray" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
        {
            const QByteArray & data = * static_cast<QByteArray *>( qth_par_QthObject( 1 ) );
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            hb_retl( p_image->loadFromData( data, format ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MIRRORED )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  mirrored ( bool horizontal = false, bool vertical = true ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_DEFAULT ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            bool horizontal = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : false;
            bool vertical = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : true;
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->mirrored( horizontal, vertical ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OFFSET )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QPoint  offset () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_image->offset() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PIXEL )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QRgb  pixel ( const QPoint & position ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            hb_retni( p_image->pixel( position ) );
            return;
        }
        /*
         * _public_functions_ : QRgb  pixel ( int x, int y ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retni( p_image->pixel( hb_parni( 1 ), hb_parni( 2 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PIXELINDEX )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  pixelIndex ( const QPoint & position ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            hb_retni( p_image->pixelIndex( position ) );
            return;
        }
        /*
         * _public_functions_ : int  pixelIndex ( int x, int y ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retni( p_image->pixelIndex( hb_parni( 1 ), hb_parni( 2 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RECT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QRect  rect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_image->rect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RGBSWAPPED )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  rgbSwapped () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->rgbSwapped() ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SAVE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  save ( const QString & fileName, const char * format = 0, int quality = -1 ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            QString fileName =  qth_par_QString( 1 );
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            int quality = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : -1;
            hb_retl( p_image->save( fileName, format, quality ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  save ( QIODevice * device, const char * format = 0, int quality = -1 ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QIODevice" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
            int quality = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : -1;
            hb_retl( p_image->save( static_cast<QIODevice *>( qth_par_QthObject( 1 ) ), format, quality ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCALED )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  scaled ( const QSize & size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QSize" ) && qth_IsIntType( 2, "Qt::AspectRatioMode", QTH_DEFAULT ) && qth_IsIntType( 3, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->scaled( size, (Qt::AspectRatioMode) qth_par_IntType( 2, Qt::IgnoreAspectRatio ), (Qt::TransformationMode) qth_par_IntType( 3, Qt::FastTransformation ) ) ), "QImage" );
            return;
        }
        /*
         * _public_functions_ : QImage  scaled ( int width, int height, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_IsIntType( 3, "Qt::AspectRatioMode", QTH_DEFAULT ) && qth_IsIntType( 4, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->scaled( hb_parni( 1 ), hb_parni( 2 ), (Qt::AspectRatioMode) qth_par_IntType( 3, Qt::IgnoreAspectRatio ), (Qt::TransformationMode) qth_par_IntType( 4, Qt::FastTransformation ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCALEDTOHEIGHT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  scaledToHeight ( int height, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->scaledToHeight( hb_parni( 1 ), (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCALEDTOWIDTH )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QImage  scaledToWidth ( int width, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->scaledToWidth( hb_parni( 1 ), (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCANLINE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
#if Implemented
        /*
         * _public_functions_ : uchar *  scanLine ( int i )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retc( p_image->scanLine( hb_parni( 1 ) ) );
            return;
        }
#endif  /* Implemented */
#if Implemented
        /*
         * _public_functions_ : const uchar *  scanLine ( int i ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retc( p_image->scanLine( hb_parni( 1 ) ) );
            return;
        }
#endif  /* Implemented */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLOR )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setColor ( int index, QRgb colorValue )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "QRgb" ) )
        {
            p_image->setColor( hb_parni( 1 ), (QRgb)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLORCOUNT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setColorCount ( int colorCount )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_image->setColorCount( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLORTABLE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setColorTable ( const QVector<QRgb> colors )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QVector" ) )
        {
            const QVector<QRgb> colors = * static_cast<QVector<QRgb> *>( qth_par_QthObject( 1 ) );
            p_image->setColorTable( colors );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOTSPERMETERX )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setDotsPerMeterX ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_image->setDotsPerMeterX( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOTSPERMETERY )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setDotsPerMeterY ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_image->setDotsPerMeterY( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETOFFSET )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setOffset ( const QPoint & offset )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & offset = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_image->setOffset( offset );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETPIXEL )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setPixel ( const QPoint & position, uint index_or_rgb )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QPoint" ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_image->setPixel( position, (uint)  hb_parni( 2 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setPixel ( int x, int y, uint index_or_rgb )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
        {
            p_image->setPixel( hb_parni( 1 ), hb_parni( 2 ), (uint)  hb_parni( 3 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : void  setText ( const QString & key, const QString & text )
         */
        if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsString( 2 ) )
        {
            QString key =  qth_par_QString( 1 );
            QString text =  qth_par_QString( 2 );
            p_image->setText( key, text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZE )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QSize  size () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_image->size() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXT )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QString  text ( const QString & key = QString() ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsString( 1, QTH_DEFAULT ) )
        {
            const QString& key = hb_param( 1, HB_IT_STRING | HB_IT_OBJECT ) ?  qth_par_QString( 1 ) : QString();
            qth_ret_QString( p_image->text( key ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTKEYS )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : QStringList  textKeys () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QStringList'
            // qth_itemPushNewReturn( QtH::QStringList, new QStringList( p_image->textKeys() ), "QStringList" );
            qth_errRT_UNKNOWNOBJ( "QImage::textKeys", "Don't know how to return type 'QStringList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TRANSFORMED )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
#if OBSOLETE
        /*
         * _public_functions_ : QImage  transformed ( const QMatrix & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QMatrix" ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            const QMatrix & matrix = * static_cast<QMatrix *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->transformed( matrix, (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QImage" );
            return;
        }
#endif  /* OBSOLETE */
        /*
         * _public_functions_ : QImage  transformed ( const QTransform & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QTransform" ) && qth_IsIntType( 2, "Qt::TransformationMode", QTH_DEFAULT ) )
        {
            const QTransform & matrix = * static_cast<QTransform *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_image->transformed( matrix, (Qt::TransformationMode) qth_par_IntType( 2, Qt::FastTransformation ) ) ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALID )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : bool  valid ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            hb_retl( p_image->valid( pos ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  valid ( int x, int y ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retl( p_image->valid( hb_parni( 1 ), hb_parni( 2 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDTH )
{
    QImage* p_image = static_cast<QImage *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_image )
    {
        /*
         * _public_functions_ : int  width () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_image->width() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QIMAGE_FROMDATA )
{
    /*
     * _static_public_members_ : QImage  fromData ( const uchar * data, int size, const char * format = 0 )
     */
    if( ( hb_pcount() <= 3 ) && qth_Is( 1, HB_IT_STRING ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_STRING, QTH_DEFAULT ) )
    {
        const uchar * data = (uchar*)  hb_parc( 1 );
        const char* format = hb_param( 3, HB_IT_STRING ) ? hb_parc( 3 ) : 0;
        qth_itemPushNewReturn( QtH::QImage, new QImage( QImage::fromData( data, hb_parni( 2 ), format ) ), "QImage" );
        return;
    }
    /*
     * _static_public_members_ : QImage  fromData ( const QByteArray & data, const char * format = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QByteArray" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
    {
        const QByteArray & data = * static_cast<QByteArray *>( qth_par_QthObject( 1 ) );
        const char* format = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
        qth_itemPushNewReturn( QtH::QImage, new QImage( QImage::fromData( data, format ) ), "QImage" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QIMAGE_TRUEMATRIX )
{
#if OBSOLETE
    /*
     * _static_public_members_ : QMatrix  trueMatrix ( const QMatrix & matrix, int width, int height )
     */
    if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QMatrix" ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
    {
        // const QMatrix & matrix = * static_cast<QMatrix *>( qth_par_QthObject( 1 ) );
        // ! Don't know how to return type 'QMatrix'
        // qth_itemPushNewReturn( QtH::QMatrix, new QMatrix( QImage::trueMatrix( matrix, hb_parni( 2 ), hb_parni( 3 ) ) ), "QMatrix" );
        qth_errRT_UNKNOWNOBJ( "QImage::trueMatrix", "Don't know how to return type 'QMatrix'" ) ;
        return;
    }
#endif  /* OBSOLETE */
    /*
     * _static_public_members_ : QTransform  trueMatrix ( const QTransform & matrix, int width, int height )
     */
    if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QTransform" ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
    {
        // const QTransform & matrix = * static_cast<QTransform *>( qth_par_QthObject( 1 ) );
        // ! Don't know how to return type 'QTransform'
        // qth_itemPushNewReturn( QtH::QTransform, new QTransform( QImage::trueMatrix( matrix, hb_parni( 2 ), hb_parni( 3 ) ) ), "QTransform" );
        qth_errRT_UNKNOWNOBJ( "QImage::trueMatrix", "Don't know how to return type 'QTransform'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QIMAGE_E_INVERTRGB )
{
    /*
     * _static_public_members_ : InvertRgb
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QImage::InvertMode", "InvertRgb", InvertRgb );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QIMAGE_E_INVERTRGBA )
{
    /*
     * _static_public_members_ : InvertRgba
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QImage::InvertMode", "InvertRgba", InvertRgba );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                , HB_FUNCNAME( NEW                 ) );
    hb_clsAdd( uiClass, "ALLGRAY"            , HB_FUNCNAME( ALLGRAY             ) );
    hb_clsAdd( uiClass, "BITPLANECOUNT"      , HB_FUNCNAME( BITPLANECOUNT       ) );
    hb_clsAdd( uiClass, "BITS"               , HB_FUNCNAME( BITS                ) );
    hb_clsAdd( uiClass, "BYTECOUNT"          , HB_FUNCNAME( BYTECOUNT           ) );
    hb_clsAdd( uiClass, "BYTESPERLINE"       , HB_FUNCNAME( BYTESPERLINE        ) );
    hb_clsAdd( uiClass, "CACHEKEY"           , HB_FUNCNAME( CACHEKEY            ) );
    hb_clsAdd( uiClass, "COLOR"              , HB_FUNCNAME( COLOR               ) );
    hb_clsAdd( uiClass, "COLORCOUNT"         , HB_FUNCNAME( COLORCOUNT          ) );
    hb_clsAdd( uiClass, "COLORTABLE"         , HB_FUNCNAME( COLORTABLE          ) );
    hb_clsAdd( uiClass, "CONSTBITS"          , HB_FUNCNAME( CONSTBITS           ) );
    hb_clsAdd( uiClass, "CONSTSCANLINE"      , HB_FUNCNAME( CONSTSCANLINE       ) );
    hb_clsAdd( uiClass, "CONVERTTOFORMAT"    , HB_FUNCNAME( CONVERTTOFORMAT     ) );
    hb_clsAdd( uiClass, "COPY"               , HB_FUNCNAME( COPY                ) );
    hb_clsAdd( uiClass, "CREATEALPHAMASK"    , HB_FUNCNAME( CREATEALPHAMASK     ) );
    hb_clsAdd( uiClass, "CREATEHEURISTICMASK", HB_FUNCNAME( CREATEHEURISTICMASK ) );
    hb_clsAdd( uiClass, "CREATEMASKFROMCOLOR", HB_FUNCNAME( CREATEMASKFROMCOLOR ) );
    hb_clsAdd( uiClass, "DEPTH"              , HB_FUNCNAME( DEPTH               ) );
    hb_clsAdd( uiClass, "DOTSPERMETERX"      , HB_FUNCNAME( DOTSPERMETERX       ) );
    hb_clsAdd( uiClass, "DOTSPERMETERY"      , HB_FUNCNAME( DOTSPERMETERY       ) );
    hb_clsAdd( uiClass, "FILL"               , HB_FUNCNAME( FILL                ) );
    hb_clsAdd( uiClass, "FORMAT"             , HB_FUNCNAME( FORMAT              ) );
    hb_clsAdd( uiClass, "HASALPHACHANNEL"    , HB_FUNCNAME( HASALPHACHANNEL     ) );
    hb_clsAdd( uiClass, "HEIGHT"             , HB_FUNCNAME( HEIGHT              ) );
    hb_clsAdd( uiClass, "INVERTPIXELS"       , HB_FUNCNAME( INVERTPIXELS        ) );
    hb_clsAdd( uiClass, "ISGRAYSCALE"        , HB_FUNCNAME( ISGRAYSCALE         ) );
    hb_clsAdd( uiClass, "ISNULL"             , HB_FUNCNAME( ISNULL              ) );
    hb_clsAdd( uiClass, "LOAD"               , HB_FUNCNAME( LOAD                ) );
    hb_clsAdd( uiClass, "LOADFROMDATA"       , HB_FUNCNAME( LOADFROMDATA        ) );
    hb_clsAdd( uiClass, "MIRRORED"           , HB_FUNCNAME( MIRRORED            ) );
    hb_clsAdd( uiClass, "OFFSET"             , HB_FUNCNAME( OFFSET              ) );
    hb_clsAdd( uiClass, "PIXEL"              , HB_FUNCNAME( PIXEL               ) );
    hb_clsAdd( uiClass, "PIXELINDEX"         , HB_FUNCNAME( PIXELINDEX          ) );
    hb_clsAdd( uiClass, "RECT"               , HB_FUNCNAME( RECT                ) );
    hb_clsAdd( uiClass, "RGBSWAPPED"         , HB_FUNCNAME( RGBSWAPPED          ) );
    hb_clsAdd( uiClass, "SAVE"               , HB_FUNCNAME( SAVE                ) );
    hb_clsAdd( uiClass, "SCALED"             , HB_FUNCNAME( SCALED              ) );
    hb_clsAdd( uiClass, "SCALEDTOHEIGHT"     , HB_FUNCNAME( SCALEDTOHEIGHT      ) );
    hb_clsAdd( uiClass, "SCALEDTOWIDTH"      , HB_FUNCNAME( SCALEDTOWIDTH       ) );
    hb_clsAdd( uiClass, "SCANLINE"           , HB_FUNCNAME( SCANLINE            ) );
    hb_clsAdd( uiClass, "SETCOLOR"           , HB_FUNCNAME( SETCOLOR            ) );
    hb_clsAdd( uiClass, "SETCOLORCOUNT"      , HB_FUNCNAME( SETCOLORCOUNT       ) );
    hb_clsAdd( uiClass, "SETCOLORTABLE"      , HB_FUNCNAME( SETCOLORTABLE       ) );
    hb_clsAdd( uiClass, "SETDOTSPERMETERX"   , HB_FUNCNAME( SETDOTSPERMETERX    ) );
    hb_clsAdd( uiClass, "SETDOTSPERMETERY"   , HB_FUNCNAME( SETDOTSPERMETERY    ) );
    hb_clsAdd( uiClass, "SETOFFSET"          , HB_FUNCNAME( SETOFFSET           ) );
    hb_clsAdd( uiClass, "SETPIXEL"           , HB_FUNCNAME( SETPIXEL            ) );
    hb_clsAdd( uiClass, "SETTEXT"            , HB_FUNCNAME( SETTEXT             ) );
    hb_clsAdd( uiClass, "SIZE"               , HB_FUNCNAME( SIZE                ) );
    hb_clsAdd( uiClass, "TEXT"               , HB_FUNCNAME( TEXT                ) );
    hb_clsAdd( uiClass, "TEXTKEYS"           , HB_FUNCNAME( TEXTKEYS            ) );
    hb_clsAdd( uiClass, "TRANSFORMED"        , HB_FUNCNAME( TRANSFORMED         ) );
    hb_clsAdd( uiClass, "VALID"              , HB_FUNCNAME( VALID               ) );
    hb_clsAdd( uiClass, "WIDTH"              , HB_FUNCNAME( WIDTH               ) );
    hb_clsAdd( uiClass, "FROMDATA"           , HB_FUNCNAME( QIMAGE_FROMDATA     ) );
    hb_clsAdd( uiClass, "TRUEMATRIX"         , HB_FUNCNAME( QIMAGE_TRUEMATRIX   ) );
    hb_clsAdd( uiClass, "E_INVERTRGB"        , HB_FUNCNAME( QIMAGE_E_INVERTRGB  ) );
    hb_clsAdd( uiClass, "E_INVERTRGBA"       , HB_FUNCNAME( QIMAGE_E_INVERTRGBA ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
