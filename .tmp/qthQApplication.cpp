/*
 * $Id: qthQApplication.wip 137 2011-07-20 06:29:59Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QApplication>

#define ColorSpec                               QApplication::ColorSpec
#define Type                                    QApplication::Type
/*
 * Wip: Dump Section INIT
 */

static void qthApplication_Terminate( void* cargo )
{
    qth_itemListReleaseAll();
}

HB_CALL_ON_STARTUP_BEGIN( _end_ )
hb_vmAtExit( qthApplication_Terminate, NULL );
HB_CALL_ON_STARTUP_END( _end_ )

static int argc;
static char **argv;
static QApplication* pQApp = NULL;

HB_FUNC_STATIC( NEW )
{
    if(!pQApp)
    {
        argc = hb_cmdargARGC();
        argv = hb_cmdargARGV();
        pQApp = new QApplication( argc, argv );

        qth_itemPushReturn( QtH::QApplication, pQApp );
    }
}

/*
 * Wip: Dump Section END
 */


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QAPPLICATION );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QCOREAPPLICATION );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QWIDGET ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QAPPLICATION )
{ "QAPPLICATION", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QAPPLICATION )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QCOREAPPLICATION", { HB_FS_PUBLIC }, { HB_FUNCNAME( QCOREAPPLICATION ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QWIDGET", {HB_FS_PUBLIC}, {HB_FUNCNAME( QWIDGET )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QAPPLICATION )

HB_FUNC( QAPPLICATION )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( COMMITDATA )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : virtual void  commitData ( QSessionManager & manager )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSessionManager" ) )
        {
            p_application->commitData( * static_cast<QSessionManager *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INPUTCONTEXT )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : QInputContext *  inputContext () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QInputContext'
            // qth_itemReturn( (PCPP_OBJECT) p_application->inputContext(), "QInputContext" );
            qth_errRT_UNKNOWNOBJ( "QApplication::inputContext", "Don't know how to return type 'QInputContext'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISSESSIONRESTORED )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : bool  isSessionRestored () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_application->isSessionRestored() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MACEVENTFILTER )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if MacCarbon
        /*
         * _public_functions_ : virtual bool  macEventFilter ( EventHandlerCallRef caller, EventRef event )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "EventHandlerCallRef" ) && qth_IsObject( 2, "EventRef" ) )
        {
            hb_retl( p_application->macEventFilter( * static_cast<EventHandlerCallRef *>( qth_par_QthObject( 1 ) ), * static_cast<EventRef *>( qth_par_QthObject( 2 ) ) ) == true );
            return;
        }
#endif  /* MacCarbon */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( QWSEVENTFILTER )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if Linux
        /*
         * _public_functions_ : virtual bool  qwsEventFilter ( QWSEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWSEvent" ) )
        {
            hb_retl( p_application->qwsEventFilter( static_cast<QWSEvent *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
#endif  /* Linux */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( QWSSETCUSTOMCOLORS )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if Linux
        /*
         * _public_functions_ : void  qwsSetCustomColors ( QRgb * colorTable, int start, int numColors )
         */
        if( ( hb_pcount() == 3 ) && qth_IsIntType( 1, "QRgb", QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
        {
            QRgb colorTable = (QRgb)  qth_par_IntType( 1 );
            p_application->qwsSetCustomColors( &colorTable, hb_parni( 2 ), hb_parni( 3 ) );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( colorTable, 1 );
            }
            return;
        }
#endif  /* Linux */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SAVESTATE )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : virtual void  saveState ( QSessionManager & manager )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSessionManager" ) )
        {
            p_application->saveState( * static_cast<QSessionManager *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SESSIONID )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : QString  sessionId () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_application->sessionId() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SESSIONKEY )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : QString  sessionKey () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_application->sessionKey() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINPUTCONTEXT )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : void  setInputContext ( QInputContext * inputContext )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QInputContext" ) )
        {
            p_application->setInputContext( static_cast<QInputContext *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STYLESHEET )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_functions_ : QString  styleSheet () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_application->styleSheet() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SYMBIANEVENTFILTER )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if Symbian
        /*
         * _public_functions_ : virtual bool  symbianEventFilter ( const QSymbianEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSymbianEvent" ) )
        {
            const QSymbianEvent  * event = static_cast<QSymbianEvent *>( qth_par_QthObject( 1 ) );
            hb_retl( p_application->symbianEventFilter( event ) == true );
            return;
        }
#endif  /* Symbian */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SYMBIANPROCESSEVENT )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if Symbian
        /*
         * _public_functions_ : int  symbianProcessEvent ( const QSymbianEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSymbianEvent" ) )
        {
            const QSymbianEvent  * event = static_cast<QSymbianEvent *>( qth_par_QthObject( 1 ) );
            hb_retni( p_application->symbianProcessEvent( event ) );
            return;
        }
#endif  /* Symbian */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X11EVENTFILTER )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if X11
        /*
         * _public_functions_ : virtual bool  x11EventFilter ( XEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "XEvent" ) )
        {
            hb_retl( p_application->x11EventFilter( static_cast<XEvent *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X11PROCESSEVENT )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if X11
        /*
         * _public_functions_ : int  x11ProcessEvent ( XEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "XEvent" ) )
        {
            hb_retni( p_application->x11ProcessEvent( static_cast<XEvent *>( qth_par_QthObject( 1 ) ) ) );
            return;
        }
#endif  /* X11 */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NOTIFY )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _reimplemented_public_functions_ : virtual bool  notify ( QObject * receiver, QEvent * e )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QObject" ) && qth_IsObject( 2, "QEvent" ) )
        {
            hb_retl( p_application->notify( static_cast<QObject *>( qth_par_QthObject( 1 ) ), static_cast<QEvent *>( qth_par_QthObject( 2 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ABOUTQT )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_slots_ : void  aboutQt ()
         */
        if( hb_pcount() == 0 )
        {
            p_application->aboutQt();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOMAXIMIZETHRESHOLD )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if WinCE
        /*
         * _public_slots_ : int  autoMaximizeThreshold () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_application->autoMaximizeThreshold() );
            return;
        }
#endif  /* WinCE */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOSIPENABLED )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_slots_ : bool  autoSipEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_application->autoSipEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLOSEALLWINDOWS )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_slots_ : void  closeAllWindows ()
         */
        if( hb_pcount() == 0 )
        {
            p_application->closeAllWindows();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOMAXIMIZETHRESHOLD )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
#if WinCE
        /*
         * _public_slots_ : void  setAutoMaximizeThreshold ( const int threshold )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_application->setAutoMaximizeThreshold( hb_parni( 1 ) );
            hb_ret();
            return;
        }
#endif  /* WinCE */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOSIPENABLED )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_slots_ : void  setAutoSipEnabled ( const bool enabled )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_application->setAutoSipEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTYLESHEET )
{
    QApplication* p_application = static_cast<QApplication *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_application )
    {
        /*
         * _public_slots_ : void  setStyleSheet ( const QString & sheet )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString sheet =  qth_par_QString( 1 );
            p_application->setStyleSheet( sheet );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ACTIVEMODALWIDGET )
{
    /*
     * _static_public_members_ : QWidget *  activeModalWidget ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemReturn( (PCPP_OBJECT) QApplication::activeModalWidget(), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ACTIVEPOPUPWIDGET )
{
    /*
     * _static_public_members_ : QWidget *  activePopupWidget ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemReturn( (PCPP_OBJECT) QApplication::activePopupWidget(), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ACTIVEWINDOW )
{
    /*
     * _static_public_members_ : QWidget *  activeWindow ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemReturn( (PCPP_OBJECT) QApplication::activeWindow(), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ALERT )
{
    /*
     * _static_public_members_ : void  alert ( QWidget * widget, int msec = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QWidget" ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int msec = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
        QApplication::alert( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), msec );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_BEEP )
{
    /*
     * _static_public_members_ : void  beep ()
     */
    if( hb_pcount() == 0 )
    {
        QApplication::beep();
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_CHANGEOVERRIDECURSOR )
{
    /*
     * _static_public_members_ : void  changeOverrideCursor ( const QCursor & cursor )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QCursor" ) )
    {
        const QCursor & cursor = * static_cast<QCursor *>( qth_par_QthObject( 1 ) );
        QApplication::changeOverrideCursor( cursor );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_CLIPBOARD )
{
    /*
     * _static_public_members_ : QClipboard *  clipboard ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QClipboard'
        // qth_itemReturn( (PCPP_OBJECT) QApplication::clipboard(), "QClipboard" );
        qth_errRT_UNKNOWNOBJ( "QApplication::clipboard", "Don't know how to return type 'QClipboard'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_COLORSPEC )
{
    /*
     * _static_public_members_ : int  colorSpec ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::colorSpec() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_CURSORFLASHTIME )
{
    /*
     * _static_public_members_ : int  cursorFlashTime ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::cursorFlashTime() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_DESKTOP )
{
    /*
     * _static_public_members_ : QDesktopWidget *  desktop ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QDesktopWidget'
        // qth_itemReturn( (PCPP_OBJECT) QApplication::desktop(), "QDesktopWidget" );
        qth_errRT_UNKNOWNOBJ( "QApplication::desktop", "Don't know how to return type 'QDesktopWidget'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_DESKTOPSETTINGSAWARE )
{
    /*
     * _static_public_members_ : bool  desktopSettingsAware ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QApplication::desktopSettingsAware() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_DOUBLECLICKINTERVAL )
{
    /*
     * _static_public_members_ : int  doubleClickInterval ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::doubleClickInterval() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_EXEC )
{
    /*
     * _static_public_members_ : int  exec ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::exec() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_FOCUSWIDGET )
{
    /*
     * _static_public_members_ : QWidget *  focusWidget ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemReturn( (PCPP_OBJECT) QApplication::focusWidget(), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_FONT )
{
    /*
     * _static_public_members_ : QFont  font ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QFont'
        // qth_itemPushNewReturn( QtH::QFont, new QFont( QApplication::font() ), "QFont" );
        qth_errRT_UNKNOWNOBJ( "QApplication::font", "Don't know how to return type 'QFont'" ) ;
        return;
    }
    /*
     * _static_public_members_ : QFont  font ( const QWidget * widget )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
    {
        // const QWidget  * widget = static_cast<QWidget *>( qth_par_QthObject( 1 ) );
        // ! Don't know how to return type 'QFont'
        // qth_itemPushNewReturn( QtH::QFont, new QFont( QApplication::font( widget ) ), "QFont" );
        qth_errRT_UNKNOWNOBJ( "QApplication::font", "Don't know how to return type 'QFont'" ) ;
        return;
    }
    /*
     * _static_public_members_ : QFont  font ( const char * className )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        // const char * className = hb_parc( 1 );
        // ! Don't know how to return type 'QFont'
        // qth_itemPushNewReturn( QtH::QFont, new QFont( QApplication::font( className ) ), "QFont" );
        qth_errRT_UNKNOWNOBJ( "QApplication::font", "Don't know how to return type 'QFont'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_FONTMETRICS )
{
    /*
     * _static_public_members_ : QFontMetrics  fontMetrics ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QFontMetrics'
        // qth_itemPushNewReturn( QtH::QFontMetrics, new QFontMetrics( QApplication::fontMetrics() ), "QFontMetrics" );
        qth_errRT_UNKNOWNOBJ( "QApplication::fontMetrics", "Don't know how to return type 'QFontMetrics'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_GLOBALSTRUT )
{
    /*
     * _static_public_members_ : QSize  globalStrut ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushNewReturn( QtH::QSize, new QSize( QApplication::globalStrut() ), "QSize" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ISEFFECTENABLED )
{
    /*
     * _static_public_members_ : bool  isEffectEnabled ( Qt::UIEffect effect )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::UIEffect" ) )
    {
        hb_retl( QApplication::isEffectEnabled( (Qt::UIEffect)  qth_par_IntType( 1 ) ) == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ISLEFTTORIGHT )
{
    /*
     * _static_public_members_ : bool  isLeftToRight ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QApplication::isLeftToRight() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_ISRIGHTTOLEFT )
{
    /*
     * _static_public_members_ : bool  isRightToLeft ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QApplication::isRightToLeft() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_KEYBOARDINPUTDIRECTION )
{
    /*
     * _static_public_members_ : Qt::LayoutDirection  keyboardInputDirection ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::keyboardInputDirection() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_KEYBOARDINPUTINTERVAL )
{
    /*
     * _static_public_members_ : int  keyboardInputInterval ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::keyboardInputInterval() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_KEYBOARDINPUTLOCALE )
{
    /*
     * _static_public_members_ : QLocale  keyboardInputLocale ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QLocale'
        // qth_itemPushNewReturn( QtH::QLocale, new QLocale( QApplication::keyboardInputLocale() ), "QLocale" );
        qth_errRT_UNKNOWNOBJ( "QApplication::keyboardInputLocale", "Don't know how to return type 'QLocale'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_KEYBOARDMODIFIERS )
{
    /*
     * _static_public_members_ : Qt::KeyboardModifiers  keyboardModifiers ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::keyboardModifiers() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_KEYPADNAVIGATIONENABLED )
{
#if notDeprecated
    /*
     * _static_public_members_ : bool  keypadNavigationEnabled () (deprecated)
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QApplication::keypadNavigationEnabled() == true );
        return;
    }
#endif  /* notDeprecated */
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_LAYOUTDIRECTION )
{
    /*
     * _static_public_members_ : Qt::LayoutDirection  layoutDirection ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::layoutDirection() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_MOUSEBUTTONS )
{
    /*
     * _static_public_members_ : Qt::MouseButtons  mouseButtons ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::mouseButtons() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_NAVIGATIONMODE )
{
#if 0 // Embedded Linux/Symbian/WinCE
    /*
     * _static_public_members_ : Qt::NavigationMode  navigationMode ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::navigationMode() );
        return;
    }
#endif  /* 0 // Embedded Linux/Symbian/WinCE */
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_OVERRIDECURSOR )
{
    /*
     * _static_public_members_ : QCursor *  overrideCursor ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QCursor'
        // qth_itemReturn( (PCPP_OBJECT) QApplication::overrideCursor(), "QCursor" );
        qth_errRT_UNKNOWNOBJ( "QApplication::overrideCursor", "Don't know how to return type 'QCursor'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_PALETTE )
{
    /*
     * _static_public_members_ : QPalette  palette ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QPalette'
        // qth_itemPushNewReturn( QtH::QPalette, new QPalette( QApplication::palette() ), "QPalette" );
        qth_errRT_UNKNOWNOBJ( "QApplication::palette", "Don't know how to return type 'QPalette'" ) ;
        return;
    }
    /*
     * _static_public_members_ : QPalette  palette ( const QWidget * widget )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
    {
        // const QWidget  * widget = static_cast<QWidget *>( qth_par_QthObject( 1 ) );
        // ! Don't know how to return type 'QPalette'
        // qth_itemPushNewReturn( QtH::QPalette, new QPalette( QApplication::palette( widget ) ), "QPalette" );
        qth_errRT_UNKNOWNOBJ( "QApplication::palette", "Don't know how to return type 'QPalette'" ) ;
        return;
    }
    /*
     * _static_public_members_ : QPalette  palette ( const char * className )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        // const char * className = hb_parc( 1 );
        // ! Don't know how to return type 'QPalette'
        // qth_itemPushNewReturn( QtH::QPalette, new QPalette( QApplication::palette( className ) ), "QPalette" );
        qth_errRT_UNKNOWNOBJ( "QApplication::palette", "Don't know how to return type 'QPalette'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_QUITONLASTWINDOWCLOSED )
{
    /*
     * _static_public_members_ : bool  quitOnLastWindowClosed ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QApplication::quitOnLastWindowClosed() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_QWSDECORATION )
{
#if 0 // Embedded Linux
    /*
     * _static_public_members_ : QDecoration &  qwsDecoration ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QDecoration'
        // qth_itemReturn( (PCPP_OBJECT)  & QApplication::qwsDecoration(), "QDecoration" );
        qth_errRT_UNKNOWNOBJ( "QApplication::qwsDecoration", "Don't know how to return type 'QDecoration'" ) ;
        return;
    }
#endif  /* 0 // Embedded Linux */
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_QWSSETDECORATION )
{
#if 0 // Embedded Linux
    /*
     * _static_public_members_ : void  qwsSetDecoration ( QDecoration * decoration )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDecoration" ) )
    {
        QApplication::qwsSetDecoration( static_cast<QDecoration *>( qth_par_QthObject( 1 ) ) );
        hb_ret();
        return;
    }
#endif  /* 0 // Embedded Linux */
#if 0 // Embedded Linux
    /*
     * _static_public_members_ : QDecoration *  qwsSetDecoration ( const QString & decoration )
     */
    if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
    {
        // QString decoration =  qth_par_QString( 1 );
        // ! Don't know how to return type 'QDecoration'
        // qth_itemReturn( (PCPP_OBJECT) QApplication::qwsSetDecoration( decoration ), "QDecoration" );
        qth_errRT_UNKNOWNOBJ( "QApplication::qwsSetDecoration", "Don't know how to return type 'QDecoration'" ) ;
        return;
    }
#endif  /* 0 // Embedded Linux */
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_RESTOREOVERRIDECURSOR )
{
    /*
     * _static_public_members_ : void  restoreOverrideCursor ()
     */
    if( hb_pcount() == 0 )
    {
        QApplication::restoreOverrideCursor();
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETACTIVEWINDOW )
{
    /*
     * _static_public_members_ : void  setActiveWindow ( QWidget * active )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
    {
        QApplication::setActiveWindow( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETCOLORSPEC )
{
    /*
     * _static_public_members_ : void  setColorSpec ( int spec )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setColorSpec( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETCURSORFLASHTIME )
{
    /*
     * _static_public_members_ : void  setCursorFlashTime ( int )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setCursorFlashTime( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETDESKTOPSETTINGSAWARE )
{
    /*
     * _static_public_members_ : void  setDesktopSettingsAware ( bool on )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
    {
        QApplication::setDesktopSettingsAware( hb_parl( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETDOUBLECLICKINTERVAL )
{
    /*
     * _static_public_members_ : void  setDoubleClickInterval ( int )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setDoubleClickInterval( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETEFFECTENABLED )
{
    /*
     * _static_public_members_ : void  setEffectEnabled ( Qt::UIEffect effect, bool enable = true )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "Qt::UIEffect" ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
    {
        bool enable = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : true;
        QApplication::setEffectEnabled( (Qt::UIEffect)  qth_par_IntType( 1 ), enable );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETFONT )
{
    /*
     * _static_public_members_ : void  setFont ( const QFont & font, const char * className = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QFont" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
    {
        const QFont & font = * static_cast<QFont *>( qth_par_QthObject( 1 ) );
        const char* className = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
        QApplication::setFont( font, className );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETGLOBALSTRUT )
{
    /*
     * _static_public_members_ : void  setGlobalStrut ( const QSize & )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
    {
        const QSize & p_QSize1 = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
        QApplication::setGlobalStrut( p_QSize1 );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETGRAPHICSSYSTEM )
{
    /*
     * _static_public_members_ : void  setGraphicsSystem ( const QString & system )
     */
    if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
    {
        QString system =  qth_par_QString( 1 );
        QApplication::setGraphicsSystem( system );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETKEYBOARDINPUTINTERVAL )
{
    /*
     * _static_public_members_ : void  setKeyboardInputInterval ( int )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setKeyboardInputInterval( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETLAYOUTDIRECTION )
{
    /*
     * _static_public_members_ : void  setLayoutDirection ( Qt::LayoutDirection direction )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::LayoutDirection" ) )
    {
        QApplication::setLayoutDirection( (Qt::LayoutDirection)  qth_par_IntType( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETNAVIGATIONMODE )
{
#if 0 // Embedded Linux/Symbian/WinCE
    /*
     * _static_public_members_ : void  setNavigationMode ( Qt::NavigationMode mode )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::NavigationMode" ) )
    {
        QApplication::setNavigationMode( (Qt::NavigationMode)  qth_par_IntType( 1 ) );
        hb_ret();
        return;
    }
#endif  /* 0 // Embedded Linux/Symbian/WinCE */
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETOVERRIDECURSOR )
{
    /*
     * _static_public_members_ : void  setOverrideCursor ( const QCursor & cursor )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QCursor" ) )
    {
        const QCursor & cursor = * static_cast<QCursor *>( qth_par_QthObject( 1 ) );
        QApplication::setOverrideCursor( cursor );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETPALETTE )
{
    /*
     * _static_public_members_ : void  setPalette ( const QPalette & palette, const char * className = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QPalette" ) && qth_Is( 2, HB_IT_STRING, QTH_DEFAULT ) )
    {
        const QPalette & palette = * static_cast<QPalette *>( qth_par_QthObject( 1 ) );
        const char* className = hb_param( 2, HB_IT_STRING ) ? hb_parc( 2 ) : 0;
        QApplication::setPalette( palette, className );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETQUITONLASTWINDOWCLOSED )
{
    /*
     * _static_public_members_ : void  setQuitOnLastWindowClosed ( bool quit )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
    {
        QApplication::setQuitOnLastWindowClosed( hb_parl( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETSTARTDRAGDISTANCE )
{
    /*
     * _static_public_members_ : void  setStartDragDistance ( int l )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setStartDragDistance( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETSTARTDRAGTIME )
{
    /*
     * _static_public_members_ : void  setStartDragTime ( int ms )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setStartDragTime( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETSTYLE )
{
    /*
     * _static_public_members_ : void  setStyle ( QStyle * style )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QStyle" ) )
    {
        QApplication::setStyle( static_cast<QStyle *>( qth_par_QthObject( 1 ) ) );
        hb_ret();
        return;
    }
    /*
     * _static_public_members_ : QStyle *  setStyle ( const QString & style )
     */
    if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
    {
        // QString style =  qth_par_QString( 1 );
        // ! Don't know how to return type 'QStyle'
        // qth_itemReturn( (PCPP_OBJECT) QApplication::setStyle( style ), "QStyle" );
        qth_errRT_UNKNOWNOBJ( "QApplication::setStyle", "Don't know how to return type 'QStyle'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETWHEELSCROLLLINES )
{
    /*
     * _static_public_members_ : void  setWheelScrollLines ( int )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        QApplication::setWheelScrollLines( hb_parni( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SETWINDOWICON )
{
    /*
     * _static_public_members_ : void  setWindowIcon ( const QIcon & icon )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QIcon" ) )
    {
        const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
        QApplication::setWindowIcon( icon );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_STARTDRAGDISTANCE )
{
    /*
     * _static_public_members_ : int  startDragDistance ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::startDragDistance() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_STARTDRAGTIME )
{
    /*
     * _static_public_members_ : int  startDragTime ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::startDragTime() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_STYLE )
{
    /*
     * _static_public_members_ : QStyle *  style ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QStyle'
        // qth_itemReturn( (PCPP_OBJECT) QApplication::style(), "QStyle" );
        qth_errRT_UNKNOWNOBJ( "QApplication::style", "Don't know how to return type 'QStyle'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_SYNCX )
{
    /*
     * _static_public_members_ : void  syncX ()
     */
    if( hb_pcount() == 0 )
    {
        QApplication::syncX();
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_TOPLEVELAT )
{
    /*
     * _static_public_members_ : QWidget *  topLevelAt ( const QPoint & point )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
    {
        const QPoint & point = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        qth_itemReturn( (PCPP_OBJECT) QApplication::topLevelAt( point ), "QWidget" );
        return;
    }
    /*
     * _static_public_members_ : QWidget *  topLevelAt ( int x, int y )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
    {
        qth_itemReturn( (PCPP_OBJECT) QApplication::topLevelAt( hb_parni( 1 ), hb_parni( 2 ) ), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_TYPE )
{
    /*
     * _static_public_members_ : Type  type ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::type() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_WHEELSCROLLLINES )
{
    /*
     * _static_public_members_ : int  wheelScrollLines ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QApplication::wheelScrollLines() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_WIDGETAT )
{
    /*
     * _static_public_members_ : QWidget *  widgetAt ( const QPoint & point )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
    {
        const QPoint & point = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        qth_itemReturn( (PCPP_OBJECT) QApplication::widgetAt( point ), "QWidget" );
        return;
    }
    /*
     * _static_public_members_ : QWidget *  widgetAt ( int x, int y )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
    {
        qth_itemReturn( (PCPP_OBJECT) QApplication::widgetAt( hb_parni( 1 ), hb_parni( 2 ) ), "QWidget" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QAPPLICATION_WINDOWICON )
{
    /*
     * _static_public_members_ : QIcon  windowIcon ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushNewReturn( QtH::QIcon, new QIcon( QApplication::windowIcon() ), "QIcon" );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                      , HB_FUNCNAME( NEW                                    ) );
    hb_clsAdd( uiClass, "COMMITDATA"               , HB_FUNCNAME( COMMITDATA                             ) );
    hb_clsAdd( uiClass, "INPUTCONTEXT"             , HB_FUNCNAME( INPUTCONTEXT                           ) );
    hb_clsAdd( uiClass, "ISSESSIONRESTORED"        , HB_FUNCNAME( ISSESSIONRESTORED                      ) );
    hb_clsAdd( uiClass, "MACEVENTFILTER"           , HB_FUNCNAME( MACEVENTFILTER                         ) );
    hb_clsAdd( uiClass, "QWSEVENTFILTER"           , HB_FUNCNAME( QWSEVENTFILTER                         ) );
    hb_clsAdd( uiClass, "QWSSETCUSTOMCOLORS"       , HB_FUNCNAME( QWSSETCUSTOMCOLORS                     ) );
    hb_clsAdd( uiClass, "SAVESTATE"                , HB_FUNCNAME( SAVESTATE                              ) );
    hb_clsAdd( uiClass, "SESSIONID"                , HB_FUNCNAME( SESSIONID                              ) );
    hb_clsAdd( uiClass, "SESSIONKEY"               , HB_FUNCNAME( SESSIONKEY                             ) );
    hb_clsAdd( uiClass, "SETINPUTCONTEXT"          , HB_FUNCNAME( SETINPUTCONTEXT                        ) );
    hb_clsAdd( uiClass, "STYLESHEET"               , HB_FUNCNAME( STYLESHEET                             ) );
    hb_clsAdd( uiClass, "SYMBIANEVENTFILTER"       , HB_FUNCNAME( SYMBIANEVENTFILTER                     ) );
    hb_clsAdd( uiClass, "SYMBIANPROCESSEVENT"      , HB_FUNCNAME( SYMBIANPROCESSEVENT                    ) );
    hb_clsAdd( uiClass, "X11EVENTFILTER"           , HB_FUNCNAME( X11EVENTFILTER                         ) );
    hb_clsAdd( uiClass, "X11PROCESSEVENT"          , HB_FUNCNAME( X11PROCESSEVENT                        ) );
    hb_clsAdd( uiClass, "NOTIFY"                   , HB_FUNCNAME( NOTIFY                                 ) );
    hb_clsAdd( uiClass, "ABOUTQT"                  , HB_FUNCNAME( ABOUTQT                                ) );
    hb_clsAdd( uiClass, "AUTOMAXIMIZETHRESHOLD"    , HB_FUNCNAME( AUTOMAXIMIZETHRESHOLD                  ) );
    hb_clsAdd( uiClass, "AUTOSIPENABLED"           , HB_FUNCNAME( AUTOSIPENABLED                         ) );
    hb_clsAdd( uiClass, "CLOSEALLWINDOWS"          , HB_FUNCNAME( CLOSEALLWINDOWS                        ) );
    hb_clsAdd( uiClass, "SETAUTOMAXIMIZETHRESHOLD" , HB_FUNCNAME( SETAUTOMAXIMIZETHRESHOLD               ) );
    hb_clsAdd( uiClass, "SETAUTOSIPENABLED"        , HB_FUNCNAME( SETAUTOSIPENABLED                      ) );
    hb_clsAdd( uiClass, "SETSTYLESHEET"            , HB_FUNCNAME( SETSTYLESHEET                          ) );
    hb_clsAdd( uiClass, "ACTIVEMODALWIDGET"        , HB_FUNCNAME( QAPPLICATION_ACTIVEMODALWIDGET         ) );
    hb_clsAdd( uiClass, "ACTIVEPOPUPWIDGET"        , HB_FUNCNAME( QAPPLICATION_ACTIVEPOPUPWIDGET         ) );
    hb_clsAdd( uiClass, "ACTIVEWINDOW"             , HB_FUNCNAME( QAPPLICATION_ACTIVEWINDOW              ) );
    hb_clsAdd( uiClass, "ALERT"                    , HB_FUNCNAME( QAPPLICATION_ALERT                     ) );
    hb_clsAdd( uiClass, "BEEP"                     , HB_FUNCNAME( QAPPLICATION_BEEP                      ) );
    hb_clsAdd( uiClass, "CHANGEOVERRIDECURSOR"     , HB_FUNCNAME( QAPPLICATION_CHANGEOVERRIDECURSOR      ) );
    hb_clsAdd( uiClass, "CLIPBOARD"                , HB_FUNCNAME( QAPPLICATION_CLIPBOARD                 ) );
    hb_clsAdd( uiClass, "COLORSPEC"                , HB_FUNCNAME( QAPPLICATION_COLORSPEC                 ) );
    hb_clsAdd( uiClass, "CURSORFLASHTIME"          , HB_FUNCNAME( QAPPLICATION_CURSORFLASHTIME           ) );
    hb_clsAdd( uiClass, "DESKTOP"                  , HB_FUNCNAME( QAPPLICATION_DESKTOP                   ) );
    hb_clsAdd( uiClass, "DESKTOPSETTINGSAWARE"     , HB_FUNCNAME( QAPPLICATION_DESKTOPSETTINGSAWARE      ) );
    hb_clsAdd( uiClass, "DOUBLECLICKINTERVAL"      , HB_FUNCNAME( QAPPLICATION_DOUBLECLICKINTERVAL       ) );
    hb_clsAdd( uiClass, "EXEC"                     , HB_FUNCNAME( QAPPLICATION_EXEC                      ) );
    hb_clsAdd( uiClass, "FOCUSWIDGET"              , HB_FUNCNAME( QAPPLICATION_FOCUSWIDGET               ) );
    hb_clsAdd( uiClass, "FONT"                     , HB_FUNCNAME( QAPPLICATION_FONT                      ) );
    hb_clsAdd( uiClass, "FONTMETRICS"              , HB_FUNCNAME( QAPPLICATION_FONTMETRICS               ) );
    hb_clsAdd( uiClass, "GLOBALSTRUT"              , HB_FUNCNAME( QAPPLICATION_GLOBALSTRUT               ) );
    hb_clsAdd( uiClass, "ISEFFECTENABLED"          , HB_FUNCNAME( QAPPLICATION_ISEFFECTENABLED           ) );
    hb_clsAdd( uiClass, "ISLEFTTORIGHT"            , HB_FUNCNAME( QAPPLICATION_ISLEFTTORIGHT             ) );
    hb_clsAdd( uiClass, "ISRIGHTTOLEFT"            , HB_FUNCNAME( QAPPLICATION_ISRIGHTTOLEFT             ) );
    hb_clsAdd( uiClass, "KEYBOARDINPUTDIRECTION"   , HB_FUNCNAME( QAPPLICATION_KEYBOARDINPUTDIRECTION    ) );
    hb_clsAdd( uiClass, "KEYBOARDINPUTINTERVAL"    , HB_FUNCNAME( QAPPLICATION_KEYBOARDINPUTINTERVAL     ) );
    hb_clsAdd( uiClass, "KEYBOARDINPUTLOCALE"      , HB_FUNCNAME( QAPPLICATION_KEYBOARDINPUTLOCALE       ) );
    hb_clsAdd( uiClass, "KEYBOARDMODIFIERS"        , HB_FUNCNAME( QAPPLICATION_KEYBOARDMODIFIERS         ) );
    hb_clsAdd( uiClass, "KEYPADNAVIGATIONENABLED"  , HB_FUNCNAME( QAPPLICATION_KEYPADNAVIGATIONENABLED   ) );
    hb_clsAdd( uiClass, "LAYOUTDIRECTION"          , HB_FUNCNAME( QAPPLICATION_LAYOUTDIRECTION           ) );
    hb_clsAdd( uiClass, "MOUSEBUTTONS"             , HB_FUNCNAME( QAPPLICATION_MOUSEBUTTONS              ) );
    hb_clsAdd( uiClass, "NAVIGATIONMODE"           , HB_FUNCNAME( QAPPLICATION_NAVIGATIONMODE            ) );
    hb_clsAdd( uiClass, "OVERRIDECURSOR"           , HB_FUNCNAME( QAPPLICATION_OVERRIDECURSOR            ) );
    hb_clsAdd( uiClass, "PALETTE"                  , HB_FUNCNAME( QAPPLICATION_PALETTE                   ) );
    hb_clsAdd( uiClass, "QUITONLASTWINDOWCLOSED"   , HB_FUNCNAME( QAPPLICATION_QUITONLASTWINDOWCLOSED    ) );
    hb_clsAdd( uiClass, "QWSDECORATION"            , HB_FUNCNAME( QAPPLICATION_QWSDECORATION             ) );
    hb_clsAdd( uiClass, "QWSSETDECORATION"         , HB_FUNCNAME( QAPPLICATION_QWSSETDECORATION          ) );
    hb_clsAdd( uiClass, "RESTOREOVERRIDECURSOR"    , HB_FUNCNAME( QAPPLICATION_RESTOREOVERRIDECURSOR     ) );
    hb_clsAdd( uiClass, "SETACTIVEWINDOW"          , HB_FUNCNAME( QAPPLICATION_SETACTIVEWINDOW           ) );
    hb_clsAdd( uiClass, "SETCOLORSPEC"             , HB_FUNCNAME( QAPPLICATION_SETCOLORSPEC              ) );
    hb_clsAdd( uiClass, "SETCURSORFLASHTIME"       , HB_FUNCNAME( QAPPLICATION_SETCURSORFLASHTIME        ) );
    hb_clsAdd( uiClass, "SETDESKTOPSETTINGSAWARE"  , HB_FUNCNAME( QAPPLICATION_SETDESKTOPSETTINGSAWARE   ) );
    hb_clsAdd( uiClass, "SETDOUBLECLICKINTERVAL"   , HB_FUNCNAME( QAPPLICATION_SETDOUBLECLICKINTERVAL    ) );
    hb_clsAdd( uiClass, "SETEFFECTENABLED"         , HB_FUNCNAME( QAPPLICATION_SETEFFECTENABLED          ) );
    hb_clsAdd( uiClass, "SETFONT"                  , HB_FUNCNAME( QAPPLICATION_SETFONT                   ) );
    hb_clsAdd( uiClass, "SETGLOBALSTRUT"           , HB_FUNCNAME( QAPPLICATION_SETGLOBALSTRUT            ) );
    hb_clsAdd( uiClass, "SETGRAPHICSSYSTEM"        , HB_FUNCNAME( QAPPLICATION_SETGRAPHICSSYSTEM         ) );
    hb_clsAdd( uiClass, "SETKEYBOARDINPUTINTERVAL" , HB_FUNCNAME( QAPPLICATION_SETKEYBOARDINPUTINTERVAL  ) );
    hb_clsAdd( uiClass, "SETLAYOUTDIRECTION"       , HB_FUNCNAME( QAPPLICATION_SETLAYOUTDIRECTION        ) );
    hb_clsAdd( uiClass, "SETNAVIGATIONMODE"        , HB_FUNCNAME( QAPPLICATION_SETNAVIGATIONMODE         ) );
    hb_clsAdd( uiClass, "SETOVERRIDECURSOR"        , HB_FUNCNAME( QAPPLICATION_SETOVERRIDECURSOR         ) );
    hb_clsAdd( uiClass, "SETPALETTE"               , HB_FUNCNAME( QAPPLICATION_SETPALETTE                ) );
    hb_clsAdd( uiClass, "SETQUITONLASTWINDOWCLOSED", HB_FUNCNAME( QAPPLICATION_SETQUITONLASTWINDOWCLOSED ) );
    hb_clsAdd( uiClass, "SETSTARTDRAGDISTANCE"     , HB_FUNCNAME( QAPPLICATION_SETSTARTDRAGDISTANCE      ) );
    hb_clsAdd( uiClass, "SETSTARTDRAGTIME"         , HB_FUNCNAME( QAPPLICATION_SETSTARTDRAGTIME          ) );
    hb_clsAdd( uiClass, "SETSTYLE"                 , HB_FUNCNAME( QAPPLICATION_SETSTYLE                  ) );
    hb_clsAdd( uiClass, "SETWHEELSCROLLLINES"      , HB_FUNCNAME( QAPPLICATION_SETWHEELSCROLLLINES       ) );
    hb_clsAdd( uiClass, "SETWINDOWICON"            , HB_FUNCNAME( QAPPLICATION_SETWINDOWICON             ) );
    hb_clsAdd( uiClass, "STARTDRAGDISTANCE"        , HB_FUNCNAME( QAPPLICATION_STARTDRAGDISTANCE         ) );
    hb_clsAdd( uiClass, "STARTDRAGTIME"            , HB_FUNCNAME( QAPPLICATION_STARTDRAGTIME             ) );
    hb_clsAdd( uiClass, "STYLE"                    , HB_FUNCNAME( QAPPLICATION_STYLE                     ) );
    hb_clsAdd( uiClass, "SYNCX"                    , HB_FUNCNAME( QAPPLICATION_SYNCX                     ) );
    hb_clsAdd( uiClass, "TOPLEVELAT"               , HB_FUNCNAME( QAPPLICATION_TOPLEVELAT                ) );
    hb_clsAdd( uiClass, "TYPE"                     , HB_FUNCNAME( QAPPLICATION_TYPE                      ) );
    hb_clsAdd( uiClass, "WHEELSCROLLLINES"         , HB_FUNCNAME( QAPPLICATION_WHEELSCROLLLINES          ) );
    hb_clsAdd( uiClass, "WIDGETAT"                 , HB_FUNCNAME( QAPPLICATION_WIDGETAT                  ) );
    hb_clsAdd( uiClass, "WINDOWICON"               , HB_FUNCNAME( QAPPLICATION_WINDOWICON                ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
