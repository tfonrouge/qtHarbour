/*
 * $Id: qthQAbstractButton.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QAbstractButton>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QABSTRACTBUTTON );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QABSTRACTBUTTON )
{ "QABSTRACTBUTTON", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QABSTRACTBUTTON )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QABSTRACTBUTTON )

HB_FUNC( QABSTRACTBUTTON )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( AUTOEXCLUSIVE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : bool  autoExclusive () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractButton->autoExclusive() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOREPEAT )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : bool  autoRepeat () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractButton->autoRepeat() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOREPEATDELAY )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : int  autoRepeatDelay () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractButton->autoRepeatDelay() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOREPEATINTERVAL )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : int  autoRepeatInterval () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractButton->autoRepeatInterval() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GROUP )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : QButtonGroup *  group () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QButtonGroup'
            // qth_itemReturn( (PCPP_OBJECT) p_abstractButton->group(), "QButtonGroup" );
            qth_errRT_UNKNOWNOBJ( "QAbstractButton::group", "Don't know how to return type 'QButtonGroup'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICON )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : QIcon  icon () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QIcon, new QIcon( p_abstractButton->icon() ), "QIcon" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICONSIZE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : QSize  iconSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstractButton->iconSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISCHECKABLE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : bool  isCheckable () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractButton->isCheckable() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISCHECKED )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : bool  isChecked () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractButton->isChecked() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISDOWN )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : bool  isDown () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractButton->isDown() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOEXCLUSIVE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setAutoExclusive ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractButton->setAutoExclusive( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOREPEAT )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setAutoRepeat ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractButton->setAutoRepeat( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOREPEATDELAY )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setAutoRepeatDelay ( int )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_abstractButton->setAutoRepeatDelay( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOREPEATINTERVAL )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setAutoRepeatInterval ( int )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_abstractButton->setAutoRepeatInterval( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCHECKABLE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setCheckable ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractButton->setCheckable( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOWN )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setDown ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractButton->setDown( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICON )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setIcon ( const QIcon & icon )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QIcon" ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            p_abstractButton->setIcon( icon );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHORTCUT )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setShortcut ( const QKeySequence & key )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QKeySequence" ) )
        {
            const QKeySequence & key = * static_cast<QKeySequence *>( qth_par_QthObject( 1 ) );
            p_abstractButton->setShortcut( key );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXT )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : void  setText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_abstractButton->setText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHORTCUT )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : QKeySequence  shortcut () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QKeySequence'
            // qth_itemPushNewReturn( QtH::QKeySequence, new QKeySequence( p_abstractButton->shortcut() ), "QKeySequence" );
            qth_errRT_UNKNOWNOBJ( "QAbstractButton::shortcut", "Don't know how to return type 'QKeySequence'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXT )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_functions_ : QString  text () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_abstractButton->text() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ANIMATECLICK )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_slots_ : void  animateClick ( int msec = 100 )
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int msec = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 100;
            p_abstractButton->animateClick( msec );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLICK )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_slots_ : void  click ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractButton->click();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCHECKED )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_slots_ : void  setChecked ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractButton->setChecked( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICONSIZE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_slots_ : void  setIconSize ( const QSize & size )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_abstractButton->setIconSize( size );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOGGLE )
{
    QAbstractButton* p_abstractButton = static_cast<QAbstractButton *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractButton )
    {
        /*
         * _public_slots_ : void  toggle ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractButton->toggle();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "AUTOEXCLUSIVE"        , HB_FUNCNAME( AUTOEXCLUSIVE         ) );
    hb_clsAdd( uiClass, "AUTOREPEAT"           , HB_FUNCNAME( AUTOREPEAT            ) );
    hb_clsAdd( uiClass, "AUTOREPEATDELAY"      , HB_FUNCNAME( AUTOREPEATDELAY       ) );
    hb_clsAdd( uiClass, "AUTOREPEATINTERVAL"   , HB_FUNCNAME( AUTOREPEATINTERVAL    ) );
    hb_clsAdd( uiClass, "GROUP"                , HB_FUNCNAME( GROUP                 ) );
    hb_clsAdd( uiClass, "ICON"                 , HB_FUNCNAME( ICON                  ) );
    hb_clsAdd( uiClass, "ICONSIZE"             , HB_FUNCNAME( ICONSIZE              ) );
    hb_clsAdd( uiClass, "ISCHECKABLE"          , HB_FUNCNAME( ISCHECKABLE           ) );
    hb_clsAdd( uiClass, "ISCHECKED"            , HB_FUNCNAME( ISCHECKED             ) );
    hb_clsAdd( uiClass, "ISDOWN"               , HB_FUNCNAME( ISDOWN                ) );
    hb_clsAdd( uiClass, "SETAUTOEXCLUSIVE"     , HB_FUNCNAME( SETAUTOEXCLUSIVE      ) );
    hb_clsAdd( uiClass, "SETAUTOREPEAT"        , HB_FUNCNAME( SETAUTOREPEAT         ) );
    hb_clsAdd( uiClass, "SETAUTOREPEATDELAY"   , HB_FUNCNAME( SETAUTOREPEATDELAY    ) );
    hb_clsAdd( uiClass, "SETAUTOREPEATINTERVAL", HB_FUNCNAME( SETAUTOREPEATINTERVAL ) );
    hb_clsAdd( uiClass, "SETCHECKABLE"         , HB_FUNCNAME( SETCHECKABLE          ) );
    hb_clsAdd( uiClass, "SETDOWN"              , HB_FUNCNAME( SETDOWN               ) );
    hb_clsAdd( uiClass, "SETICON"              , HB_FUNCNAME( SETICON               ) );
    hb_clsAdd( uiClass, "SETSHORTCUT"          , HB_FUNCNAME( SETSHORTCUT           ) );
    hb_clsAdd( uiClass, "SETTEXT"              , HB_FUNCNAME( SETTEXT               ) );
    hb_clsAdd( uiClass, "SHORTCUT"             , HB_FUNCNAME( SHORTCUT              ) );
    hb_clsAdd( uiClass, "TEXT"                 , HB_FUNCNAME( TEXT                  ) );
    hb_clsAdd( uiClass, "ANIMATECLICK"         , HB_FUNCNAME( ANIMATECLICK          ) );
    hb_clsAdd( uiClass, "CLICK"                , HB_FUNCNAME( CLICK                 ) );
    hb_clsAdd( uiClass, "SETCHECKED"           , HB_FUNCNAME( SETCHECKED            ) );
    hb_clsAdd( uiClass, "SETICONSIZE"          , HB_FUNCNAME( SETICONSIZE           ) );
    hb_clsAdd( uiClass, "TOGGLE"               , HB_FUNCNAME( TOGGLE                ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
