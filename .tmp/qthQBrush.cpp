/*
 * $Id: qthQBrush.wip 137 2011-07-20 06:29:59Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QBrush>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QBRUSH );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QIMAGE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QPIXMAP ); // REQUEST'ed Class
HB_FUNC_EXTERN( QGRADIENT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QCOLOR ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QBRUSH )
{ "QBRUSH", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QBRUSH )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QIMAGE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QIMAGE )}, NULL }, // REQUEST'ed Class
{ "QPIXMAP", {HB_FS_PUBLIC}, {HB_FUNCNAME( QPIXMAP )}, NULL }, // REQUEST'ed Class
{ "QGRADIENT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QGRADIENT )}, NULL }, // REQUEST'ed Class
{ "QCOLOR", {HB_FS_PUBLIC}, {HB_FUNCNAME( QCOLOR )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QBRUSH )

HB_FUNC( QBRUSH )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QBrush ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QBrush, new QBrush() );
        return;
    }
    /*
     * _public_functions_ : QBrush ( Qt::BrushStyle style )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::BrushStyle" ) )
    {
        qth_itemPushReturn( QtH::QBrush, new QBrush( (Qt::BrushStyle)  qth_par_IntType( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( const QColor & color, Qt::BrushStyle style = Qt::SolidPattern )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QColor" ) && qth_IsIntType( 2, "Qt::BrushStyle", QTH_DEFAULT ) )
    {
        const QColor & color = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( color, (Qt::BrushStyle) qth_par_IntType( 2, Qt::SolidPattern ) ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( Qt::GlobalColor color, Qt::BrushStyle style = Qt::SolidPattern )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "Qt::GlobalColor" ) && qth_IsIntType( 2, "Qt::BrushStyle", QTH_DEFAULT ) )
    {
        qth_itemPushReturn( QtH::QBrush, new QBrush( (Qt::GlobalColor)  qth_par_IntType( 1 ), (Qt::BrushStyle) qth_par_IntType( 2, Qt::SolidPattern ) ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( const QColor & color, const QPixmap & pixmap )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QColor" ) && qth_IsObject( 2, "QPixmap" ) )
    {
        const QColor & color = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
        const QPixmap & pixmap = * static_cast<QPixmap *>( qth_par_QthObject( 2 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( color, pixmap ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( Qt::GlobalColor color, const QPixmap & pixmap )
     */
    if( ( hb_pcount() == 2 ) && qth_IsIntType( 1, "Qt::GlobalColor" ) && qth_IsObject( 2, "QPixmap" ) )
    {
        const QPixmap & pixmap = * static_cast<QPixmap *>( qth_par_QthObject( 2 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( (Qt::GlobalColor)  qth_par_IntType( 1 ), pixmap ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( const QPixmap & pixmap )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPixmap" ) )
    {
        const QPixmap & pixmap = * static_cast<QPixmap *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( pixmap ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( const QImage & image )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QImage" ) )
    {
        const QImage & image = * static_cast<QImage *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( image ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( const QBrush & other )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QBrush" ) )
    {
        const QBrush & other = * static_cast<QBrush *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( other ) );
        return;
    }
    /*
     * _public_functions_ : QBrush ( const QGradient & gradient )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QGradient" ) )
    {
        const QGradient & gradient = * static_cast<QGradient *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QBrush, new QBrush( gradient ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLOR )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : const QColor &  color () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT)  & p_brush->color(), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRADIENT )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : const QGradient *  gradient () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_brush->gradient(), "QGradient" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISOPAQUE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : bool  isOpaque () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_brush->isOpaque() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MATRIX )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
#if obsolete
        /*
         * _public_functions_ : const QMatrix &  matrix () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QMatrix'
            // qth_itemReturn( (PCPP_OBJECT)  & p_brush->matrix(), "QMatrix" );
            qth_errRT_UNKNOWNOBJ( "QBrush::matrix", "Don't know how to return type 'QMatrix'" ) ;
            return;
        }
#endif  /* obsolete */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLOR )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : void  setColor ( const QColor & color )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QColor" ) )
        {
            const QColor & color = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
            p_brush->setColor( color );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setColor ( Qt::GlobalColor color )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::GlobalColor" ) )
        {
            p_brush->setColor( (Qt::GlobalColor)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMATRIX )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
#if obsolete
        /*
         * _public_functions_ : void  setMatrix ( const QMatrix & matrix )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMatrix" ) )
        {
            const QMatrix & matrix = * static_cast<QMatrix *>( qth_par_QthObject( 1 ) );
            p_brush->setMatrix( matrix );
            hb_ret();
            return;
        }
#endif  /* obsolete */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTYLE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : void  setStyle ( Qt::BrushStyle style )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::BrushStyle" ) )
        {
            p_brush->setStyle( (Qt::BrushStyle)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTURE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : void  setTexture ( const QPixmap & pixmap )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPixmap" ) )
        {
            const QPixmap & pixmap = * static_cast<QPixmap *>( qth_par_QthObject( 1 ) );
            p_brush->setTexture( pixmap );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTUREIMAGE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : void  setTextureImage ( const QImage & image )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QImage" ) )
        {
            const QImage & image = * static_cast<QImage *>( qth_par_QthObject( 1 ) );
            p_brush->setTextureImage( image );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTRANSFORM )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : void  setTransform ( const QTransform & matrix )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTransform" ) )
        {
            const QTransform & matrix = * static_cast<QTransform *>( qth_par_QthObject( 1 ) );
            p_brush->setTransform( matrix );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STYLE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : Qt::BrushStyle  style () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_brush->style() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTURE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : QPixmap  texture () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPixmap, new QPixmap( p_brush->texture() ), "QPixmap" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTUREIMAGE )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : QImage  textureImage () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QImage, new QImage( p_brush->textureImage() ), "QImage" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TRANSFORM )
{
    QBrush* p_brush = static_cast<QBrush *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_brush )
    {
        /*
         * _public_functions_ : QTransform  transform () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QTransform'
            // qth_itemPushNewReturn( QtH::QTransform, new QTransform( p_brush->transform() ), "QTransform" );
            qth_errRT_UNKNOWNOBJ( "QBrush::transform", "Don't know how to return type 'QTransform'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"            , HB_FUNCNAME( NEW             ) );
    hb_clsAdd( uiClass, "COLOR"          , HB_FUNCNAME( COLOR           ) );
    hb_clsAdd( uiClass, "GRADIENT"       , HB_FUNCNAME( GRADIENT        ) );
    hb_clsAdd( uiClass, "ISOPAQUE"       , HB_FUNCNAME( ISOPAQUE        ) );
    hb_clsAdd( uiClass, "MATRIX"         , HB_FUNCNAME( MATRIX          ) );
    hb_clsAdd( uiClass, "SETCOLOR"       , HB_FUNCNAME( SETCOLOR        ) );
    hb_clsAdd( uiClass, "SETMATRIX"      , HB_FUNCNAME( SETMATRIX       ) );
    hb_clsAdd( uiClass, "SETSTYLE"       , HB_FUNCNAME( SETSTYLE        ) );
    hb_clsAdd( uiClass, "SETTEXTURE"     , HB_FUNCNAME( SETTEXTURE      ) );
    hb_clsAdd( uiClass, "SETTEXTUREIMAGE", HB_FUNCNAME( SETTEXTUREIMAGE ) );
    hb_clsAdd( uiClass, "SETTRANSFORM"   , HB_FUNCNAME( SETTRANSFORM    ) );
    hb_clsAdd( uiClass, "STYLE"          , HB_FUNCNAME( STYLE           ) );
    hb_clsAdd( uiClass, "TEXTURE"        , HB_FUNCNAME( TEXTURE         ) );
    hb_clsAdd( uiClass, "TEXTUREIMAGE"   , HB_FUNCNAME( TEXTUREIMAGE    ) );
    hb_clsAdd( uiClass, "TRANSFORM"      , HB_FUNCNAME( TRANSFORM       ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
