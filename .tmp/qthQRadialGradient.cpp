/*
 * $Id: qthQRadialGradient.wip 130 2011-04-20 15:54:25Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QRadialGradient>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QRADIALGRADIENT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QGRADIENT );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QRADIALGRADIENT )
{ "QRADIALGRADIENT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QRADIALGRADIENT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QGRADIENT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QGRADIENT ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QRADIALGRADIENT )

HB_FUNC( QRADIALGRADIENT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QRadialGradient ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QRadialGradient, new QRadialGradient() );
        return;
    }
    /*
     * _public_functions_ : QRadialGradient ( const QPointF & center, qreal radius, const QPointF & focalPoint )
     */
    if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QPointF" ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_IsObject( 3, "QPointF" ) )
    {
        const QPointF & center = * static_cast<QPointF *>( qth_par_QthObject( 1 ) );
        const QPointF & focalPoint = * static_cast<QPointF *>( qth_par_QthObject( 3 ) );
        qth_itemPushReturn( QtH::QRadialGradient, new QRadialGradient( center, (qreal)  hb_parnd( 2 ), focalPoint ) );
        return;
    }
    /*
     * _public_functions_ : QRadialGradient ( qreal cx, qreal cy, qreal radius, qreal fx, qreal fy )
     */
    if( ( hb_pcount() == 5 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE ) && qth_Is( 5, HB_IT_DOUBLE ) )
    {
        qth_itemPushReturn( QtH::QRadialGradient, new QRadialGradient( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), (qreal)  hb_parnd( 4 ), (qreal)  hb_parnd( 5 ) ) );
        return;
    }
    /*
     * _public_functions_ : QRadialGradient ( const QPointF & center, qreal radius )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QPointF" ) && qth_Is( 2, HB_IT_DOUBLE ) )
    {
        const QPointF & center = * static_cast<QPointF *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QRadialGradient, new QRadialGradient( center, (qreal)  hb_parnd( 2 ) ) );
        return;
    }
    /*
     * _public_functions_ : QRadialGradient ( qreal cx, qreal cy, qreal radius )
     */
    if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) )
    {
        qth_itemPushReturn( QtH::QRadialGradient, new QRadialGradient( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CENTER )
{
    QRadialGradient* p_radialGradient = static_cast<QRadialGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_radialGradient )
    {
        /*
         * _public_functions_ : QPointF  center () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QPointF'
            // qth_itemPushNewReturn( QtH::QPointF, new QPointF( p_radialGradient->center() ), "QPointF" );
            qth_errRT_UNKNOWNOBJ( "QRadialGradient::center", "Don't know how to return type 'QPointF'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FOCALPOINT )
{
    QRadialGradient* p_radialGradient = static_cast<QRadialGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_radialGradient )
    {
        /*
         * _public_functions_ : QPointF  focalPoint () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QPointF'
            // qth_itemPushNewReturn( QtH::QPointF, new QPointF( p_radialGradient->focalPoint() ), "QPointF" );
            qth_errRT_UNKNOWNOBJ( "QRadialGradient::focalPoint", "Don't know how to return type 'QPointF'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RADIUS )
{
    QRadialGradient* p_radialGradient = static_cast<QRadialGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_radialGradient )
    {
        /*
         * _public_functions_ : qreal  radius () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_radialGradient->radius() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCENTER )
{
    QRadialGradient* p_radialGradient = static_cast<QRadialGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_radialGradient )
    {
        /*
         * _public_functions_ : void  setCenter ( const QPointF & center )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPointF" ) )
        {
            const QPointF & center = * static_cast<QPointF *>( qth_par_QthObject( 1 ) );
            p_radialGradient->setCenter( center );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setCenter ( qreal x, qreal y )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) )
        {
            p_radialGradient->setCenter( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFOCALPOINT )
{
    QRadialGradient* p_radialGradient = static_cast<QRadialGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_radialGradient )
    {
        /*
         * _public_functions_ : void  setFocalPoint ( const QPointF & focalPoint )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPointF" ) )
        {
            const QPointF & focalPoint = * static_cast<QPointF *>( qth_par_QthObject( 1 ) );
            p_radialGradient->setFocalPoint( focalPoint );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setFocalPoint ( qreal x, qreal y )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) )
        {
            p_radialGradient->setFocalPoint( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRADIUS )
{
    QRadialGradient* p_radialGradient = static_cast<QRadialGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_radialGradient )
    {
        /*
         * _public_functions_ : void  setRadius ( qreal radius )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_radialGradient->setRadius( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"          , HB_FUNCNAME( NEW           ) );
    hb_clsAdd( uiClass, "CENTER"       , HB_FUNCNAME( CENTER        ) );
    hb_clsAdd( uiClass, "FOCALPOINT"   , HB_FUNCNAME( FOCALPOINT    ) );
    hb_clsAdd( uiClass, "RADIUS"       , HB_FUNCNAME( RADIUS        ) );
    hb_clsAdd( uiClass, "SETCENTER"    , HB_FUNCNAME( SETCENTER     ) );
    hb_clsAdd( uiClass, "SETFOCALPOINT", HB_FUNCNAME( SETFOCALPOINT ) );
    hb_clsAdd( uiClass, "SETRADIUS"    , HB_FUNCNAME( SETRADIUS     ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
