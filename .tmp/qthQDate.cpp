/*
 * $Id: qthQDate.wip 139 2011-07-23 05:56:29Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QDate>

#define MonthNameType                           QDate::MonthNameType

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QDATE );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QDATE )
{ "QDATE", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QDATE )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QDATE )

HB_FUNC( QDATE )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QDate ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QDate, new QDate() );
        return;
    }
    /*
     * _public_functions_ : QDate ( int y, int m, int d )
     */
    if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
    {
        qth_itemPushReturn( QtH::QDate, new QDate( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDDAYS )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : QDate  addDays ( int ndays ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_date->addDays( hb_parni( 1 ) ) ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDMONTHS )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : QDate  addMonths ( int nmonths ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_date->addMonths( hb_parni( 1 ) ) ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDYEARS )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : QDate  addYears ( int nyears ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_date->addYears( hb_parni( 1 ) ) ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAY )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  day () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->day() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAYOFWEEK )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  dayOfWeek () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->dayOfWeek() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAYOFYEAR )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  dayOfYear () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->dayOfYear() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAYSINMONTH )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  daysInMonth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->daysInMonth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAYSINYEAR )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  daysInYear () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->daysInYear() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAYSTO )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  daysTo ( const QDate & d ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
        {
            const QDate & d = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
            hb_retni( p_date->daysTo( d ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETDATE )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : void  getDate ( int * year, int * month, int * day )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) )
        {
            int year = hb_parni( 1 );
            int month = hb_parni( 2 );
            int day = hb_parni( 3 );
            p_date->getDate( &year, &month, &day );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( year, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( month, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( day, 3 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_date->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_ISVALID )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : bool  isValid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_date->isValid() == true );
            return;
        }
    }
    /*
     * _static_public_members_ : bool  isValid ( int year, int month, int day )
     */
    if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
    {
        hb_retl( QDate::isValid( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ) ) == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MONTH )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  month () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->month() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATE )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : bool  setDate ( int year, int month, int day )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) )
        {
            hb_retl( p_date->setDate( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOJULIANDAY )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  toJulianDay () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->toJulianDay() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSTRING )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : QString  toString ( const QString & format ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString format =  qth_par_QString( 1 );
            qth_ret_QString( p_date->toString( format ) );
            return;
        }
        /*
         * _public_functions_ : QString  toString ( Qt::DateFormat format = Qt::TextDate ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::DateFormat", QTH_DEFAULT ) )
        {
            qth_ret_QString( p_date->toString( (Qt::DateFormat) qth_par_IntType( 1, Qt::TextDate ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WEEKNUMBER )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  weekNumber ( int * yearNumber = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF | QTH_DEFAULT ) )
        {
            int yearNumber = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 0;
            hb_retni( p_date->weekNumber( &yearNumber ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( yearNumber, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( YEAR )
{
    QDate* p_date = static_cast<QDate *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_date )
    {
        /*
         * _public_functions_ : int  year () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_date->year() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_CURRENTDATE )
{
    /*
     * _static_public_members_ : QDate  currentDate ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushNewReturn( QtH::QDate, new QDate( QDate::currentDate() ), "QDate" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_FROMJULIANDAY )
{
    /*
     * _static_public_members_ : QDate  fromJulianDay ( int jd )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_itemPushNewReturn( QtH::QDate, new QDate( QDate::fromJulianDay( hb_parni( 1 ) ) ), "QDate" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_FROMSTRING )
{
    /*
     * _static_public_members_ : QDate  fromString ( const QString & string, Qt::DateFormat format = Qt::TextDate )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_IsIntType( 2, "Qt::DateFormat", QTH_DEFAULT ) )
    {
        QString string =  qth_par_QString( 1 );
        qth_itemPushNewReturn( QtH::QDate, new QDate( QDate::fromString( string, (Qt::DateFormat) qth_par_IntType( 2, Qt::TextDate ) ) ), "QDate" );
        return;
    }
    /*
     * _static_public_members_ : QDate  fromString ( const QString & string, const QString & format )
     */
    if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsString( 2 ) )
    {
        QString string =  qth_par_QString( 1 );
        QString format =  qth_par_QString( 2 );
        qth_itemPushNewReturn( QtH::QDate, new QDate( QDate::fromString( string, format ) ), "QDate" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_ISLEAPYEAR )
{
    /*
     * _static_public_members_ : bool  isLeapYear ( int year )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        hb_retl( QDate::isLeapYear( hb_parni( 1 ) ) == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_LONGDAYNAME )
{
    /*
     * _static_public_members_ : QString  longDayName ( int weekday )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_ret_QString( QDate::longDayName( hb_parni( 1 ) ) );
        return;
    }
    /*
     * _static_public_members_ : QString  longDayName ( int weekday, MonthNameType type )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "MonthNameType" ) )
    {
        qth_ret_QString( QDate::longDayName( hb_parni( 1 ), (MonthNameType)  qth_par_IntType( 2 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_LONGMONTHNAME )
{
    /*
     * _static_public_members_ : QString  longMonthName ( int month )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_ret_QString( QDate::longMonthName( hb_parni( 1 ) ) );
        return;
    }
    /*
     * _static_public_members_ : QString  longMonthName ( int month, MonthNameType type )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "MonthNameType" ) )
    {
        qth_ret_QString( QDate::longMonthName( hb_parni( 1 ), (MonthNameType)  qth_par_IntType( 2 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_SHORTDAYNAME )
{
    /*
     * _static_public_members_ : QString  shortDayName ( int weekday )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_ret_QString( QDate::shortDayName( hb_parni( 1 ) ) );
        return;
    }
    /*
     * _static_public_members_ : QString  shortDayName ( int weekday, MonthNameType type )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "MonthNameType" ) )
    {
        qth_ret_QString( QDate::shortDayName( hb_parni( 1 ), (MonthNameType)  qth_par_IntType( 2 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATE_SHORTMONTHNAME )
{
    /*
     * _static_public_members_ : QString  shortMonthName ( int month )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_ret_QString( QDate::shortMonthName( hb_parni( 1 ) ) );
        return;
    }
    /*
     * _static_public_members_ : QString  shortMonthName ( int month, MonthNameType type )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "MonthNameType" ) )
    {
        qth_ret_QString( QDate::shortMonthName( hb_parni( 1 ), (MonthNameType)  qth_par_IntType( 2 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"           , HB_FUNCNAME( NEW                  ) );
    hb_clsAdd( uiClass, "ADDDAYS"       , HB_FUNCNAME( ADDDAYS              ) );
    hb_clsAdd( uiClass, "ADDMONTHS"     , HB_FUNCNAME( ADDMONTHS            ) );
    hb_clsAdd( uiClass, "ADDYEARS"      , HB_FUNCNAME( ADDYEARS             ) );
    hb_clsAdd( uiClass, "DAY"           , HB_FUNCNAME( DAY                  ) );
    hb_clsAdd( uiClass, "DAYOFWEEK"     , HB_FUNCNAME( DAYOFWEEK            ) );
    hb_clsAdd( uiClass, "DAYOFYEAR"     , HB_FUNCNAME( DAYOFYEAR            ) );
    hb_clsAdd( uiClass, "DAYSINMONTH"   , HB_FUNCNAME( DAYSINMONTH          ) );
    hb_clsAdd( uiClass, "DAYSINYEAR"    , HB_FUNCNAME( DAYSINYEAR           ) );
    hb_clsAdd( uiClass, "DAYSTO"        , HB_FUNCNAME( DAYSTO               ) );
    hb_clsAdd( uiClass, "GETDATE"       , HB_FUNCNAME( GETDATE              ) );
    hb_clsAdd( uiClass, "ISNULL"        , HB_FUNCNAME( ISNULL               ) );
    hb_clsAdd( uiClass, "ISVALID"       , HB_FUNCNAME( QDATE_ISVALID        ) );
    hb_clsAdd( uiClass, "MONTH"         , HB_FUNCNAME( MONTH                ) );
    hb_clsAdd( uiClass, "SETDATE"       , HB_FUNCNAME( SETDATE              ) );
    hb_clsAdd( uiClass, "TOJULIANDAY"   , HB_FUNCNAME( TOJULIANDAY          ) );
    hb_clsAdd( uiClass, "TOSTRING"      , HB_FUNCNAME( TOSTRING             ) );
    hb_clsAdd( uiClass, "WEEKNUMBER"    , HB_FUNCNAME( WEEKNUMBER           ) );
    hb_clsAdd( uiClass, "YEAR"          , HB_FUNCNAME( YEAR                 ) );
    hb_clsAdd( uiClass, "CURRENTDATE"   , HB_FUNCNAME( QDATE_CURRENTDATE    ) );
    hb_clsAdd( uiClass, "FROMJULIANDAY" , HB_FUNCNAME( QDATE_FROMJULIANDAY  ) );
    hb_clsAdd( uiClass, "FROMSTRING"    , HB_FUNCNAME( QDATE_FROMSTRING     ) );
    hb_clsAdd( uiClass, "ISLEAPYEAR"    , HB_FUNCNAME( QDATE_ISLEAPYEAR     ) );
    hb_clsAdd( uiClass, "LONGDAYNAME"   , HB_FUNCNAME( QDATE_LONGDAYNAME    ) );
    hb_clsAdd( uiClass, "LONGMONTHNAME" , HB_FUNCNAME( QDATE_LONGMONTHNAME  ) );
    hb_clsAdd( uiClass, "SHORTDAYNAME"  , HB_FUNCNAME( QDATE_SHORTDAYNAME   ) );
    hb_clsAdd( uiClass, "SHORTMONTHNAME", HB_FUNCNAME( QDATE_SHORTMONTHNAME ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
