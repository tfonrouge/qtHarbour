/*
 * $Id: qthQPaintDevice.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QPaintDevice>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QPAINTDEVICE );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QPAINTDEVICE )
{ "QPAINTDEVICE", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QPAINTDEVICE )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QPAINTDEVICE )

HB_FUNC( QPAINTDEVICE )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( COLORCOUNT )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  colorCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->colorCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DEPTH )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  depth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->depth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHT )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  height () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->height() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHTMM )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  heightMM () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->heightMM() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOGICALDPIX )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  logicalDpiX () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->logicalDpiX() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOGICALDPIY )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  logicalDpiY () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->logicalDpiY() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NUMCOLORS )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  numColors () const (deprecated)
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->numColors() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PAINTENGINE )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : virtual QPaintEngine *  paintEngine () const = 0
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QPaintEngine'
            // qth_itemReturn( (PCPP_OBJECT) p_paintDevice->paintEngine(), "QPaintEngine" );
            qth_errRT_UNKNOWNOBJ( "QPaintDevice::paintEngine", "Don't know how to return type 'QPaintEngine'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PAINTINGACTIVE )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : bool  paintingActive () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_paintDevice->paintingActive() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PHYSICALDPIX )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  physicalDpiX () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->physicalDpiX() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PHYSICALDPIY )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  physicalDpiY () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->physicalDpiY() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDTH )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  width () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->width() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDTHMM )
{
    QPaintDevice* p_paintDevice = static_cast<QPaintDevice *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_paintDevice )
    {
        /*
         * _public_functions_ : int  widthMM () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_paintDevice->widthMM() );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "COLORCOUNT"    , HB_FUNCNAME( COLORCOUNT     ) );
    hb_clsAdd( uiClass, "DEPTH"         , HB_FUNCNAME( DEPTH          ) );
    hb_clsAdd( uiClass, "HEIGHT"        , HB_FUNCNAME( HEIGHT         ) );
    hb_clsAdd( uiClass, "HEIGHTMM"      , HB_FUNCNAME( HEIGHTMM       ) );
    hb_clsAdd( uiClass, "LOGICALDPIX"   , HB_FUNCNAME( LOGICALDPIX    ) );
    hb_clsAdd( uiClass, "LOGICALDPIY"   , HB_FUNCNAME( LOGICALDPIY    ) );
    hb_clsAdd( uiClass, "NUMCOLORS"     , HB_FUNCNAME( NUMCOLORS      ) );
    hb_clsAdd( uiClass, "PAINTENGINE"   , HB_FUNCNAME( PAINTENGINE    ) );
    hb_clsAdd( uiClass, "PAINTINGACTIVE", HB_FUNCNAME( PAINTINGACTIVE ) );
    hb_clsAdd( uiClass, "PHYSICALDPIX"  , HB_FUNCNAME( PHYSICALDPIX   ) );
    hb_clsAdd( uiClass, "PHYSICALDPIY"  , HB_FUNCNAME( PHYSICALDPIY   ) );
    hb_clsAdd( uiClass, "WIDTH"         , HB_FUNCNAME( WIDTH          ) );
    hb_clsAdd( uiClass, "WIDTHMM"       , HB_FUNCNAME( WIDTHMM        ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
