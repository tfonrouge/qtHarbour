/*
 * $Id: qthQDateTimeEdit.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QDateTimeEdit>

#define Section                                 QDateTimeEdit::Section
#define Sections                                QDateTimeEdit::Sections

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QDATETIMEEDIT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QABSTRACTSPINBOX );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QTIME ); // REQUEST'ed Class
HB_FUNC_EXTERN( QDATETIME ); // REQUEST'ed Class
HB_FUNC_EXTERN( QDATE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QDATETIMEEDIT )
{ "QDATETIMEEDIT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QDATETIMEEDIT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QABSTRACTSPINBOX", { HB_FS_PUBLIC }, { HB_FUNCNAME( QABSTRACTSPINBOX ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QTIME", {HB_FS_PUBLIC}, {HB_FUNCNAME( QTIME )}, NULL }, // REQUEST'ed Class
{ "QDATETIME", {HB_FS_PUBLIC}, {HB_FUNCNAME( QDATETIME )}, NULL }, // REQUEST'ed Class
{ "QDATE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QDATE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QDATETIMEEDIT )

HB_FUNC( QDATETIMEEDIT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QDateTimeEdit ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QDateTimeEdit, new QDateTimeEdit( parent ) );
        return;
    }
    /*
     * _public_functions_ : QDateTimeEdit ( const QDateTime & datetime, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QDateTime" ) && qth_Is( 2, "QWidget", QTH_DEFAULT ) )
    {
        const QDateTime & datetime = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
        QWidget* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 2 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QDateTimeEdit, new QDateTimeEdit( datetime, parent ) );
        return;
    }
    /*
     * _public_functions_ : QDateTimeEdit ( const QDate & date, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QDate" ) && qth_Is( 2, "QWidget", QTH_DEFAULT ) )
    {
        const QDate & date = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
        QWidget* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 2 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QDateTimeEdit, new QDateTimeEdit( date, parent ) );
        return;
    }
    /*
     * _public_functions_ : QDateTimeEdit ( const QTime & time, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QTime" ) && qth_Is( 2, "QWidget", QTH_DEFAULT ) )
    {
        const QTime & time = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
        QWidget* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 2 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QDateTimeEdit, new QDateTimeEdit( time, parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CALENDARPOPUP )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : bool  calendarPopup () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_dateTimeEdit->calendarPopup() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CALENDARWIDGET )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QCalendarWidget *  calendarWidget () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QCalendarWidget'
            // qth_itemReturn( (PCPP_OBJECT) p_dateTimeEdit->calendarWidget(), "QCalendarWidget" );
            qth_errRT_UNKNOWNOBJ( "QDateTimeEdit::calendarWidget", "Don't know how to return type 'QCalendarWidget'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMAXIMUMDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  clearMaximumDate ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clearMaximumDate();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMAXIMUMDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  clearMaximumDateTime ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clearMaximumDateTime();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMAXIMUMTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  clearMaximumTime ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clearMaximumTime();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMINIMUMDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  clearMinimumDate ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clearMinimumDate();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMINIMUMDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  clearMinimumDateTime ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clearMinimumDateTime();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARMINIMUMTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  clearMinimumTime ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clearMinimumTime();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTSECTION )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : Section  currentSection () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTimeEdit->currentSection() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTSECTIONINDEX )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : int  currentSectionIndex () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTimeEdit->currentSectionIndex() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QDate  date () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_dateTimeEdit->date() ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QDateTime  dateTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTimeEdit->dateTime() ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DISPLAYFORMAT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QString  displayFormat () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_dateTimeEdit->displayFormat() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DISPLAYEDSECTIONS )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : Sections  displayedSections () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTimeEdit->displayedSections() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QDate  maximumDate () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_dateTimeEdit->maximumDate() ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QDateTime  maximumDateTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTimeEdit->maximumDateTime() ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QTime  maximumTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_dateTimeEdit->maximumTime() ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QDate  minimumDate () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_dateTimeEdit->minimumDate() ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QDateTime  minimumDateTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTimeEdit->minimumDateTime() ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QTime  minimumTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_dateTimeEdit->minimumTime() ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SECTIONAT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : Section  sectionAt ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_dateTimeEdit->sectionAt( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SECTIONCOUNT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : int  sectionCount () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTimeEdit->sectionCount() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SECTIONTEXT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QString  sectionText ( Section section ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Section" ) )
        {
            qth_ret_QString( p_dateTimeEdit->sectionText( (Section)  qth_par_IntType( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCALENDARPOPUP )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setCalendarPopup ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_dateTimeEdit->setCalendarPopup( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCALENDARWIDGET )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setCalendarWidget ( QCalendarWidget * calendarWidget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QCalendarWidget" ) )
        {
            p_dateTimeEdit->setCalendarWidget( static_cast<QCalendarWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTSECTION )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setCurrentSection ( Section section )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Section" ) )
        {
            p_dateTimeEdit->setCurrentSection( (Section)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTSECTIONINDEX )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setCurrentSectionIndex ( int index )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_dateTimeEdit->setCurrentSectionIndex( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATERANGE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setDateRange ( const QDate & min, const QDate & max )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QDate" ) && qth_IsObject( 2, "QDate" ) )
        {
            const QDate & min = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
            const QDate & max = * static_cast<QDate *>( qth_par_QthObject( 2 ) );
            p_dateTimeEdit->setDateRange( min, max );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATETIMERANGE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setDateTimeRange ( const QDateTime & min, const QDateTime & max )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QDateTime" ) && qth_IsObject( 2, "QDateTime" ) )
        {
            const QDateTime & min = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            const QDateTime & max = * static_cast<QDateTime *>( qth_par_QthObject( 2 ) );
            p_dateTimeEdit->setDateTimeRange( min, max );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDISPLAYFORMAT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setDisplayFormat ( const QString & format )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString format =  qth_par_QString( 1 );
            p_dateTimeEdit->setDisplayFormat( format );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUMDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setMaximumDate ( const QDate & max )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
        {
            const QDate & max = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setMaximumDate( max );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUMDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setMaximumDateTime ( const QDateTime & dt )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
        {
            const QDateTime & dt = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setMaximumDateTime( dt );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUMTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setMaximumTime ( const QTime & max )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
        {
            const QTime & max = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setMaximumTime( max );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setMinimumDate ( const QDate & min )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
        {
            const QDate & min = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setMinimumDate( min );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setMinimumDateTime ( const QDateTime & dt )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
        {
            const QDateTime & dt = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setMinimumDateTime( dt );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setMinimumTime ( const QTime & min )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
        {
            const QTime & min = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setMinimumTime( min );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSELECTEDSECTION )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setSelectedSection ( Section section )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Section" ) )
        {
            p_dateTimeEdit->setSelectedSection( (Section)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTIMERANGE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setTimeRange ( const QTime & min, const QTime & max )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QTime" ) && qth_IsObject( 2, "QTime" ) )
        {
            const QTime & min = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            const QTime & max = * static_cast<QTime *>( qth_par_QthObject( 2 ) );
            p_dateTimeEdit->setTimeRange( min, max );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTIMESPEC )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : void  setTimeSpec ( Qt::TimeSpec spec )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::TimeSpec" ) )
        {
            p_dateTimeEdit->setTimeSpec( (Qt::TimeSpec)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : QTime  time () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_dateTimeEdit->time() ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TIMESPEC )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_functions_ : Qt::TimeSpec  timeSpec () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTimeEdit->timeSpec() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_dateTimeEdit->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EVENT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _reimplemented_public_functions_ : virtual bool  event ( QEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QEvent" ) )
        {
            hb_retl( p_dateTimeEdit->event( static_cast<QEvent *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_dateTimeEdit->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STEPBY )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  stepBy ( int steps )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_dateTimeEdit->stepBy( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATE )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_slots_ : void  setDate ( const QDate & date )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
        {
            const QDate & date = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setDate( date );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATETIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_slots_ : void  setDateTime ( const QDateTime & dateTime )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
        {
            const QDateTime & dateTime = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setDateTime( dateTime );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTIME )
{
    QDateTimeEdit* p_dateTimeEdit = static_cast<QDateTimeEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTimeEdit )
    {
        /*
         * _public_slots_ : void  setTime ( const QTime & time )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
        {
            const QTime & time = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            p_dateTimeEdit->setTime( time );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                   , HB_FUNCNAME( NEW                    ) );
    hb_clsAdd( uiClass, "CALENDARPOPUP"         , HB_FUNCNAME( CALENDARPOPUP          ) );
    hb_clsAdd( uiClass, "CALENDARWIDGET"        , HB_FUNCNAME( CALENDARWIDGET         ) );
    hb_clsAdd( uiClass, "CLEARMAXIMUMDATE"      , HB_FUNCNAME( CLEARMAXIMUMDATE       ) );
    hb_clsAdd( uiClass, "CLEARMAXIMUMDATETIME"  , HB_FUNCNAME( CLEARMAXIMUMDATETIME   ) );
    hb_clsAdd( uiClass, "CLEARMAXIMUMTIME"      , HB_FUNCNAME( CLEARMAXIMUMTIME       ) );
    hb_clsAdd( uiClass, "CLEARMINIMUMDATE"      , HB_FUNCNAME( CLEARMINIMUMDATE       ) );
    hb_clsAdd( uiClass, "CLEARMINIMUMDATETIME"  , HB_FUNCNAME( CLEARMINIMUMDATETIME   ) );
    hb_clsAdd( uiClass, "CLEARMINIMUMTIME"      , HB_FUNCNAME( CLEARMINIMUMTIME       ) );
    hb_clsAdd( uiClass, "CURRENTSECTION"        , HB_FUNCNAME( CURRENTSECTION         ) );
    hb_clsAdd( uiClass, "CURRENTSECTIONINDEX"   , HB_FUNCNAME( CURRENTSECTIONINDEX    ) );
    hb_clsAdd( uiClass, "DATE"                  , HB_FUNCNAME( DATE                   ) );
    hb_clsAdd( uiClass, "DATETIME"              , HB_FUNCNAME( DATETIME               ) );
    hb_clsAdd( uiClass, "DISPLAYFORMAT"         , HB_FUNCNAME( DISPLAYFORMAT          ) );
    hb_clsAdd( uiClass, "DISPLAYEDSECTIONS"     , HB_FUNCNAME( DISPLAYEDSECTIONS      ) );
    hb_clsAdd( uiClass, "MAXIMUMDATE"           , HB_FUNCNAME( MAXIMUMDATE            ) );
    hb_clsAdd( uiClass, "MAXIMUMDATETIME"       , HB_FUNCNAME( MAXIMUMDATETIME        ) );
    hb_clsAdd( uiClass, "MAXIMUMTIME"           , HB_FUNCNAME( MAXIMUMTIME            ) );
    hb_clsAdd( uiClass, "MINIMUMDATE"           , HB_FUNCNAME( MINIMUMDATE            ) );
    hb_clsAdd( uiClass, "MINIMUMDATETIME"       , HB_FUNCNAME( MINIMUMDATETIME        ) );
    hb_clsAdd( uiClass, "MINIMUMTIME"           , HB_FUNCNAME( MINIMUMTIME            ) );
    hb_clsAdd( uiClass, "SECTIONAT"             , HB_FUNCNAME( SECTIONAT              ) );
    hb_clsAdd( uiClass, "SECTIONCOUNT"          , HB_FUNCNAME( SECTIONCOUNT           ) );
    hb_clsAdd( uiClass, "SECTIONTEXT"           , HB_FUNCNAME( SECTIONTEXT            ) );
    hb_clsAdd( uiClass, "SETCALENDARPOPUP"      , HB_FUNCNAME( SETCALENDARPOPUP       ) );
    hb_clsAdd( uiClass, "SETCALENDARWIDGET"     , HB_FUNCNAME( SETCALENDARWIDGET      ) );
    hb_clsAdd( uiClass, "SETCURRENTSECTION"     , HB_FUNCNAME( SETCURRENTSECTION      ) );
    hb_clsAdd( uiClass, "SETCURRENTSECTIONINDEX", HB_FUNCNAME( SETCURRENTSECTIONINDEX ) );
    hb_clsAdd( uiClass, "SETDATERANGE"          , HB_FUNCNAME( SETDATERANGE           ) );
    hb_clsAdd( uiClass, "SETDATETIMERANGE"      , HB_FUNCNAME( SETDATETIMERANGE       ) );
    hb_clsAdd( uiClass, "SETDISPLAYFORMAT"      , HB_FUNCNAME( SETDISPLAYFORMAT       ) );
    hb_clsAdd( uiClass, "SETMAXIMUMDATE"        , HB_FUNCNAME( SETMAXIMUMDATE         ) );
    hb_clsAdd( uiClass, "SETMAXIMUMDATETIME"    , HB_FUNCNAME( SETMAXIMUMDATETIME     ) );
    hb_clsAdd( uiClass, "SETMAXIMUMTIME"        , HB_FUNCNAME( SETMAXIMUMTIME         ) );
    hb_clsAdd( uiClass, "SETMINIMUMDATE"        , HB_FUNCNAME( SETMINIMUMDATE         ) );
    hb_clsAdd( uiClass, "SETMINIMUMDATETIME"    , HB_FUNCNAME( SETMINIMUMDATETIME     ) );
    hb_clsAdd( uiClass, "SETMINIMUMTIME"        , HB_FUNCNAME( SETMINIMUMTIME         ) );
    hb_clsAdd( uiClass, "SETSELECTEDSECTION"    , HB_FUNCNAME( SETSELECTEDSECTION     ) );
    hb_clsAdd( uiClass, "SETTIMERANGE"          , HB_FUNCNAME( SETTIMERANGE           ) );
    hb_clsAdd( uiClass, "SETTIMESPEC"           , HB_FUNCNAME( SETTIMESPEC            ) );
    hb_clsAdd( uiClass, "TIME"                  , HB_FUNCNAME( TIME                   ) );
    hb_clsAdd( uiClass, "TIMESPEC"              , HB_FUNCNAME( TIMESPEC               ) );
    hb_clsAdd( uiClass, "CLEAR"                 , HB_FUNCNAME( CLEAR                  ) );
    hb_clsAdd( uiClass, "EVENT"                 , HB_FUNCNAME( EVENT                  ) );
    hb_clsAdd( uiClass, "SIZEHINT"              , HB_FUNCNAME( SIZEHINT               ) );
    hb_clsAdd( uiClass, "STEPBY"                , HB_FUNCNAME( STEPBY                 ) );
    hb_clsAdd( uiClass, "SETDATE"               , HB_FUNCNAME( SETDATE                ) );
    hb_clsAdd( uiClass, "SETDATETIME"           , HB_FUNCNAME( SETDATETIME            ) );
    hb_clsAdd( uiClass, "SETTIME"               , HB_FUNCNAME( SETTIME                ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
