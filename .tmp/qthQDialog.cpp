/*
 * $Id: qthQDialog.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QDialog>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QDIALOG );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QDIALOG )
{ "QDIALOG", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QDIALOG )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QDIALOG )

HB_FUNC( QDIALOG )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QDialog ( QWidget * parent = 0, Qt::WindowFlags f = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) && qth_IsIntType( 2, "Qt::WindowFlags", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QDialog, new QDialog( parent, (Qt::WindowFlags) qth_par_IntType( 2, 0 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISSIZEGRIPENABLED )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_functions_ : bool  isSizeGripEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_dialog->isSizeGripEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESULT )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_functions_ : int  result () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dialog->result() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMODAL )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_functions_ : void  setModal ( bool modal )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_dialog->setModal( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRESULT )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_functions_ : void  setResult ( int i )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_dialog->setResult( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSIZEGRIPENABLED )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_functions_ : void  setSizeGripEnabled ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_dialog->setSizeGripEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_dialog->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVISIBLE )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  setVisible ( bool visible )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_dialog->setVisible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_dialog->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACCEPT )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_slots_ : virtual void  accept ()
         */
        if( hb_pcount() == 0 )
        {
            p_dialog->accept();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DONE )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_slots_ : virtual void  done ( int r )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_dialog->done( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EXEC )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_slots_ : int  exec ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dialog->exec() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OPEN )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_slots_ : void  open ()
         */
        if( hb_pcount() == 0 )
        {
            p_dialog->open();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REJECT )
{
    QDialog* p_dialog = static_cast<QDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dialog )
    {
        /*
         * _public_slots_ : virtual void  reject ()
         */
        if( hb_pcount() == 0 )
        {
            p_dialog->reject();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"               , HB_FUNCNAME( NEW                ) );
    hb_clsAdd( uiClass, "ISSIZEGRIPENABLED" , HB_FUNCNAME( ISSIZEGRIPENABLED  ) );
    hb_clsAdd( uiClass, "RESULT"            , HB_FUNCNAME( RESULT             ) );
    hb_clsAdd( uiClass, "SETMODAL"          , HB_FUNCNAME( SETMODAL           ) );
    hb_clsAdd( uiClass, "SETRESULT"         , HB_FUNCNAME( SETRESULT          ) );
    hb_clsAdd( uiClass, "SETSIZEGRIPENABLED", HB_FUNCNAME( SETSIZEGRIPENABLED ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT"   , HB_FUNCNAME( MINIMUMSIZEHINT    ) );
    hb_clsAdd( uiClass, "SETVISIBLE"        , HB_FUNCNAME( SETVISIBLE         ) );
    hb_clsAdd( uiClass, "SIZEHINT"          , HB_FUNCNAME( SIZEHINT           ) );
    hb_clsAdd( uiClass, "ACCEPT"            , HB_FUNCNAME( ACCEPT             ) );
    hb_clsAdd( uiClass, "DONE"              , HB_FUNCNAME( DONE               ) );
    hb_clsAdd( uiClass, "EXEC"              , HB_FUNCNAME( EXEC               ) );
    hb_clsAdd( uiClass, "OPEN"              , HB_FUNCNAME( OPEN               ) );
    hb_clsAdd( uiClass, "REJECT"            , HB_FUNCNAME( REJECT             ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
