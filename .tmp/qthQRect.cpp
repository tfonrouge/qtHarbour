/*
 * $Id: qthQRect.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QRect>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QRECT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QPOINT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QRECT )
{ "QRECT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QRECT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QPOINT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QPOINT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QRECT )

HB_FUNC( QRECT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QRect ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QRect, new QRect() );
        return;
    }
    /*
     * _public_functions_ : QRect ( const QPoint & topLeft, const QPoint & bottomRight )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QPoint" ) && qth_IsObject( 2, "QPoint" ) )
    {
        const QPoint & topLeft = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        const QPoint & bottomRight = * static_cast<QPoint *>( qth_par_QthObject( 2 ) );
        qth_itemPushReturn( QtH::QRect, new QRect( topLeft, bottomRight ) );
        return;
    }
    /*
     * _public_functions_ : QRect ( const QPoint & topLeft, const QSize & size )
     */
    if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QPoint" ) && qth_IsObject( 2, "QSize" ) )
    {
        const QPoint & topLeft = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 2 ) );
        qth_itemPushReturn( QtH::QRect, new QRect( topLeft, size ) );
        return;
    }
    /*
     * _public_functions_ : QRect ( int x, int y, int width, int height )
     */
    if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
    {
        qth_itemPushReturn( QtH::QRect, new QRect( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADJUST )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  adjust ( int dx1, int dy1, int dx2, int dy2 )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_rect->adjust( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADJUSTED )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QRect  adjusted ( int dx1, int dy1, int dx2, int dy2 ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_rect->adjusted( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BOTTOM )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  bottom () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->bottom() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BOTTOMLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QPoint  bottomLeft () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_rect->bottomLeft() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BOTTOMRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QPoint  bottomRight () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_rect->bottomRight() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CENTER )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QPoint  center () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_rect->center() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTAINS )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : bool  contains ( const QPoint & point, bool proper = false ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QPoint" ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            const QPoint & point = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            bool proper = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : false;
            hb_retl( p_rect->contains( point, proper ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  contains ( int x, int y, bool proper ) const
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_LOGICAL ) )
        {
            hb_retl( p_rect->contains( hb_parni( 1 ), hb_parni( 2 ), hb_parl( 3 ) ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  contains ( int x, int y ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retl( p_rect->contains( hb_parni( 1 ), hb_parni( 2 ) ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  contains ( const QRect & rectangle, bool proper = false ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QRect" ) && qth_Is( 2, HB_IT_LOGICAL, QTH_DEFAULT ) )
        {
            const QRect & rectangle = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            bool proper = hb_param( 2, HB_IT_LOGICAL ) ? hb_parl( 2 ) : false;
            hb_retl( p_rect->contains( rectangle, proper ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETCOORDS )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  getCoords ( int * x1, int * y1, int * x2, int * y2 ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF ) )
        {
            int x1 = hb_parni( 1 );
            int y1 = hb_parni( 2 );
            int x2 = hb_parni( 3 );
            int y2 = hb_parni( 4 );
            p_rect->getCoords( &x1, &y1, &x2, &y2 );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( x1, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( y1, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( x2, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( y2, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETRECT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  getRect ( int * x, int * y, int * width, int * height ) const
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF ) )
        {
            int x = hb_parni( 1 );
            int y = hb_parni( 2 );
            int width = hb_parni( 3 );
            int height = hb_parni( 4 );
            p_rect->getRect( &x, &y, &width, &height );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( x, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( y, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( width, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( height, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  height () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->height() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INTERSECTED )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QRect  intersected ( const QRect & rectangle ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & rectangle = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_rect->intersected( rectangle ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INTERSECTS )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : bool  intersects ( const QRect & rectangle ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & rectangle = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            hb_retl( p_rect->intersects( rectangle ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISEMPTY )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : bool  isEmpty () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_rect->isEmpty() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_rect->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVALID )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : bool  isValid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_rect->isValid() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  left () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->left() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVEBOTTOM )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveBottom ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->moveBottom( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVEBOTTOMLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveBottomLeft ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->moveBottomLeft( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVEBOTTOMRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveBottomRight ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->moveBottomRight( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVECENTER )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveCenter ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->moveCenter( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVELEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveLeft ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->moveLeft( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVERIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveRight ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->moveRight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVETO )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveTo ( int x, int y )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_rect->moveTo( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  moveTo ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->moveTo( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVETOP )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveTop ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->moveTop( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVETOPLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveTopLeft ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->moveTopLeft( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVETOPRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  moveTopRight ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->moveTopRight( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NORMALIZED )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QRect  normalized () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_rect->normalized() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  right () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->right() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBOTTOM )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setBottom ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setBottom( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBOTTOMLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setBottomLeft ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->setBottomLeft( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBOTTOMRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setBottomRight ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->setBottomRight( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOORDS )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setCoords ( int x1, int y1, int x2, int y2 )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_rect->setCoords( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHEIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setHeight ( int height )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setHeight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setLeft ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setLeft( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRECT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setRect ( int x, int y, int width, int height )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_rect->setRect( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setRight ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setRight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSIZE )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setSize ( const QSize & size )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_rect->setSize( size );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOP )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setTop ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setTop( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOPLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setTopLeft ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->setTopLeft( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOPRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setTopRight ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->setTopRight( position );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWIDTH )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setWidth ( int width )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETX )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setX ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setX( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETY )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  setY ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_rect->setY( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZE )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QSize  size () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_rect->size() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOP )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  top () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->top() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOPLEFT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QPoint  topLeft () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_rect->topLeft() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOPRIGHT )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QPoint  topRight () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_rect->topRight() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TRANSLATE )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : void  translate ( int dx, int dy )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_rect->translate( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  translate ( const QPoint & offset )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & offset = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            p_rect->translate( offset );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TRANSLATED )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QRect  translated ( int dx, int dy ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_rect->translated( hb_parni( 1 ), hb_parni( 2 ) ) ), "QRect" );
            return;
        }
        /*
         * _public_functions_ : QRect  translated ( const QPoint & offset ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & offset = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_rect->translated( offset ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNITED )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : QRect  united ( const QRect & rectangle ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & rectangle = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_rect->united( rectangle ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDTH )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  width () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->width() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  x () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->x() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( Y )
{
    QRect* p_rect = static_cast<QRect *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_rect )
    {
        /*
         * _public_functions_ : int  y () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_rect->y() );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"            , HB_FUNCNAME( NEW             ) );
    hb_clsAdd( uiClass, "ADJUST"         , HB_FUNCNAME( ADJUST          ) );
    hb_clsAdd( uiClass, "ADJUSTED"       , HB_FUNCNAME( ADJUSTED        ) );
    hb_clsAdd( uiClass, "BOTTOM"         , HB_FUNCNAME( BOTTOM          ) );
    hb_clsAdd( uiClass, "BOTTOMLEFT"     , HB_FUNCNAME( BOTTOMLEFT      ) );
    hb_clsAdd( uiClass, "BOTTOMRIGHT"    , HB_FUNCNAME( BOTTOMRIGHT     ) );
    hb_clsAdd( uiClass, "CENTER"         , HB_FUNCNAME( CENTER          ) );
    hb_clsAdd( uiClass, "CONTAINS"       , HB_FUNCNAME( CONTAINS        ) );
    hb_clsAdd( uiClass, "GETCOORDS"      , HB_FUNCNAME( GETCOORDS       ) );
    hb_clsAdd( uiClass, "GETRECT"        , HB_FUNCNAME( GETRECT         ) );
    hb_clsAdd( uiClass, "HEIGHT"         , HB_FUNCNAME( HEIGHT          ) );
    hb_clsAdd( uiClass, "INTERSECTED"    , HB_FUNCNAME( INTERSECTED     ) );
    hb_clsAdd( uiClass, "INTERSECTS"     , HB_FUNCNAME( INTERSECTS      ) );
    hb_clsAdd( uiClass, "ISEMPTY"        , HB_FUNCNAME( ISEMPTY         ) );
    hb_clsAdd( uiClass, "ISNULL"         , HB_FUNCNAME( ISNULL          ) );
    hb_clsAdd( uiClass, "ISVALID"        , HB_FUNCNAME( ISVALID         ) );
    hb_clsAdd( uiClass, "LEFT"           , HB_FUNCNAME( LEFT            ) );
    hb_clsAdd( uiClass, "MOVEBOTTOM"     , HB_FUNCNAME( MOVEBOTTOM      ) );
    hb_clsAdd( uiClass, "MOVEBOTTOMLEFT" , HB_FUNCNAME( MOVEBOTTOMLEFT  ) );
    hb_clsAdd( uiClass, "MOVEBOTTOMRIGHT", HB_FUNCNAME( MOVEBOTTOMRIGHT ) );
    hb_clsAdd( uiClass, "MOVECENTER"     , HB_FUNCNAME( MOVECENTER      ) );
    hb_clsAdd( uiClass, "MOVELEFT"       , HB_FUNCNAME( MOVELEFT        ) );
    hb_clsAdd( uiClass, "MOVERIGHT"      , HB_FUNCNAME( MOVERIGHT       ) );
    hb_clsAdd( uiClass, "MOVETO"         , HB_FUNCNAME( MOVETO          ) );
    hb_clsAdd( uiClass, "MOVETOP"        , HB_FUNCNAME( MOVETOP         ) );
    hb_clsAdd( uiClass, "MOVETOPLEFT"    , HB_FUNCNAME( MOVETOPLEFT     ) );
    hb_clsAdd( uiClass, "MOVETOPRIGHT"   , HB_FUNCNAME( MOVETOPRIGHT    ) );
    hb_clsAdd( uiClass, "NORMALIZED"     , HB_FUNCNAME( NORMALIZED      ) );
    hb_clsAdd( uiClass, "RIGHT"          , HB_FUNCNAME( RIGHT           ) );
    hb_clsAdd( uiClass, "SETBOTTOM"      , HB_FUNCNAME( SETBOTTOM       ) );
    hb_clsAdd( uiClass, "SETBOTTOMLEFT"  , HB_FUNCNAME( SETBOTTOMLEFT   ) );
    hb_clsAdd( uiClass, "SETBOTTOMRIGHT" , HB_FUNCNAME( SETBOTTOMRIGHT  ) );
    hb_clsAdd( uiClass, "SETCOORDS"      , HB_FUNCNAME( SETCOORDS       ) );
    hb_clsAdd( uiClass, "SETHEIGHT"      , HB_FUNCNAME( SETHEIGHT       ) );
    hb_clsAdd( uiClass, "SETLEFT"        , HB_FUNCNAME( SETLEFT         ) );
    hb_clsAdd( uiClass, "SETRECT"        , HB_FUNCNAME( SETRECT         ) );
    hb_clsAdd( uiClass, "SETRIGHT"       , HB_FUNCNAME( SETRIGHT        ) );
    hb_clsAdd( uiClass, "SETSIZE"        , HB_FUNCNAME( SETSIZE         ) );
    hb_clsAdd( uiClass, "SETTOP"         , HB_FUNCNAME( SETTOP          ) );
    hb_clsAdd( uiClass, "SETTOPLEFT"     , HB_FUNCNAME( SETTOPLEFT      ) );
    hb_clsAdd( uiClass, "SETTOPRIGHT"    , HB_FUNCNAME( SETTOPRIGHT     ) );
    hb_clsAdd( uiClass, "SETWIDTH"       , HB_FUNCNAME( SETWIDTH        ) );
    hb_clsAdd( uiClass, "SETX"           , HB_FUNCNAME( SETX            ) );
    hb_clsAdd( uiClass, "SETY"           , HB_FUNCNAME( SETY            ) );
    hb_clsAdd( uiClass, "SIZE"           , HB_FUNCNAME( SIZE            ) );
    hb_clsAdd( uiClass, "TOP"            , HB_FUNCNAME( TOP             ) );
    hb_clsAdd( uiClass, "TOPLEFT"        , HB_FUNCNAME( TOPLEFT         ) );
    hb_clsAdd( uiClass, "TOPRIGHT"       , HB_FUNCNAME( TOPRIGHT        ) );
    hb_clsAdd( uiClass, "TRANSLATE"      , HB_FUNCNAME( TRANSLATE       ) );
    hb_clsAdd( uiClass, "TRANSLATED"     , HB_FUNCNAME( TRANSLATED      ) );
    hb_clsAdd( uiClass, "UNITED"         , HB_FUNCNAME( UNITED          ) );
    hb_clsAdd( uiClass, "WIDTH"          , HB_FUNCNAME( WIDTH           ) );
    hb_clsAdd( uiClass, "X"              , HB_FUNCNAME( X               ) );
    hb_clsAdd( uiClass, "Y"              , HB_FUNCNAME( Y               ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
