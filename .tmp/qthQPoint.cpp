/*
 * $Id: qthQPoint.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QPoint>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QPOINT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QPOINT )
{ "QPOINT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QPOINT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QPOINT )

HB_FUNC( QPOINT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QPoint ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QPoint, new QPoint() );
        return;
    }
    /*
     * _public_functions_ : QPoint ( int x, int y )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
    {
        qth_itemPushReturn( QtH::QPoint, new QPoint( hb_parni( 1 ), hb_parni( 2 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_point->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MANHATTANLENGTH )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : int  manhattanLength () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_point->manhattanLength() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RX )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : int &  rx ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_point->rx() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RY )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : int &  ry ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_point->ry() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETX )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : void  setX ( int x )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_point->setX( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETY )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : void  setY ( int y )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_point->setY( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( X )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : int  x () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_point->x() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( Y )
{
    QPoint* p_point = static_cast<QPoint *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_point )
    {
        /*
         * _public_functions_ : int  y () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_point->y() );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"            , HB_FUNCNAME( NEW             ) );
    hb_clsAdd( uiClass, "ISNULL"         , HB_FUNCNAME( ISNULL          ) );
    hb_clsAdd( uiClass, "MANHATTANLENGTH", HB_FUNCNAME( MANHATTANLENGTH ) );
    hb_clsAdd( uiClass, "RX"             , HB_FUNCNAME( RX              ) );
    hb_clsAdd( uiClass, "RY"             , HB_FUNCNAME( RY              ) );
    hb_clsAdd( uiClass, "SETX"           , HB_FUNCNAME( SETX            ) );
    hb_clsAdd( uiClass, "SETY"           , HB_FUNCNAME( SETY            ) );
    hb_clsAdd( uiClass, "X"              , HB_FUNCNAME( X               ) );
    hb_clsAdd( uiClass, "Y"              , HB_FUNCNAME( Y               ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
