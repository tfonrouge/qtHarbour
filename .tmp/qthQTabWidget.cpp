/*
 * $Id: qthQTabWidget.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QTabWidget>

#define TabPosition                             QTabWidget::TabPosition
#define TabShape                                QTabWidget::TabShape

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTABWIDGET );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTABWIDGET )
{ "QTABWIDGET", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTABWIDGET )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTABWIDGET )

HB_FUNC( QTABWIDGET )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QTabWidget ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QTabWidget, new QTabWidget( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDTAB )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : int  addTab ( QWidget * page, const QString & label )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsString( 2 ) )
        {
            QString label =  qth_par_QString( 2 );
            hb_retni( p_tabWidget->addTab( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), label ) );
            return;
        }
        /*
         * _public_functions_ : int  addTab ( QWidget * page, const QIcon & icon, const QString & label )
         */
        if( ( hb_pcount() == 3 ) && qth_IsObject( 1, "QWidget" ) && qth_IsObject( 2, "QIcon" ) && qth_IsString( 3 ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 2 ) );
            QString label =  qth_par_QString( 3 );
            hb_retni( p_tabWidget->addTab( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), icon, label ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_tabWidget->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CORNERWIDGET )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QWidget *  cornerWidget ( Qt::Corner corner = Qt::TopRightCorner ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::Corner", QTH_DEFAULT ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tabWidget->cornerWidget( (Qt::Corner) qth_par_IntType( 1, Qt::TopRightCorner ) ), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COUNT )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : int  count () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tabWidget->count() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTINDEX )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : int  currentIndex () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tabWidget->currentIndex() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTWIDGET )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QWidget *  currentWidget () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tabWidget->currentWidget(), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOCUMENTMODE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : bool  documentMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tabWidget->documentMode() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ELIDEMODE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : Qt::TextElideMode  elideMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tabWidget->elideMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICONSIZE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QSize  iconSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_tabWidget->iconSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INDEXOF )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : int  indexOf ( QWidget * w ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            hb_retni( p_tabWidget->indexOf( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTTAB )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : int  insertTab ( int index, QWidget * page, const QString & label )
         */
        if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QWidget" ) && qth_IsString( 3 ) )
        {
            QString label =  qth_par_QString( 3 );
            hb_retni( p_tabWidget->insertTab( hb_parni( 1 ), static_cast<QWidget *>( qth_par_QthObject( 2 ) ), label ) );
            return;
        }
        /*
         * _public_functions_ : int  insertTab ( int index, QWidget * page, const QIcon & icon, const QString & label )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QWidget" ) && qth_IsObject( 3, "QIcon" ) && qth_IsString( 4 ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 3 ) );
            QString label =  qth_par_QString( 4 );
            hb_retni( p_tabWidget->insertTab( hb_parni( 1 ), static_cast<QWidget *>( qth_par_QthObject( 2 ) ), icon, label ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISMOVABLE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : bool  isMovable () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tabWidget->isMovable() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISTABENABLED )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : bool  isTabEnabled ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retl( p_tabWidget->isTabEnabled( hb_parni( 1 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVETAB )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  removeTab ( int index )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tabWidget->removeTab( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCORNERWIDGET )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setCornerWidget ( QWidget * widget, Qt::Corner corner = Qt::TopRightCorner )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QWidget" ) && qth_IsIntType( 2, "Qt::Corner", QTH_DEFAULT ) )
        {
            p_tabWidget->setCornerWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), (Qt::Corner) qth_par_IntType( 2, Qt::TopRightCorner ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOCUMENTMODE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setDocumentMode ( bool set )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tabWidget->setDocumentMode( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETELIDEMODE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setElideMode ( Qt::TextElideMode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::TextElideMode" ) )
        {
            p_tabWidget->setElideMode( (Qt::TextElideMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICONSIZE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setIconSize ( const QSize & size )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_tabWidget->setIconSize( size );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMOVABLE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setMovable ( bool movable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tabWidget->setMovable( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABENABLED )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabEnabled ( int index, bool enable )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_LOGICAL ) )
        {
            p_tabWidget->setTabEnabled( hb_parni( 1 ), hb_parl( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABICON )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabIcon ( int index, const QIcon & icon )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QIcon" ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 2 ) );
            p_tabWidget->setTabIcon( hb_parni( 1 ), icon );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABPOSITION )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabPosition ( TabPosition )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "TabPosition" ) )
        {
            p_tabWidget->setTabPosition( (TabPosition)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABSHAPE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabShape ( TabShape s )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "TabShape" ) )
        {
            p_tabWidget->setTabShape( (TabShape)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABTEXT )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabText ( int index, const QString & label )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsString( 2 ) )
        {
            QString label =  qth_par_QString( 2 );
            p_tabWidget->setTabText( hb_parni( 1 ), label );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABTOOLTIP )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabToolTip ( int index, const QString & tip )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsString( 2 ) )
        {
            QString tip =  qth_par_QString( 2 );
            p_tabWidget->setTabToolTip( hb_parni( 1 ), tip );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABWHATSTHIS )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabWhatsThis ( int index, const QString & text )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsString( 2 ) )
        {
            QString text =  qth_par_QString( 2 );
            p_tabWidget->setTabWhatsThis( hb_parni( 1 ), text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABSCLOSABLE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setTabsClosable ( bool closeable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tabWidget->setTabsClosable( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETUSESSCROLLBUTTONS )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : void  setUsesScrollButtons ( bool useButtons )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tabWidget->setUsesScrollButtons( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABICON )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QIcon  tabIcon ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QIcon, new QIcon( p_tabWidget->tabIcon( hb_parni( 1 ) ) ), "QIcon" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABPOSITION )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : TabPosition  tabPosition () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tabWidget->tabPosition() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABSHAPE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : TabShape  tabShape () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tabWidget->tabShape() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABTEXT )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QString  tabText ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_ret_QString( p_tabWidget->tabText( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABTOOLTIP )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QString  tabToolTip ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_ret_QString( p_tabWidget->tabToolTip( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABWHATSTHIS )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QString  tabWhatsThis ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_ret_QString( p_tabWidget->tabWhatsThis( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABSCLOSABLE )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : bool  tabsClosable () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tabWidget->tabsClosable() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( USESSCROLLBUTTONS )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : bool  usesScrollButtons () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tabWidget->usesScrollButtons() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WIDGET )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_functions_ : QWidget *  widget ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_tabWidget->widget( hb_parni( 1 ) ), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_tabWidget->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_tabWidget->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTINDEX )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_slots_ : void  setCurrentIndex ( int index )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tabWidget->setCurrentIndex( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTWIDGET )
{
    QTabWidget* p_tabWidget = static_cast<QTabWidget *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tabWidget )
    {
        /*
         * _public_slots_ : void  setCurrentWidget ( QWidget * widget )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QWidget" ) )
        {
            p_tabWidget->setCurrentWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                 , HB_FUNCNAME( NEW                  ) );
    hb_clsAdd( uiClass, "ADDTAB"              , HB_FUNCNAME( ADDTAB               ) );
    hb_clsAdd( uiClass, "CLEAR"               , HB_FUNCNAME( CLEAR                ) );
    hb_clsAdd( uiClass, "CORNERWIDGET"        , HB_FUNCNAME( CORNERWIDGET         ) );
    hb_clsAdd( uiClass, "COUNT"               , HB_FUNCNAME( COUNT                ) );
    hb_clsAdd( uiClass, "CURRENTINDEX"        , HB_FUNCNAME( CURRENTINDEX         ) );
    hb_clsAdd( uiClass, "CURRENTWIDGET"       , HB_FUNCNAME( CURRENTWIDGET        ) );
    hb_clsAdd( uiClass, "DOCUMENTMODE"        , HB_FUNCNAME( DOCUMENTMODE         ) );
    hb_clsAdd( uiClass, "ELIDEMODE"           , HB_FUNCNAME( ELIDEMODE            ) );
    hb_clsAdd( uiClass, "ICONSIZE"            , HB_FUNCNAME( ICONSIZE             ) );
    hb_clsAdd( uiClass, "INDEXOF"             , HB_FUNCNAME( INDEXOF              ) );
    hb_clsAdd( uiClass, "INSERTTAB"           , HB_FUNCNAME( INSERTTAB            ) );
    hb_clsAdd( uiClass, "ISMOVABLE"           , HB_FUNCNAME( ISMOVABLE            ) );
    hb_clsAdd( uiClass, "ISTABENABLED"        , HB_FUNCNAME( ISTABENABLED         ) );
    hb_clsAdd( uiClass, "REMOVETAB"           , HB_FUNCNAME( REMOVETAB            ) );
    hb_clsAdd( uiClass, "SETCORNERWIDGET"     , HB_FUNCNAME( SETCORNERWIDGET      ) );
    hb_clsAdd( uiClass, "SETDOCUMENTMODE"     , HB_FUNCNAME( SETDOCUMENTMODE      ) );
    hb_clsAdd( uiClass, "SETELIDEMODE"        , HB_FUNCNAME( SETELIDEMODE         ) );
    hb_clsAdd( uiClass, "SETICONSIZE"         , HB_FUNCNAME( SETICONSIZE          ) );
    hb_clsAdd( uiClass, "SETMOVABLE"          , HB_FUNCNAME( SETMOVABLE           ) );
    hb_clsAdd( uiClass, "SETTABENABLED"       , HB_FUNCNAME( SETTABENABLED        ) );
    hb_clsAdd( uiClass, "SETTABICON"          , HB_FUNCNAME( SETTABICON           ) );
    hb_clsAdd( uiClass, "SETTABPOSITION"      , HB_FUNCNAME( SETTABPOSITION       ) );
    hb_clsAdd( uiClass, "SETTABSHAPE"         , HB_FUNCNAME( SETTABSHAPE          ) );
    hb_clsAdd( uiClass, "SETTABTEXT"          , HB_FUNCNAME( SETTABTEXT           ) );
    hb_clsAdd( uiClass, "SETTABTOOLTIP"       , HB_FUNCNAME( SETTABTOOLTIP        ) );
    hb_clsAdd( uiClass, "SETTABWHATSTHIS"     , HB_FUNCNAME( SETTABWHATSTHIS      ) );
    hb_clsAdd( uiClass, "SETTABSCLOSABLE"     , HB_FUNCNAME( SETTABSCLOSABLE      ) );
    hb_clsAdd( uiClass, "SETUSESSCROLLBUTTONS", HB_FUNCNAME( SETUSESSCROLLBUTTONS ) );
    hb_clsAdd( uiClass, "TABICON"             , HB_FUNCNAME( TABICON              ) );
    hb_clsAdd( uiClass, "TABPOSITION"         , HB_FUNCNAME( TABPOSITION          ) );
    hb_clsAdd( uiClass, "TABSHAPE"            , HB_FUNCNAME( TABSHAPE             ) );
    hb_clsAdd( uiClass, "TABTEXT"             , HB_FUNCNAME( TABTEXT              ) );
    hb_clsAdd( uiClass, "TABTOOLTIP"          , HB_FUNCNAME( TABTOOLTIP           ) );
    hb_clsAdd( uiClass, "TABWHATSTHIS"        , HB_FUNCNAME( TABWHATSTHIS         ) );
    hb_clsAdd( uiClass, "TABSCLOSABLE"        , HB_FUNCNAME( TABSCLOSABLE         ) );
    hb_clsAdd( uiClass, "USESSCROLLBUTTONS"   , HB_FUNCNAME( USESSCROLLBUTTONS    ) );
    hb_clsAdd( uiClass, "WIDGET"              , HB_FUNCNAME( WIDGET               ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT"     , HB_FUNCNAME( MINIMUMSIZEHINT      ) );
    hb_clsAdd( uiClass, "SIZEHINT"            , HB_FUNCNAME( SIZEHINT             ) );
    hb_clsAdd( uiClass, "SETCURRENTINDEX"     , HB_FUNCNAME( SETCURRENTINDEX      ) );
    hb_clsAdd( uiClass, "SETCURRENTWIDGET"    , HB_FUNCNAME( SETCURRENTWIDGET     ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
