/*
 * $Id: qthQTimer.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QTimer>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTIMER );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QOBJECT );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTIMER )
{ "QTIMER", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTIMER )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QOBJECT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QOBJECT ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTIMER )

HB_FUNC( QTIMER )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QTimer ( QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QObject", QTH_DEFAULT ) )
    {
        QObject* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 1 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QTimer, new QTimer( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INTERVAL )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_functions_ : int  interval () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_timer->interval() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISACTIVE )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_functions_ : bool  isActive () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_timer->isActive() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISSINGLESHOT )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_functions_ : bool  isSingleShot () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_timer->isSingleShot() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINTERVAL )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_functions_ : void  setInterval ( int msec )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_timer->setInterval( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSINGLESHOT )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_functions_ : void  setSingleShot ( bool singleShot )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_timer->setSingleShot( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TIMERID )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_functions_ : int  timerId () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_timer->timerId() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( START )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_slots_ : void  start ( int msec )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_timer->start( hb_parni( 1 ) );
            hb_ret();
            return;
        }
        /*
         * _public_slots_ : void  start ()
         */
        if( hb_pcount() == 0 )
        {
            p_timer->start();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STOP )
{
    QTimer* p_timer = static_cast<QTimer *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_timer )
    {
        /*
         * _public_slots_ : void  stop ()
         */
        if( hb_pcount() == 0 )
        {
            p_timer->stop();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTIMER_SINGLESHOT )
{
    /*
     * _static_public_members_ : void  singleShot ( int msec, QObject * receiver, const char * member )
     */
    if( ( hb_pcount() == 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QObject" ) && qth_Is( 3, HB_IT_STRING ) )
    {
        const char * member = hb_parc( 3 );
        QTimer::singleShot( hb_parni( 1 ), static_cast<QObject *>( qth_par_QthObject( 2 ) ), member );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"          , HB_FUNCNAME( NEW               ) );
    hb_clsAdd( uiClass, "INTERVAL"     , HB_FUNCNAME( INTERVAL          ) );
    hb_clsAdd( uiClass, "ISACTIVE"     , HB_FUNCNAME( ISACTIVE          ) );
    hb_clsAdd( uiClass, "ISSINGLESHOT" , HB_FUNCNAME( ISSINGLESHOT      ) );
    hb_clsAdd( uiClass, "SETINTERVAL"  , HB_FUNCNAME( SETINTERVAL       ) );
    hb_clsAdd( uiClass, "SETSINGLESHOT", HB_FUNCNAME( SETSINGLESHOT     ) );
    hb_clsAdd( uiClass, "TIMERID"      , HB_FUNCNAME( TIMERID           ) );
    hb_clsAdd( uiClass, "START"        , HB_FUNCNAME( START             ) );
    hb_clsAdd( uiClass, "STOP"         , HB_FUNCNAME( STOP              ) );
    hb_clsAdd( uiClass, "SINGLESHOT"   , HB_FUNCNAME( QTIMER_SINGLESHOT ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
