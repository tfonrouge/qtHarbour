/*
 * $Id: qthQSettings.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QSettings>

#define Format                                  QSettings::Format
#define Scope                                   QSettings::Scope
#define Status                                  QSettings::Status

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QSETTINGS );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QOBJECT );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QVARIANT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QSETTINGS )
{ "QSETTINGS", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QSETTINGS )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QOBJECT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QOBJECT ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QVARIANT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QVARIANT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QSETTINGS )

HB_FUNC( QSETTINGS )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QSettings ( const QString & organization, const QString & application = QString(), QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 3 ) && qth_IsString( 1 ) && qth_IsString( 2, QTH_DEFAULT ) && qth_Is( 3, "QObject", QTH_DEFAULT ) )
    {
        QString organization =  qth_par_QString( 1 );
        const QString& application = hb_param( 2, HB_IT_STRING | HB_IT_OBJECT ) ?  qth_par_QString( 2 ) : QString();
        QObject* parent = hb_param( 3, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 3 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSettings, new QSettings( organization, application, parent ) );
        return;
    }
    /*
     * _public_functions_ : QSettings ( Scope scope, const QString & organization, const QString & application = QString(), QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 4 ) && qth_IsIntType( 1, "Scope" ) && qth_IsString( 2 ) && qth_IsString( 3, QTH_DEFAULT ) && qth_Is( 4, "QObject", QTH_DEFAULT ) )
    {
        QString organization =  qth_par_QString( 2 );
        const QString& application = hb_param( 3, HB_IT_STRING | HB_IT_OBJECT ) ?  qth_par_QString( 3 ) : QString();
        QObject* parent = hb_param( 4, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 4 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSettings, new QSettings( (Scope)  qth_par_IntType( 1 ), organization, application, parent ) );
        return;
    }
    /*
     * _public_functions_ : QSettings ( Format format, Scope scope, const QString & organization, const QString & application = QString(), QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 5 ) && qth_IsIntType( 1, "Format" ) && qth_IsIntType( 2, "Scope" ) && qth_IsString( 3 ) && qth_IsString( 4, QTH_DEFAULT ) && qth_Is( 5, "QObject", QTH_DEFAULT ) )
    {
        QString organization =  qth_par_QString( 3 );
        const QString& application = hb_param( 4, HB_IT_STRING | HB_IT_OBJECT ) ?  qth_par_QString( 4 ) : QString();
        QObject* parent = hb_param( 5, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 5 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSettings, new QSettings( (Format)  qth_par_IntType( 1 ), (Scope)  qth_par_IntType( 2 ), organization, application, parent ) );
        return;
    }
    /*
     * _public_functions_ : QSettings ( const QString & fileName, Format format, QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 3 ) && qth_IsString( 1 ) && qth_IsIntType( 2, "Format" ) && qth_Is( 3, "QObject", QTH_DEFAULT ) )
    {
        QString fileName =  qth_par_QString( 1 );
        QObject* parent = hb_param( 3, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 3 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSettings, new QSettings( fileName, (Format)  qth_par_IntType( 2 ), parent ) );
        return;
    }
    /*
     * _public_functions_ : QSettings ( QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QObject", QTH_DEFAULT ) )
    {
        QObject* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 1 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSettings, new QSettings( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALLKEYS )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QStringList  allKeys () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QStringList'
            // qth_itemPushNewReturn( QtH::QStringList, new QStringList( p_settings->allKeys() ), "QStringList" );
            qth_errRT_UNKNOWNOBJ( "QSettings::allKeys", "Don't know how to return type 'QStringList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( APPLICATIONNAME )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QString  applicationName () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_settings->applicationName() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BEGINGROUP )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  beginGroup ( const QString & prefix )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString prefix =  qth_par_QString( 1 );
            p_settings->beginGroup( prefix );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BEGINREADARRAY )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : int  beginReadArray ( const QString & prefix )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString prefix =  qth_par_QString( 1 );
            hb_retni( p_settings->beginReadArray( prefix ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BEGINWRITEARRAY )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  beginWriteArray ( const QString & prefix, int size = -1 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            QString prefix =  qth_par_QString( 1 );
            int size = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : -1;
            p_settings->beginWriteArray( prefix, size );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CHILDGROUPS )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QStringList  childGroups () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QStringList'
            // qth_itemPushNewReturn( QtH::QStringList, new QStringList( p_settings->childGroups() ), "QStringList" );
            qth_errRT_UNKNOWNOBJ( "QSettings::childGroups", "Don't know how to return type 'QStringList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CHILDKEYS )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QStringList  childKeys () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QStringList'
            // qth_itemPushNewReturn( QtH::QStringList, new QStringList( p_settings->childKeys() ), "QStringList" );
            qth_errRT_UNKNOWNOBJ( "QSettings::childKeys", "Don't know how to return type 'QStringList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_settings->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTAINS )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : bool  contains ( const QString & key ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString key =  qth_par_QString( 1 );
            hb_retl( p_settings->contains( key ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ENDARRAY )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  endArray ()
         */
        if( hb_pcount() == 0 )
        {
            p_settings->endArray();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ENDGROUP )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  endGroup ()
         */
        if( hb_pcount() == 0 )
        {
            p_settings->endGroup();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FALLBACKSENABLED )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : bool  fallbacksEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_settings->fallbacksEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FILENAME )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QString  fileName () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_settings->fileName() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FORMAT )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : Format  format () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_settings->format() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GROUP )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QString  group () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_settings->group() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INICODEC )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QTextCodec *  iniCodec () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QTextCodec'
            // qth_itemReturn( (PCPP_OBJECT) p_settings->iniCodec(), "QTextCodec" );
            qth_errRT_UNKNOWNOBJ( "QSettings::iniCodec", "Don't know how to return type 'QTextCodec'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISWRITABLE )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : bool  isWritable () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_settings->isWritable() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ORGANIZATIONNAME )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QString  organizationName () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_settings->organizationName() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REMOVE )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  remove ( const QString & key )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString key =  qth_par_QString( 1 );
            p_settings->remove( key );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCOPE )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : Scope  scope () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_settings->scope() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETARRAYINDEX )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  setArrayIndex ( int i )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_settings->setArrayIndex( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFALLBACKSENABLED )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  setFallbacksEnabled ( bool b )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_settings->setFallbacksEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINICODEC )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  setIniCodec ( QTextCodec * codec )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTextCodec" ) )
        {
            p_settings->setIniCodec( static_cast<QTextCodec *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setIniCodec ( const char * codecName )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
        {
            const char * codecName = hb_parc( 1 );
            p_settings->setIniCodec( codecName );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVALUE )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  setValue ( const QString & key, const QVariant & value )
         */
        if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsObject( 2, "QVariant" ) )
        {
            QString key =  qth_par_QString( 1 );
            const QVariant & value = * static_cast<QVariant *>( qth_par_QthObject( 2 ) );
            p_settings->setValue( key, value );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STATUS )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : Status  status () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_settings->status() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SYNC )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : void  sync ()
         */
        if( hb_pcount() == 0 )
        {
            p_settings->sync();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALUE )
{
    QSettings* p_settings = static_cast<QSettings *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_settings )
    {
        /*
         * _public_functions_ : QVariant  value ( const QString & key, const QVariant & defaultValue = QVariant() ) const
         */
        if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_Is( 2, "QVariant", QTH_DEFAULT ) )
        {
            QString key =  qth_par_QString( 1 );
            const QVariant& defaultValue = hb_param( 2, HB_IT_ANY ) ? qth_par_QVariant( 2 ) : QVariant();
            qth_itemPushNewReturn( QtH::QVariant, new QVariant( p_settings->value( key, defaultValue ) ), "QVariant" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSETTINGS_DEFAULTFORMAT )
{
    /*
     * _static_public_members_ : Format  defaultFormat ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retni( QSettings::defaultFormat() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSETTINGS_SETDEFAULTFORMAT )
{
    /*
     * _static_public_members_ : void  setDefaultFormat ( Format format )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Format" ) )
    {
        QSettings::setDefaultFormat( (Format)  qth_par_IntType( 1 ) );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSETTINGS_SETPATH )
{
    /*
     * _static_public_members_ : void  setPath ( Format format, Scope scope, const QString & path )
     */
    if( ( hb_pcount() == 3 ) && qth_IsIntType( 1, "Format" ) && qth_IsIntType( 2, "Scope" ) && qth_IsString( 3 ) )
    {
        QString path =  qth_par_QString( 3 );
        QSettings::setPath( (Format)  qth_par_IntType( 1 ), (Scope)  qth_par_IntType( 2 ), path );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                , HB_FUNCNAME( NEW                        ) );
    hb_clsAdd( uiClass, "ALLKEYS"            , HB_FUNCNAME( ALLKEYS                    ) );
    hb_clsAdd( uiClass, "APPLICATIONNAME"    , HB_FUNCNAME( APPLICATIONNAME            ) );
    hb_clsAdd( uiClass, "BEGINGROUP"         , HB_FUNCNAME( BEGINGROUP                 ) );
    hb_clsAdd( uiClass, "BEGINREADARRAY"     , HB_FUNCNAME( BEGINREADARRAY             ) );
    hb_clsAdd( uiClass, "BEGINWRITEARRAY"    , HB_FUNCNAME( BEGINWRITEARRAY            ) );
    hb_clsAdd( uiClass, "CHILDGROUPS"        , HB_FUNCNAME( CHILDGROUPS                ) );
    hb_clsAdd( uiClass, "CHILDKEYS"          , HB_FUNCNAME( CHILDKEYS                  ) );
    hb_clsAdd( uiClass, "CLEAR"              , HB_FUNCNAME( CLEAR                      ) );
    hb_clsAdd( uiClass, "CONTAINS"           , HB_FUNCNAME( CONTAINS                   ) );
    hb_clsAdd( uiClass, "ENDARRAY"           , HB_FUNCNAME( ENDARRAY                   ) );
    hb_clsAdd( uiClass, "ENDGROUP"           , HB_FUNCNAME( ENDGROUP                   ) );
    hb_clsAdd( uiClass, "FALLBACKSENABLED"   , HB_FUNCNAME( FALLBACKSENABLED           ) );
    hb_clsAdd( uiClass, "FILENAME"           , HB_FUNCNAME( FILENAME                   ) );
    hb_clsAdd( uiClass, "FORMAT"             , HB_FUNCNAME( FORMAT                     ) );
    hb_clsAdd( uiClass, "GROUP"              , HB_FUNCNAME( GROUP                      ) );
    hb_clsAdd( uiClass, "INICODEC"           , HB_FUNCNAME( INICODEC                   ) );
    hb_clsAdd( uiClass, "ISWRITABLE"         , HB_FUNCNAME( ISWRITABLE                 ) );
    hb_clsAdd( uiClass, "ORGANIZATIONNAME"   , HB_FUNCNAME( ORGANIZATIONNAME           ) );
    hb_clsAdd( uiClass, "REMOVE"             , HB_FUNCNAME( REMOVE                     ) );
    hb_clsAdd( uiClass, "SCOPE"              , HB_FUNCNAME( SCOPE                      ) );
    hb_clsAdd( uiClass, "SETARRAYINDEX"      , HB_FUNCNAME( SETARRAYINDEX              ) );
    hb_clsAdd( uiClass, "SETFALLBACKSENABLED", HB_FUNCNAME( SETFALLBACKSENABLED        ) );
    hb_clsAdd( uiClass, "SETINICODEC"        , HB_FUNCNAME( SETINICODEC                ) );
    hb_clsAdd( uiClass, "SETVALUE"           , HB_FUNCNAME( SETVALUE                   ) );
    hb_clsAdd( uiClass, "STATUS"             , HB_FUNCNAME( STATUS                     ) );
    hb_clsAdd( uiClass, "SYNC"               , HB_FUNCNAME( SYNC                       ) );
    hb_clsAdd( uiClass, "VALUE"              , HB_FUNCNAME( VALUE                      ) );
    hb_clsAdd( uiClass, "DEFAULTFORMAT"      , HB_FUNCNAME( QSETTINGS_DEFAULTFORMAT    ) );
    hb_clsAdd( uiClass, "SETDEFAULTFORMAT"   , HB_FUNCNAME( QSETTINGS_SETDEFAULTFORMAT ) );
    hb_clsAdd( uiClass, "SETPATH"            , HB_FUNCNAME( QSETTINGS_SETPATH          ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
