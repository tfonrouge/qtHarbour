/*
 * $Id: qthQSystemTrayIcon.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QSystemTrayIcon>

#define ActivationReason                        QSystemTrayIcon::ActivationReason
#define MessageIcon                             QSystemTrayIcon::MessageIcon
#define NoIcon                                  QSystemTrayIcon::NoIcon
#define Information                             QSystemTrayIcon::Information
#define Warning                                 QSystemTrayIcon::Warning
#define Critical                                QSystemTrayIcon::Critical

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QSYSTEMTRAYICON );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QOBJECT );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QMENU ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QSYSTEMTRAYICON )
{ "QSYSTEMTRAYICON", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QSYSTEMTRAYICON )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QOBJECT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QOBJECT ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QMENU", {HB_FS_PUBLIC}, {HB_FUNCNAME( QMENU )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QSYSTEMTRAYICON )

HB_FUNC( QSYSTEMTRAYICON )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QSystemTrayIcon ( QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QObject", QTH_DEFAULT ) )
    {
        QObject* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 1 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSystemTrayIcon, new QSystemTrayIcon( parent ) );
        return;
    }
    /*
     * _public_functions_ : QSystemTrayIcon ( const QIcon & icon, QObject * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QIcon" ) && qth_Is( 2, "QObject", QTH_DEFAULT ) )
    {
        const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
        QObject* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QObject>( 2 ) : ( QObject* ) 0;
        qth_itemPushReturn( QtH::QSystemTrayIcon, new QSystemTrayIcon( icon, parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONTEXTMENU )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : QMenu *  contextMenu () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_systemTrayIcon->contextMenu(), "QMenu" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GEOMETRY )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : QRect  geometry () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_systemTrayIcon->geometry() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICON )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : QIcon  icon () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QIcon, new QIcon( p_systemTrayIcon->icon() ), "QIcon" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVISIBLE )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : bool  isVisible () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_systemTrayIcon->isVisible() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCONTEXTMENU )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : void  setContextMenu ( QMenu * menu )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMenu" ) )
        {
            p_systemTrayIcon->setContextMenu( static_cast<QMenu *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICON )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : void  setIcon ( const QIcon & icon )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QIcon" ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            p_systemTrayIcon->setIcon( icon );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTOOLTIP )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : void  setToolTip ( const QString & tip )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString tip =  qth_par_QString( 1 );
            p_systemTrayIcon->setToolTip( tip );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWMESSAGE )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : void  showMessage ( const QString & title, const QString & message, MessageIcon icon = Information, int millisecondsTimeoutHint = 10000 )
         */
        if( ( hb_pcount() <= 4 ) && qth_IsString( 1 ) && qth_IsString( 2 ) && qth_IsIntType( 3, "MessageIcon", QTH_DEFAULT ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            QString title =  qth_par_QString( 1 );
            QString message =  qth_par_QString( 2 );
            int millisecondsTimeoutHint = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 10000;
            p_systemTrayIcon->showMessage( title, message, (MessageIcon) qth_par_IntType( 3, Information ), millisecondsTimeoutHint );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOOLTIP )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_functions_ : QString  toolTip () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_systemTrayIcon->toolTip() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HIDE )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_slots_ : void  hide ()
         */
        if( hb_pcount() == 0 )
        {
            p_systemTrayIcon->hide();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVISIBLE )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_slots_ : void  setVisible ( bool visible )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_systemTrayIcon->setVisible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOW )
{
    QSystemTrayIcon* p_systemTrayIcon = static_cast<QSystemTrayIcon *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_systemTrayIcon )
    {
        /*
         * _public_slots_ : void  show ()
         */
        if( hb_pcount() == 0 )
        {
            p_systemTrayIcon->show();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSYSTEMTRAYICON_ISSYSTEMTRAYAVAILABLE )
{
    /*
     * _static_public_members_ : bool  isSystemTrayAvailable ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QSystemTrayIcon::isSystemTrayAvailable() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSYSTEMTRAYICON_SUPPORTSMESSAGES )
{
    /*
     * _static_public_members_ : bool  supportsMessages ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QSystemTrayIcon::supportsMessages() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSYSTEMTRAYICON_E_NOICON )
{
    /*
     * _static_public_members_ : NoIcon
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QSystemTrayIcon::MessageIcon", "NoIcon", NoIcon );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSYSTEMTRAYICON_E_INFORMATION )
{
    /*
     * _static_public_members_ : Information
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QSystemTrayIcon::MessageIcon", "Information", Information );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSYSTEMTRAYICON_E_WARNING )
{
    /*
     * _static_public_members_ : Warning
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QSystemTrayIcon::MessageIcon", "Warning", Warning );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QSYSTEMTRAYICON_E_CRITICAL )
{
    /*
     * _static_public_members_ : Critical
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QSystemTrayIcon::MessageIcon", "Critical", Critical );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                  , HB_FUNCNAME( NEW                                   ) );
    hb_clsAdd( uiClass, "CONTEXTMENU"          , HB_FUNCNAME( CONTEXTMENU                           ) );
    hb_clsAdd( uiClass, "GEOMETRY"             , HB_FUNCNAME( GEOMETRY                              ) );
    hb_clsAdd( uiClass, "ICON"                 , HB_FUNCNAME( ICON                                  ) );
    hb_clsAdd( uiClass, "ISVISIBLE"            , HB_FUNCNAME( ISVISIBLE                             ) );
    hb_clsAdd( uiClass, "SETCONTEXTMENU"       , HB_FUNCNAME( SETCONTEXTMENU                        ) );
    hb_clsAdd( uiClass, "SETICON"              , HB_FUNCNAME( SETICON                               ) );
    hb_clsAdd( uiClass, "SETTOOLTIP"           , HB_FUNCNAME( SETTOOLTIP                            ) );
    hb_clsAdd( uiClass, "SHOWMESSAGE"          , HB_FUNCNAME( SHOWMESSAGE                           ) );
    hb_clsAdd( uiClass, "TOOLTIP"              , HB_FUNCNAME( TOOLTIP                               ) );
    hb_clsAdd( uiClass, "HIDE"                 , HB_FUNCNAME( HIDE                                  ) );
    hb_clsAdd( uiClass, "SETVISIBLE"           , HB_FUNCNAME( SETVISIBLE                            ) );
    hb_clsAdd( uiClass, "SHOW"                 , HB_FUNCNAME( SHOW                                  ) );
    hb_clsAdd( uiClass, "ISSYSTEMTRAYAVAILABLE", HB_FUNCNAME( QSYSTEMTRAYICON_ISSYSTEMTRAYAVAILABLE ) );
    hb_clsAdd( uiClass, "SUPPORTSMESSAGES"     , HB_FUNCNAME( QSYSTEMTRAYICON_SUPPORTSMESSAGES      ) );
    hb_clsAdd( uiClass, "E_NOICON"             , HB_FUNCNAME( QSYSTEMTRAYICON_E_NOICON              ) );
    hb_clsAdd( uiClass, "E_INFORMATION"        , HB_FUNCNAME( QSYSTEMTRAYICON_E_INFORMATION         ) );
    hb_clsAdd( uiClass, "E_WARNING"            , HB_FUNCNAME( QSYSTEMTRAYICON_E_WARNING             ) );
    hb_clsAdd( uiClass, "E_CRITICAL"           , HB_FUNCNAME( QSYSTEMTRAYICON_E_CRITICAL            ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
