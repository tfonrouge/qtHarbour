/*
 * $Id: qthQTextEdit.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QTextEdit>

#define AutoFormatting                          QTextEdit::AutoFormatting
#define AutoFormattingFlag                      QTextEdit::AutoFormattingFlag
#define LineWrapMode                            QTextEdit::LineWrapMode
/*
 * Wip: Dump Section INIT
 */

#define ExtraSelection    QTextEdit::ExtraSelection
/*
 * Wip: Dump Section END
 */


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTEXTEDIT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QABSTRACTSCROLLAREA );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QCOLOR ); // REQUEST'ed Class
HB_FUNC_EXTERN( QVARIANT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QMENU ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTEXTEDIT )
{ "QTEXTEDIT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTEXTEDIT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QABSTRACTSCROLLAREA", { HB_FS_PUBLIC }, { HB_FUNCNAME( QABSTRACTSCROLLAREA ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QCOLOR", {HB_FS_PUBLIC}, {HB_FUNCNAME( QCOLOR )}, NULL }, // REQUEST'ed Class
{ "QVARIANT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QVARIANT )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QMENU", {HB_FS_PUBLIC}, {HB_FUNCNAME( QMENU )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTEXTEDIT )

HB_FUNC( QTEXTEDIT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QTextEdit ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QTextEdit, new QTextEdit( parent ) );
        return;
    }
    /*
     * _public_functions_ : QTextEdit ( const QString & text, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_Is( 2, "QWidget", QTH_DEFAULT ) )
    {
        QString text =  qth_par_QString( 1 );
        QWidget* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 2 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QTextEdit, new QTextEdit( text, parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACCEPTRICHTEXT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  acceptRichText () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->acceptRichText() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALIGNMENT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : Qt::Alignment  alignment () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->alignment() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ANCHORAT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QString  anchorAt ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_ret_QString( p_textEdit->anchorAt( pos ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOFORMATTING )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : AutoFormatting  autoFormatting () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->autoFormatting() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CANPASTE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  canPaste () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->canPaste() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CREATESTANDARDCONTEXTMENU )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QMenu *  createStandardContextMenu ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_textEdit->createStandardContextMenu(), "QMenu" );
            return;
        }
        /*
         * _public_functions_ : QMenu *  createStandardContextMenu ( const QPoint & position )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & position = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemReturn( (PCPP_OBJECT) p_textEdit->createStandardContextMenu( position ), "QMenu" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTCHARFORMAT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QTextCharFormat  currentCharFormat () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QTextCharFormat'
            // qth_itemPushNewReturn( QtH::QTextCharFormat, new QTextCharFormat( p_textEdit->currentCharFormat() ), "QTextCharFormat" );
            qth_errRT_UNKNOWNOBJ( "QTextEdit::currentCharFormat", "Don't know how to return type 'QTextCharFormat'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTFONT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QFont  currentFont () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QFont'
            // qth_itemPushNewReturn( QtH::QFont, new QFont( p_textEdit->currentFont() ), "QFont" );
            qth_errRT_UNKNOWNOBJ( "QTextEdit::currentFont", "Don't know how to return type 'QFont'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURSORFORPOSITION )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QTextCursor  cursorForPosition ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            // const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            // ! Don't know how to return type 'QTextCursor'
            // qth_itemPushNewReturn( QtH::QTextCursor, new QTextCursor( p_textEdit->cursorForPosition( pos ) ), "QTextCursor" );
            qth_errRT_UNKNOWNOBJ( "QTextEdit::cursorForPosition", "Don't know how to return type 'QTextCursor'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURSORRECT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QRect  cursorRect ( const QTextCursor & cursor ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTextCursor" ) )
        {
            const QTextCursor & cursor = * static_cast<QTextCursor *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_textEdit->cursorRect( cursor ) ), "QRect" );
            return;
        }
        /*
         * _public_functions_ : QRect  cursorRect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_textEdit->cursorRect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURSORWIDTH )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : int  cursorWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->cursorWidth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOCUMENT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QTextDocument *  document () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QTextDocument'
            // qth_itemReturn( (PCPP_OBJECT) p_textEdit->document(), "QTextDocument" );
            qth_errRT_UNKNOWNOBJ( "QTextEdit::document", "Don't know how to return type 'QTextDocument'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DOCUMENTTITLE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QString  documentTitle () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_textEdit->documentTitle() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ENSURECURSORVISIBLE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  ensureCursorVisible ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->ensureCursorVisible();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EXTRASELECTIONS )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QList<ExtraSelection>  extraSelections () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<ExtraSelection>( p_textEdit->extraSelections() ), "QList<ExtraSelection>" );
            qth_errRT_UNKNOWNOBJ( "QTextEdit::extraSelections", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FIND )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  find ( const QString & exp, QTextDocument::FindFlags options = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_IsIntType( 2, "QTextDocument::FindFlags", QTH_DEFAULT ) )
        {
            QString exp =  qth_par_QString( 1 );
            hb_retl( p_textEdit->find( exp, (QTextDocument::FindFlags) qth_par_IntType( 2, 0 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTFAMILY )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QString  fontFamily () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_textEdit->fontFamily() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTITALIC )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  fontItalic () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->fontItalic() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTPOINTSIZE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : qreal  fontPointSize () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_textEdit->fontPointSize() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTUNDERLINE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  fontUnderline () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->fontUnderline() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FONTWEIGHT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : int  fontWeight () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->fontWeight() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISREADONLY )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  isReadOnly () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->isReadOnly() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISUNDOREDOENABLED )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  isUndoRedoEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->isUndoRedoEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LINEWRAPCOLUMNORWIDTH )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : int  lineWrapColumnOrWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->lineWrapColumnOrWidth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LINEWRAPMODE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : LineWrapMode  lineWrapMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->lineWrapMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LOADRESOURCE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : virtual QVariant  loadResource ( int type, const QUrl & name )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QUrl" ) )
        {
            const QUrl & name = * static_cast<QUrl *>( qth_par_QthObject( 2 ) );
            qth_itemPushNewReturn( QtH::QVariant, new QVariant( p_textEdit->loadResource( hb_parni( 1 ), name ) ), "QVariant" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MERGECURRENTCHARFORMAT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  mergeCurrentCharFormat ( const QTextCharFormat & modifier )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTextCharFormat" ) )
        {
            const QTextCharFormat & modifier = * static_cast<QTextCharFormat *>( qth_par_QthObject( 1 ) );
            p_textEdit->mergeCurrentCharFormat( modifier );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MOVECURSOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  moveCursor ( QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "QTextCursor::MoveOperation" ) && qth_IsIntType( 2, "QTextCursor::MoveMode", QTH_DEFAULT ) )
        {
            p_textEdit->moveCursor( (QTextCursor::MoveOperation)  qth_par_IntType( 1 ), (QTextCursor::MoveMode) qth_par_IntType( 2, QTextCursor::MoveAnchor ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OVERWRITEMODE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  overwriteMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->overwriteMode() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PRINT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  print ( QPrinter * printer ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPrinter" ) )
        {
            p_textEdit->print( static_cast<QPrinter *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACCEPTRICHTEXT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setAcceptRichText ( bool accept )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setAcceptRichText( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOFORMATTING )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setAutoFormatting ( AutoFormatting features )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "AutoFormatting" ) )
        {
            p_textEdit->setAutoFormatting( (AutoFormatting)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTCHARFORMAT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setCurrentCharFormat ( const QTextCharFormat & format )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTextCharFormat" ) )
        {
            const QTextCharFormat & format = * static_cast<QTextCharFormat *>( qth_par_QthObject( 1 ) );
            p_textEdit->setCurrentCharFormat( format );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURSORWIDTH )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setCursorWidth ( int width )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_textEdit->setCursorWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOCUMENT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setDocument ( QTextDocument * document )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTextDocument" ) )
        {
            p_textEdit->setDocument( static_cast<QTextDocument *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDOCUMENTTITLE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setDocumentTitle ( const QString & title )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString title =  qth_par_QString( 1 );
            p_textEdit->setDocumentTitle( title );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETEXTRASELECTIONS )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setExtraSelections ( const QList<ExtraSelection> & selections )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QList" ) )
        {
            const QList<ExtraSelection> & selections = * static_cast<QList<ExtraSelection> *>( qth_par_QthObject( 1 ) );
            p_textEdit->setExtraSelections( selections );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLINEWRAPCOLUMNORWIDTH )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setLineWrapColumnOrWidth ( int w )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_textEdit->setLineWrapColumnOrWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLINEWRAPMODE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setLineWrapMode ( LineWrapMode mode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "LineWrapMode" ) )
        {
            p_textEdit->setLineWrapMode( (LineWrapMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETOVERWRITEMODE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setOverwriteMode ( bool overwrite )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setOverwriteMode( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETREADONLY )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setReadOnly ( bool ro )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setReadOnly( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABCHANGESFOCUS )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setTabChangesFocus ( bool b )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setTabChangesFocus( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABSTOPWIDTH )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setTabStopWidth ( int width )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_textEdit->setTabStopWidth( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTCURSOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setTextCursor ( const QTextCursor & cursor )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTextCursor" ) )
        {
            const QTextCursor & cursor = * static_cast<QTextCursor *>( qth_par_QthObject( 1 ) );
            p_textEdit->setTextCursor( cursor );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTINTERACTIONFLAGS )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setTextInteractionFlags ( Qt::TextInteractionFlags flags )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::TextInteractionFlags" ) )
        {
            p_textEdit->setTextInteractionFlags( (Qt::TextInteractionFlags)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETUNDOREDOENABLED )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setUndoRedoEnabled ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setUndoRedoEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWORDWRAPMODE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : void  setWordWrapMode ( QTextOption::WrapMode policy )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QTextOption::WrapMode" ) )
        {
            p_textEdit->setWordWrapMode( (QTextOption::WrapMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABCHANGESFOCUS )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : bool  tabChangesFocus () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_textEdit->tabChangesFocus() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABSTOPWIDTH )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : int  tabStopWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->tabStopWidth() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTBACKGROUNDCOLOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QColor  textBackgroundColor () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_textEdit->textBackgroundColor() ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTCOLOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QColor  textColor () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_textEdit->textColor() ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTCURSOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QTextCursor  textCursor () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QTextCursor'
            // qth_itemPushNewReturn( QtH::QTextCursor, new QTextCursor( p_textEdit->textCursor() ), "QTextCursor" );
            qth_errRT_UNKNOWNOBJ( "QTextEdit::textCursor", "Don't know how to return type 'QTextCursor'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTINTERACTIONFLAGS )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : Qt::TextInteractionFlags  textInteractionFlags () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->textInteractionFlags() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOHTML )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QString  toHtml () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_textEdit->toHtml() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOPLAINTEXT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QString  toPlainText () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_textEdit->toPlainText() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WORDWRAPMODE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_functions_ : QTextOption::WrapMode  wordWrapMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_textEdit->wordWrapMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( APPEND )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  append ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_textEdit->append( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COPY )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  copy ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->copy();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CUT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  cut ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->cut();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTHTML )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  insertHtml ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_textEdit->insertHtml( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTPLAINTEXT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  insertPlainText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_textEdit->insertPlainText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( PASTE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  paste ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->paste();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REDO )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  redo ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->redo();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLLTOANCHOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  scrollToAnchor ( const QString & name )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString name =  qth_par_QString( 1 );
            p_textEdit->scrollToAnchor( name );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTALL )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  selectAll ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->selectAll();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALIGNMENT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setAlignment ( Qt::Alignment a )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Alignment" ) )
        {
            p_textEdit->setAlignment( (Qt::Alignment)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTFONT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setCurrentFont ( const QFont & f )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QFont" ) )
        {
            const QFont & f = * static_cast<QFont *>( qth_par_QthObject( 1 ) );
            p_textEdit->setCurrentFont( f );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONTFAMILY )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setFontFamily ( const QString & fontFamily )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString fontFamily =  qth_par_QString( 1 );
            p_textEdit->setFontFamily( fontFamily );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONTITALIC )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setFontItalic ( bool italic )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setFontItalic( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONTPOINTSIZE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setFontPointSize ( qreal s )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_textEdit->setFontPointSize( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONTUNDERLINE )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setFontUnderline ( bool underline )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_textEdit->setFontUnderline( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFONTWEIGHT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setFontWeight ( int weight )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_textEdit->setFontWeight( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHTML )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setHtml ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_textEdit->setHtml( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETPLAINTEXT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setPlainText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_textEdit->setPlainText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_textEdit->setText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTBACKGROUNDCOLOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setTextBackgroundColor ( const QColor & c )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QColor" ) )
        {
            const QColor & c = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
            p_textEdit->setTextBackgroundColor( c );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTCOLOR )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  setTextColor ( const QColor & c )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QColor" ) )
        {
            const QColor & c = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
            p_textEdit->setTextColor( c );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UNDO )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  undo ()
         */
        if( hb_pcount() == 0 )
        {
            p_textEdit->undo();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ZOOMIN )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  zoomIn ( int range = 1 )
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int range = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 1;
            p_textEdit->zoomIn( range );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ZOOMOUT )
{
    QTextEdit* p_textEdit = static_cast<QTextEdit *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_textEdit )
    {
        /*
         * _public_slots_ : void  zoomOut ( int range = 1 )
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int range = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 1;
            p_textEdit->zoomOut( range );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                      , HB_FUNCNAME( NEW                       ) );
    hb_clsAdd( uiClass, "ACCEPTRICHTEXT"           , HB_FUNCNAME( ACCEPTRICHTEXT            ) );
    hb_clsAdd( uiClass, "ALIGNMENT"                , HB_FUNCNAME( ALIGNMENT                 ) );
    hb_clsAdd( uiClass, "ANCHORAT"                 , HB_FUNCNAME( ANCHORAT                  ) );
    hb_clsAdd( uiClass, "AUTOFORMATTING"           , HB_FUNCNAME( AUTOFORMATTING            ) );
    hb_clsAdd( uiClass, "CANPASTE"                 , HB_FUNCNAME( CANPASTE                  ) );
    hb_clsAdd( uiClass, "CREATESTANDARDCONTEXTMENU", HB_FUNCNAME( CREATESTANDARDCONTEXTMENU ) );
    hb_clsAdd( uiClass, "CURRENTCHARFORMAT"        , HB_FUNCNAME( CURRENTCHARFORMAT         ) );
    hb_clsAdd( uiClass, "CURRENTFONT"              , HB_FUNCNAME( CURRENTFONT               ) );
    hb_clsAdd( uiClass, "CURSORFORPOSITION"        , HB_FUNCNAME( CURSORFORPOSITION         ) );
    hb_clsAdd( uiClass, "CURSORRECT"               , HB_FUNCNAME( CURSORRECT                ) );
    hb_clsAdd( uiClass, "CURSORWIDTH"              , HB_FUNCNAME( CURSORWIDTH               ) );
    hb_clsAdd( uiClass, "DOCUMENT"                 , HB_FUNCNAME( DOCUMENT                  ) );
    hb_clsAdd( uiClass, "DOCUMENTTITLE"            , HB_FUNCNAME( DOCUMENTTITLE             ) );
    hb_clsAdd( uiClass, "ENSURECURSORVISIBLE"      , HB_FUNCNAME( ENSURECURSORVISIBLE       ) );
    hb_clsAdd( uiClass, "EXTRASELECTIONS"          , HB_FUNCNAME( EXTRASELECTIONS           ) );
    hb_clsAdd( uiClass, "FIND"                     , HB_FUNCNAME( FIND                      ) );
    hb_clsAdd( uiClass, "FONTFAMILY"               , HB_FUNCNAME( FONTFAMILY                ) );
    hb_clsAdd( uiClass, "FONTITALIC"               , HB_FUNCNAME( FONTITALIC                ) );
    hb_clsAdd( uiClass, "FONTPOINTSIZE"            , HB_FUNCNAME( FONTPOINTSIZE             ) );
    hb_clsAdd( uiClass, "FONTUNDERLINE"            , HB_FUNCNAME( FONTUNDERLINE             ) );
    hb_clsAdd( uiClass, "FONTWEIGHT"               , HB_FUNCNAME( FONTWEIGHT                ) );
    hb_clsAdd( uiClass, "ISREADONLY"               , HB_FUNCNAME( ISREADONLY                ) );
    hb_clsAdd( uiClass, "ISUNDOREDOENABLED"        , HB_FUNCNAME( ISUNDOREDOENABLED         ) );
    hb_clsAdd( uiClass, "LINEWRAPCOLUMNORWIDTH"    , HB_FUNCNAME( LINEWRAPCOLUMNORWIDTH     ) );
    hb_clsAdd( uiClass, "LINEWRAPMODE"             , HB_FUNCNAME( LINEWRAPMODE              ) );
    hb_clsAdd( uiClass, "LOADRESOURCE"             , HB_FUNCNAME( LOADRESOURCE              ) );
    hb_clsAdd( uiClass, "MERGECURRENTCHARFORMAT"   , HB_FUNCNAME( MERGECURRENTCHARFORMAT    ) );
    hb_clsAdd( uiClass, "MOVECURSOR"               , HB_FUNCNAME( MOVECURSOR                ) );
    hb_clsAdd( uiClass, "OVERWRITEMODE"            , HB_FUNCNAME( OVERWRITEMODE             ) );
    hb_clsAdd( uiClass, "PRINT"                    , HB_FUNCNAME( PRINT                     ) );
    hb_clsAdd( uiClass, "SETACCEPTRICHTEXT"        , HB_FUNCNAME( SETACCEPTRICHTEXT         ) );
    hb_clsAdd( uiClass, "SETAUTOFORMATTING"        , HB_FUNCNAME( SETAUTOFORMATTING         ) );
    hb_clsAdd( uiClass, "SETCURRENTCHARFORMAT"     , HB_FUNCNAME( SETCURRENTCHARFORMAT      ) );
    hb_clsAdd( uiClass, "SETCURSORWIDTH"           , HB_FUNCNAME( SETCURSORWIDTH            ) );
    hb_clsAdd( uiClass, "SETDOCUMENT"              , HB_FUNCNAME( SETDOCUMENT               ) );
    hb_clsAdd( uiClass, "SETDOCUMENTTITLE"         , HB_FUNCNAME( SETDOCUMENTTITLE          ) );
    hb_clsAdd( uiClass, "SETEXTRASELECTIONS"       , HB_FUNCNAME( SETEXTRASELECTIONS        ) );
    hb_clsAdd( uiClass, "SETLINEWRAPCOLUMNORWIDTH" , HB_FUNCNAME( SETLINEWRAPCOLUMNORWIDTH  ) );
    hb_clsAdd( uiClass, "SETLINEWRAPMODE"          , HB_FUNCNAME( SETLINEWRAPMODE           ) );
    hb_clsAdd( uiClass, "SETOVERWRITEMODE"         , HB_FUNCNAME( SETOVERWRITEMODE          ) );
    hb_clsAdd( uiClass, "SETREADONLY"              , HB_FUNCNAME( SETREADONLY               ) );
    hb_clsAdd( uiClass, "SETTABCHANGESFOCUS"       , HB_FUNCNAME( SETTABCHANGESFOCUS        ) );
    hb_clsAdd( uiClass, "SETTABSTOPWIDTH"          , HB_FUNCNAME( SETTABSTOPWIDTH           ) );
    hb_clsAdd( uiClass, "SETTEXTCURSOR"            , HB_FUNCNAME( SETTEXTCURSOR             ) );
    hb_clsAdd( uiClass, "SETTEXTINTERACTIONFLAGS"  , HB_FUNCNAME( SETTEXTINTERACTIONFLAGS   ) );
    hb_clsAdd( uiClass, "SETUNDOREDOENABLED"       , HB_FUNCNAME( SETUNDOREDOENABLED        ) );
    hb_clsAdd( uiClass, "SETWORDWRAPMODE"          , HB_FUNCNAME( SETWORDWRAPMODE           ) );
    hb_clsAdd( uiClass, "TABCHANGESFOCUS"          , HB_FUNCNAME( TABCHANGESFOCUS           ) );
    hb_clsAdd( uiClass, "TABSTOPWIDTH"             , HB_FUNCNAME( TABSTOPWIDTH              ) );
    hb_clsAdd( uiClass, "TEXTBACKGROUNDCOLOR"      , HB_FUNCNAME( TEXTBACKGROUNDCOLOR       ) );
    hb_clsAdd( uiClass, "TEXTCOLOR"                , HB_FUNCNAME( TEXTCOLOR                 ) );
    hb_clsAdd( uiClass, "TEXTCURSOR"               , HB_FUNCNAME( TEXTCURSOR                ) );
    hb_clsAdd( uiClass, "TEXTINTERACTIONFLAGS"     , HB_FUNCNAME( TEXTINTERACTIONFLAGS      ) );
    hb_clsAdd( uiClass, "TOHTML"                   , HB_FUNCNAME( TOHTML                    ) );
    hb_clsAdd( uiClass, "TOPLAINTEXT"              , HB_FUNCNAME( TOPLAINTEXT               ) );
    hb_clsAdd( uiClass, "WORDWRAPMODE"             , HB_FUNCNAME( WORDWRAPMODE              ) );
    hb_clsAdd( uiClass, "APPEND"                   , HB_FUNCNAME( APPEND                    ) );
    hb_clsAdd( uiClass, "CLEAR"                    , HB_FUNCNAME( CLEAR                     ) );
    hb_clsAdd( uiClass, "COPY"                     , HB_FUNCNAME( COPY                      ) );
    hb_clsAdd( uiClass, "CUT"                      , HB_FUNCNAME( CUT                       ) );
    hb_clsAdd( uiClass, "INSERTHTML"               , HB_FUNCNAME( INSERTHTML                ) );
    hb_clsAdd( uiClass, "INSERTPLAINTEXT"          , HB_FUNCNAME( INSERTPLAINTEXT           ) );
    hb_clsAdd( uiClass, "PASTE"                    , HB_FUNCNAME( PASTE                     ) );
    hb_clsAdd( uiClass, "REDO"                     , HB_FUNCNAME( REDO                      ) );
    hb_clsAdd( uiClass, "SCROLLTOANCHOR"           , HB_FUNCNAME( SCROLLTOANCHOR            ) );
    hb_clsAdd( uiClass, "SELECTALL"                , HB_FUNCNAME( SELECTALL                 ) );
    hb_clsAdd( uiClass, "SETALIGNMENT"             , HB_FUNCNAME( SETALIGNMENT              ) );
    hb_clsAdd( uiClass, "SETCURRENTFONT"           , HB_FUNCNAME( SETCURRENTFONT            ) );
    hb_clsAdd( uiClass, "SETFONTFAMILY"            , HB_FUNCNAME( SETFONTFAMILY             ) );
    hb_clsAdd( uiClass, "SETFONTITALIC"            , HB_FUNCNAME( SETFONTITALIC             ) );
    hb_clsAdd( uiClass, "SETFONTPOINTSIZE"         , HB_FUNCNAME( SETFONTPOINTSIZE          ) );
    hb_clsAdd( uiClass, "SETFONTUNDERLINE"         , HB_FUNCNAME( SETFONTUNDERLINE          ) );
    hb_clsAdd( uiClass, "SETFONTWEIGHT"            , HB_FUNCNAME( SETFONTWEIGHT             ) );
    hb_clsAdd( uiClass, "SETHTML"                  , HB_FUNCNAME( SETHTML                   ) );
    hb_clsAdd( uiClass, "SETPLAINTEXT"             , HB_FUNCNAME( SETPLAINTEXT              ) );
    hb_clsAdd( uiClass, "SETTEXT"                  , HB_FUNCNAME( SETTEXT                   ) );
    hb_clsAdd( uiClass, "SETTEXTBACKGROUNDCOLOR"   , HB_FUNCNAME( SETTEXTBACKGROUNDCOLOR    ) );
    hb_clsAdd( uiClass, "SETTEXTCOLOR"             , HB_FUNCNAME( SETTEXTCOLOR              ) );
    hb_clsAdd( uiClass, "UNDO"                     , HB_FUNCNAME( UNDO                      ) );
    hb_clsAdd( uiClass, "ZOOMIN"                   , HB_FUNCNAME( ZOOMIN                    ) );
    hb_clsAdd( uiClass, "ZOOMOUT"                  , HB_FUNCNAME( ZOOMOUT                   ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
