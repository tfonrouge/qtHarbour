/*
 * $Id: qthQGradient.wip 134 2011-06-07 12:35:37Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QGradient>

#define CoordinateMode                          QGradient::CoordinateMode
#define Spread                                  QGradient::Spread
#define Type                                    QGradient::Type

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QGRADIENT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QGRADIENT )
{ "QGRADIENT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QGRADIENT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QGRADIENT )

HB_FUNC( QGRADIENT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( COORDINATEMODE )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : CoordinateMode  coordinateMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_gradient->coordinateMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLORAT )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : void  setColorAt ( qreal position, const QColor & color )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_IsObject( 2, "QColor" ) )
        {
            const QColor & color = * static_cast<QColor *>( qth_par_QthObject( 2 ) );
            p_gradient->setColorAt( (qreal)  hb_parnd( 1 ), color );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOORDINATEMODE )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : void  setCoordinateMode ( CoordinateMode mode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "CoordinateMode" ) )
        {
            p_gradient->setCoordinateMode( (CoordinateMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSPREAD )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : void  setSpread ( Spread method )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Spread" ) )
        {
            p_gradient->setSpread( (Spread)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTOPS )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : void  setStops ( const QGradientStops & stopPoints )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QVector" ) )
        {
            const QGradientStops & stopPoints = * static_cast<QGradientStops *>( qth_par_QthObject( 1 ) );
            p_gradient->setStops( stopPoints );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPREAD )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : Spread  spread () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_gradient->spread() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STOPS )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
#if IMPLEMENTED
        /*
         * _public_functions_ : QGradientStops  stops () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QVector'
            // qth_itemPushNewReturn( QtH::QVector, new QGradientStops( p_gradient->stops() ), "QGradientStops" );
            qth_errRT_UNKNOWNOBJ( "QGradient::stops", "Don't know how to return type 'QVector'" ) ;
            return;
        }
#endif  /* IMPLEMENTED */
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TYPE )
{
    QGradient* p_gradient = static_cast<QGradient *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_gradient )
    {
        /*
         * _public_functions_ : Type  type () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_gradient->type() );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "COORDINATEMODE"   , HB_FUNCNAME( COORDINATEMODE    ) );
    hb_clsAdd( uiClass, "SETCOLORAT"       , HB_FUNCNAME( SETCOLORAT        ) );
    hb_clsAdd( uiClass, "SETCOORDINATEMODE", HB_FUNCNAME( SETCOORDINATEMODE ) );
    hb_clsAdd( uiClass, "SETSPREAD"        , HB_FUNCNAME( SETSPREAD         ) );
    hb_clsAdd( uiClass, "SETSTOPS"         , HB_FUNCNAME( SETSTOPS          ) );
    hb_clsAdd( uiClass, "SPREAD"           , HB_FUNCNAME( SPREAD            ) );
    hb_clsAdd( uiClass, "STOPS"            , HB_FUNCNAME( STOPS             ) );
    hb_clsAdd( uiClass, "TYPE"             , HB_FUNCNAME( TYPE              ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
