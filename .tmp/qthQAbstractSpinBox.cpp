/*
 * $Id: qthQAbstractSpinBox.wip 134 2011-06-07 12:35:37Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QAbstractSpinBox>

#define ButtonSymbols                           QAbstractSpinBox::ButtonSymbols
#define CorrectionMode                          QAbstractSpinBox::CorrectionMode
#define StepEnabled                             QAbstractSpinBox::StepEnabled
#define StepEnabledFlag                         QAbstractSpinBox::StepEnabledFlag

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QABSTRACTSPINBOX );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QVARIANT ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QABSTRACTSPINBOX )
{ "QABSTRACTSPINBOX", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QABSTRACTSPINBOX )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QVARIANT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QVARIANT )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QABSTRACTSPINBOX )

HB_FUNC( QABSTRACTSPINBOX )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QAbstractSpinBox ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QAbstractSpinBox, new QAbstractSpinBox( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALIGNMENT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : Qt::Alignment  alignment () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractSpinBox->alignment() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BUTTONSYMBOLS )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : ButtonSymbols  buttonSymbols () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractSpinBox->buttonSymbols() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CORRECTIONMODE )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : CorrectionMode  correctionMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstractSpinBox->correctionMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FIXUP )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : virtual void  fixup ( QString & input ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString input =  qth_par_QString( 1 );
            p_abstractSpinBox->fixup( input );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASACCEPTABLEINPUT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : bool  hasAcceptableInput () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractSpinBox->hasAcceptableInput() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASFRAME )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : bool  hasFrame () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractSpinBox->hasFrame() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INTERPRETTEXT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  interpretText ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractSpinBox->interpretText();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISACCELERATED )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : bool  isAccelerated () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractSpinBox->isAccelerated() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISREADONLY )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : bool  isReadOnly () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractSpinBox->isReadOnly() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( KEYBOARDTRACKING )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : bool  keyboardTracking () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractSpinBox->keyboardTracking() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACCELERATED )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setAccelerated ( bool on )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractSpinBox->setAccelerated( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALIGNMENT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setAlignment ( Qt::Alignment flag )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Alignment" ) )
        {
            p_abstractSpinBox->setAlignment( (Qt::Alignment)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBUTTONSYMBOLS )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setButtonSymbols ( ButtonSymbols bs )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "ButtonSymbols" ) )
        {
            p_abstractSpinBox->setButtonSymbols( (ButtonSymbols)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCORRECTIONMODE )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setCorrectionMode ( CorrectionMode cm )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "CorrectionMode" ) )
        {
            p_abstractSpinBox->setCorrectionMode( (CorrectionMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFRAME )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setFrame ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractSpinBox->setFrame( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETKEYBOARDTRACKING )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setKeyboardTracking ( bool kt )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractSpinBox->setKeyboardTracking( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETREADONLY )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setReadOnly ( bool r )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractSpinBox->setReadOnly( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSPECIALVALUETEXT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setSpecialValueText ( const QString & txt )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString txt =  qth_par_QString( 1 );
            p_abstractSpinBox->setSpecialValueText( txt );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWRAPPING )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : void  setWrapping ( bool w )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstractSpinBox->setWrapping( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPECIALVALUETEXT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : QString  specialValueText () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_abstractSpinBox->specialValueText() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STEPBY )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : virtual void  stepBy ( int steps )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_abstractSpinBox->stepBy( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : QString  text () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_abstractSpinBox->text() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALIDATE )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : virtual QValidator::State  validate ( QString & input, int & pos ) const
         */
        if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            QString input =  qth_par_QString( 1 );
            int pos = hb_parni( 2 );
            hb_retni( p_abstractSpinBox->validate( input, pos ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WRAPPING )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_functions_ : bool  wrapping () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstractSpinBox->wrapping() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EVENT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _reimplemented_public_functions_ : virtual bool  event ( QEvent * event )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QEvent" ) )
        {
            hb_retl( p_abstractSpinBox->event( static_cast<QEvent *>( qth_par_QthObject( 1 ) ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INPUTMETHODQUERY )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _reimplemented_public_functions_ : virtual QVariant  inputMethodQuery ( Qt::InputMethodQuery query ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::InputMethodQuery" ) )
        {
            qth_itemPushNewReturn( QtH::QVariant, new QVariant( p_abstractSpinBox->inputMethodQuery( (Qt::InputMethodQuery)  qth_par_IntType( 1 ) ) ), "QVariant" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstractSpinBox->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstractSpinBox->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_slots_ : virtual void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractSpinBox->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTALL )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_slots_ : void  selectAll ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractSpinBox->selectAll();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STEPDOWN )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_slots_ : void  stepDown ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractSpinBox->stepDown();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STEPUP )
{
    QAbstractSpinBox* p_abstractSpinBox = static_cast<QAbstractSpinBox *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstractSpinBox )
    {
        /*
         * _public_slots_ : void  stepUp ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstractSpinBox->stepUp();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                , HB_FUNCNAME( NEW                 ) );
    hb_clsAdd( uiClass, "ALIGNMENT"          , HB_FUNCNAME( ALIGNMENT           ) );
    hb_clsAdd( uiClass, "BUTTONSYMBOLS"      , HB_FUNCNAME( BUTTONSYMBOLS       ) );
    hb_clsAdd( uiClass, "CORRECTIONMODE"     , HB_FUNCNAME( CORRECTIONMODE      ) );
    hb_clsAdd( uiClass, "FIXUP"              , HB_FUNCNAME( FIXUP               ) );
    hb_clsAdd( uiClass, "HASACCEPTABLEINPUT" , HB_FUNCNAME( HASACCEPTABLEINPUT  ) );
    hb_clsAdd( uiClass, "HASFRAME"           , HB_FUNCNAME( HASFRAME            ) );
    hb_clsAdd( uiClass, "INTERPRETTEXT"      , HB_FUNCNAME( INTERPRETTEXT       ) );
    hb_clsAdd( uiClass, "ISACCELERATED"      , HB_FUNCNAME( ISACCELERATED       ) );
    hb_clsAdd( uiClass, "ISREADONLY"         , HB_FUNCNAME( ISREADONLY          ) );
    hb_clsAdd( uiClass, "KEYBOARDTRACKING"   , HB_FUNCNAME( KEYBOARDTRACKING    ) );
    hb_clsAdd( uiClass, "SETACCELERATED"     , HB_FUNCNAME( SETACCELERATED      ) );
    hb_clsAdd( uiClass, "SETALIGNMENT"       , HB_FUNCNAME( SETALIGNMENT        ) );
    hb_clsAdd( uiClass, "SETBUTTONSYMBOLS"   , HB_FUNCNAME( SETBUTTONSYMBOLS    ) );
    hb_clsAdd( uiClass, "SETCORRECTIONMODE"  , HB_FUNCNAME( SETCORRECTIONMODE   ) );
    hb_clsAdd( uiClass, "SETFRAME"           , HB_FUNCNAME( SETFRAME            ) );
    hb_clsAdd( uiClass, "SETKEYBOARDTRACKING", HB_FUNCNAME( SETKEYBOARDTRACKING ) );
    hb_clsAdd( uiClass, "SETREADONLY"        , HB_FUNCNAME( SETREADONLY         ) );
    hb_clsAdd( uiClass, "SETSPECIALVALUETEXT", HB_FUNCNAME( SETSPECIALVALUETEXT ) );
    hb_clsAdd( uiClass, "SETWRAPPING"        , HB_FUNCNAME( SETWRAPPING         ) );
    hb_clsAdd( uiClass, "SPECIALVALUETEXT"   , HB_FUNCNAME( SPECIALVALUETEXT    ) );
    hb_clsAdd( uiClass, "STEPBY"             , HB_FUNCNAME( STEPBY              ) );
    hb_clsAdd( uiClass, "TEXT"               , HB_FUNCNAME( TEXT                ) );
    hb_clsAdd( uiClass, "VALIDATE"           , HB_FUNCNAME( VALIDATE            ) );
    hb_clsAdd( uiClass, "WRAPPING"           , HB_FUNCNAME( WRAPPING            ) );
    hb_clsAdd( uiClass, "EVENT"              , HB_FUNCNAME( EVENT               ) );
    hb_clsAdd( uiClass, "INPUTMETHODQUERY"   , HB_FUNCNAME( INPUTMETHODQUERY    ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT"    , HB_FUNCNAME( MINIMUMSIZEHINT     ) );
    hb_clsAdd( uiClass, "SIZEHINT"           , HB_FUNCNAME( SIZEHINT            ) );
    hb_clsAdd( uiClass, "CLEAR"              , HB_FUNCNAME( CLEAR               ) );
    hb_clsAdd( uiClass, "SELECTALL"          , HB_FUNCNAME( SELECTALL           ) );
    hb_clsAdd( uiClass, "STEPDOWN"           , HB_FUNCNAME( STEPDOWN            ) );
    hb_clsAdd( uiClass, "STEPUP"             , HB_FUNCNAME( STEPUP              ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
