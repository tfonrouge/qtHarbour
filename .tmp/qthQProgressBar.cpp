/*
 * $Id: qthQProgressBar.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QProgressBar>

#define Direction                               QProgressBar::Direction

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QPROGRESSBAR );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QPROGRESSBAR )
{ "QPROGRESSBAR", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QPROGRESSBAR )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QPROGRESSBAR )

HB_FUNC( QPROGRESSBAR )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QProgressBar ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QProgressBar, new QProgressBar( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALIGNMENT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : Qt::Alignment  alignment () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->alignment() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( FORMAT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : QString  format () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_progressBar->format() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INVERTEDAPPEARANCE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : bool  invertedAppearance ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_progressBar->invertedAppearance() == true );
            return;
        }
        /*
         * _public_functions_ : bool  invertedAppearance () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_progressBar->invertedAppearance() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISTEXTVISIBLE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : bool  isTextVisible () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_progressBar->isTextVisible() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUM )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : int  maximum () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->maximum() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUM )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : int  minimum () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->minimum() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ORIENTATION )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : Qt::Orientation  orientation () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->orientation() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALIGNMENT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : void  setAlignment ( Qt::Alignment alignment )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Alignment" ) )
        {
            p_progressBar->setAlignment( (Qt::Alignment)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETFORMAT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : void  setFormat ( const QString & format )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString format =  qth_par_QString( 1 );
            p_progressBar->setFormat( format );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINVERTEDAPPEARANCE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : void  setInvertedAppearance ( bool invert )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_progressBar->setInvertedAppearance( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTDIRECTION )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : void  setTextDirection ( QProgressBar::Direction textDirection )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QProgressBar::Direction" ) )
        {
            p_progressBar->setTextDirection( (QProgressBar::Direction)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTVISIBLE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : void  setTextVisible ( bool visible )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_progressBar->setTextVisible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : virtual QString  text () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_progressBar->text() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTDIRECTION )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : QProgressBar::Direction  textDirection ()
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->textDirection() );
            return;
        }
        /*
         * _public_functions_ : QProgressBar::Direction  textDirection () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->textDirection() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALUE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_functions_ : int  value () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressBar->value() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZEHINT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_progressBar->minimumSizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_progressBar->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESET )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_slots_ : void  reset ()
         */
        if( hb_pcount() == 0 )
        {
            p_progressBar->reset();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUM )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_slots_ : void  setMaximum ( int maximum )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressBar->setMaximum( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUM )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_slots_ : void  setMinimum ( int minimum )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressBar->setMinimum( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETORIENTATION )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_slots_ : void  setOrientation ( Qt::Orientation )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::Orientation" ) )
        {
            p_progressBar->setOrientation( (Qt::Orientation)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRANGE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_slots_ : void  setRange ( int minimum, int maximum )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_progressBar->setRange( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVALUE )
{
    QProgressBar* p_progressBar = static_cast<QProgressBar *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressBar )
    {
        /*
         * _public_slots_ : void  setValue ( int value )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressBar->setValue( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                  , HB_FUNCNAME( NEW                   ) );
    hb_clsAdd( uiClass, "ALIGNMENT"            , HB_FUNCNAME( ALIGNMENT             ) );
    hb_clsAdd( uiClass, "FORMAT"               , HB_FUNCNAME( FORMAT                ) );
    hb_clsAdd( uiClass, "INVERTEDAPPEARANCE"   , HB_FUNCNAME( INVERTEDAPPEARANCE    ) );
    hb_clsAdd( uiClass, "ISTEXTVISIBLE"        , HB_FUNCNAME( ISTEXTVISIBLE         ) );
    hb_clsAdd( uiClass, "MAXIMUM"              , HB_FUNCNAME( MAXIMUM               ) );
    hb_clsAdd( uiClass, "MINIMUM"              , HB_FUNCNAME( MINIMUM               ) );
    hb_clsAdd( uiClass, "ORIENTATION"          , HB_FUNCNAME( ORIENTATION           ) );
    hb_clsAdd( uiClass, "SETALIGNMENT"         , HB_FUNCNAME( SETALIGNMENT          ) );
    hb_clsAdd( uiClass, "SETFORMAT"            , HB_FUNCNAME( SETFORMAT             ) );
    hb_clsAdd( uiClass, "SETINVERTEDAPPEARANCE", HB_FUNCNAME( SETINVERTEDAPPEARANCE ) );
    hb_clsAdd( uiClass, "SETTEXTDIRECTION"     , HB_FUNCNAME( SETTEXTDIRECTION      ) );
    hb_clsAdd( uiClass, "SETTEXTVISIBLE"       , HB_FUNCNAME( SETTEXTVISIBLE        ) );
    hb_clsAdd( uiClass, "TEXT"                 , HB_FUNCNAME( TEXT                  ) );
    hb_clsAdd( uiClass, "TEXTDIRECTION"        , HB_FUNCNAME( TEXTDIRECTION         ) );
    hb_clsAdd( uiClass, "VALUE"                , HB_FUNCNAME( VALUE                 ) );
    hb_clsAdd( uiClass, "MINIMUMSIZEHINT"      , HB_FUNCNAME( MINIMUMSIZEHINT       ) );
    hb_clsAdd( uiClass, "SIZEHINT"             , HB_FUNCNAME( SIZEHINT              ) );
    hb_clsAdd( uiClass, "RESET"                , HB_FUNCNAME( RESET                 ) );
    hb_clsAdd( uiClass, "SETMAXIMUM"           , HB_FUNCNAME( SETMAXIMUM            ) );
    hb_clsAdd( uiClass, "SETMINIMUM"           , HB_FUNCNAME( SETMINIMUM            ) );
    hb_clsAdd( uiClass, "SETORIENTATION"       , HB_FUNCNAME( SETORIENTATION        ) );
    hb_clsAdd( uiClass, "SETRANGE"             , HB_FUNCNAME( SETRANGE              ) );
    hb_clsAdd( uiClass, "SETVALUE"             , HB_FUNCNAME( SETVALUE              ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
