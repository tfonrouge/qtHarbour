/*
 * $Id: qthQProgressDialog.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QProgressDialog>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QPROGRESSDIALOG );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QDIALOG );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QPROGRESSDIALOG )
{ "QPROGRESSDIALOG", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QPROGRESSDIALOG )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QDIALOG", { HB_FS_PUBLIC }, { HB_FUNCNAME( QDIALOG ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QPROGRESSDIALOG )

HB_FUNC( QPROGRESSDIALOG )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QProgressDialog ( QWidget * parent = 0, Qt::WindowFlags f = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) && qth_IsIntType( 2, "Qt::WindowFlags", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QProgressDialog, new QProgressDialog( parent, (Qt::WindowFlags) qth_par_IntType( 2, 0 ) ) );
        return;
    }
    /*
     * _public_functions_ : QProgressDialog ( const QString & labelText, const QString & cancelButtonText, int minimum, int maximum, QWidget * parent = 0, Qt::WindowFlags f = 0 )
     */
    if( ( hb_pcount() <= 6 ) && qth_IsString( 1 ) && qth_IsString( 2 ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) && qth_Is( 5, "QWidget", QTH_DEFAULT ) && qth_IsIntType( 6, "Qt::WindowFlags", QTH_DEFAULT ) )
    {
        QString labelText =  qth_par_QString( 1 );
        QString cancelButtonText =  qth_par_QString( 2 );
        QWidget* parent = hb_param( 5, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 5 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QProgressDialog, new QProgressDialog( labelText, cancelButtonText, hb_parni( 3 ), hb_parni( 4 ), parent, (Qt::WindowFlags) qth_par_IntType( 6, 0 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOCLOSE )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : bool  autoClose () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_progressDialog->autoClose() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTORESET )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : bool  autoReset () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_progressDialog->autoReset() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LABELTEXT )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : QString  labelText () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_progressDialog->labelText() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUM )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : int  maximum () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressDialog->maximum() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUM )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : int  minimum () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressDialog->minimum() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMDURATION )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : int  minimumDuration () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressDialog->minimumDuration() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OPEN )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : void  open ( QObject * receiver, const char * member )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QObject" ) && qth_Is( 2, HB_IT_STRING ) )
        {
            const char * member = hb_parc( 2 );
            p_progressDialog->open( static_cast<QObject *>( qth_par_QthObject( 1 ) ), member );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOCLOSE )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : void  setAutoClose ( bool close )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_progressDialog->setAutoClose( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTORESET )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : void  setAutoReset ( bool reset )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_progressDialog->setAutoReset( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBAR )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : void  setBar ( QProgressBar * bar )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QProgressBar" ) )
        {
            p_progressDialog->setBar( static_cast<QProgressBar *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCANCELBUTTON )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : void  setCancelButton ( QPushButton * cancelButton )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPushButton" ) )
        {
            p_progressDialog->setCancelButton( static_cast<QPushButton *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLABEL )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : void  setLabel ( QLabel * label )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLabel" ) )
        {
            p_progressDialog->setLabel( static_cast<QLabel *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALUE )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : int  value () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_progressDialog->value() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WASCANCELED )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_functions_ : bool  wasCanceled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_progressDialog->wasCanceled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_progressDialog->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CANCEL )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  cancel ()
         */
        if( hb_pcount() == 0 )
        {
            p_progressDialog->cancel();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESET )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  reset ()
         */
        if( hb_pcount() == 0 )
        {
            p_progressDialog->reset();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCANCELBUTTONTEXT )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setCancelButtonText ( const QString & cancelButtonText )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString cancelButtonText =  qth_par_QString( 1 );
            p_progressDialog->setCancelButtonText( cancelButtonText );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETLABELTEXT )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setLabelText ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            p_progressDialog->setLabelText( text );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMAXIMUM )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setMaximum ( int maximum )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressDialog->setMaximum( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUM )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setMinimum ( int minimum )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressDialog->setMinimum( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMINIMUMDURATION )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setMinimumDuration ( int ms )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressDialog->setMinimumDuration( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRANGE )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setRange ( int minimum, int maximum )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_progressDialog->setRange( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVALUE )
{
    QProgressDialog* p_progressDialog = static_cast<QProgressDialog *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_progressDialog )
    {
        /*
         * _public_slots_ : void  setValue ( int progress )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_progressDialog->setValue( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                , HB_FUNCNAME( NEW                 ) );
    hb_clsAdd( uiClass, "AUTOCLOSE"          , HB_FUNCNAME( AUTOCLOSE           ) );
    hb_clsAdd( uiClass, "AUTORESET"          , HB_FUNCNAME( AUTORESET           ) );
    hb_clsAdd( uiClass, "LABELTEXT"          , HB_FUNCNAME( LABELTEXT           ) );
    hb_clsAdd( uiClass, "MAXIMUM"            , HB_FUNCNAME( MAXIMUM             ) );
    hb_clsAdd( uiClass, "MINIMUM"            , HB_FUNCNAME( MINIMUM             ) );
    hb_clsAdd( uiClass, "MINIMUMDURATION"    , HB_FUNCNAME( MINIMUMDURATION     ) );
    hb_clsAdd( uiClass, "OPEN"               , HB_FUNCNAME( OPEN                ) );
    hb_clsAdd( uiClass, "SETAUTOCLOSE"       , HB_FUNCNAME( SETAUTOCLOSE        ) );
    hb_clsAdd( uiClass, "SETAUTORESET"       , HB_FUNCNAME( SETAUTORESET        ) );
    hb_clsAdd( uiClass, "SETBAR"             , HB_FUNCNAME( SETBAR              ) );
    hb_clsAdd( uiClass, "SETCANCELBUTTON"    , HB_FUNCNAME( SETCANCELBUTTON     ) );
    hb_clsAdd( uiClass, "SETLABEL"           , HB_FUNCNAME( SETLABEL            ) );
    hb_clsAdd( uiClass, "VALUE"              , HB_FUNCNAME( VALUE               ) );
    hb_clsAdd( uiClass, "WASCANCELED"        , HB_FUNCNAME( WASCANCELED         ) );
    hb_clsAdd( uiClass, "SIZEHINT"           , HB_FUNCNAME( SIZEHINT            ) );
    hb_clsAdd( uiClass, "CANCEL"             , HB_FUNCNAME( CANCEL              ) );
    hb_clsAdd( uiClass, "RESET"              , HB_FUNCNAME( RESET               ) );
    hb_clsAdd( uiClass, "SETCANCELBUTTONTEXT", HB_FUNCNAME( SETCANCELBUTTONTEXT ) );
    hb_clsAdd( uiClass, "SETLABELTEXT"       , HB_FUNCNAME( SETLABELTEXT        ) );
    hb_clsAdd( uiClass, "SETMAXIMUM"         , HB_FUNCNAME( SETMAXIMUM          ) );
    hb_clsAdd( uiClass, "SETMINIMUM"         , HB_FUNCNAME( SETMINIMUM          ) );
    hb_clsAdd( uiClass, "SETMINIMUMDURATION" , HB_FUNCNAME( SETMINIMUMDURATION  ) );
    hb_clsAdd( uiClass, "SETRANGE"           , HB_FUNCNAME( SETRANGE            ) );
    hb_clsAdd( uiClass, "SETVALUE"           , HB_FUNCNAME( SETVALUE            ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
