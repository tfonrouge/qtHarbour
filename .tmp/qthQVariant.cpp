/*
 * $Id: qthQVariant.wip 134 2011-06-07 12:35:37Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QVariant>

#define Type                                    QVariant::Type
#define Invalid                                 QVariant::Invalid
#define BitArray                                QVariant::BitArray
#define Bitmap                                  QVariant::Bitmap
#define Bool                                    QVariant::Bool
#define Brush                                   QVariant::Brush
#define ByteArray                               QVariant::ByteArray
#define Char                                    QVariant::Char
#define Color                                   QVariant::Color
#define Cursor                                  QVariant::Cursor
#define Date                                    QVariant::Date
#define DateTime                                QVariant::DateTime
#define Double                                  QVariant::Double
#define EasingCurve                             QVariant::EasingCurve
#define Font                                    QVariant::Font
#define Hash                                    QVariant::Hash
#define Icon                                    QVariant::Icon
#define Image                                   QVariant::Image
#define Int                                     QVariant::Int
#define KeySequence                             QVariant::KeySequence
#define Line                                    QVariant::Line
#define LineF                                   QVariant::LineF
#define List                                    QVariant::List
#define Locale                                  QVariant::Locale
#define LongLong                                QVariant::LongLong
#define Map                                     QVariant::Map
#define Matrix                                  QVariant::Matrix
#define Transform                               QVariant::Transform
#define Matrix4x4                               QVariant::Matrix4x4
#define Palette                                 QVariant::Palette
#define Pen                                     QVariant::Pen
#define Pixmap                                  QVariant::Pixmap
#define Point                                   QVariant::Point
#define PointF                                  QVariant::PointF
#define Polygon                                 QVariant::Polygon
#define Quaternion                              QVariant::Quaternion
#define Rect                                    QVariant::Rect
#define RectF                                   QVariant::RectF
#define RegExp                                  QVariant::RegExp
#define Region                                  QVariant::Region
#define Size                                    QVariant::Size
#define SizeF                                   QVariant::SizeF
#define SizePolicy                              QVariant::SizePolicy
#define String                                  QVariant::String
#define StringList                              QVariant::StringList
#define TextFormat                              QVariant::TextFormat
#define TextLength                              QVariant::TextLength
#define Time                                    QVariant::Time
#define UInt                                    QVariant::UInt
#define ULongLong                               QVariant::ULongLong
#define Url                                     QVariant::Url
#define Vector2D                                QVariant::Vector2D
#define Vector3D                                QVariant::Vector3D
#define Vector4D                                QVariant::Vector4D
#define UserType                                QVariant::UserType

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QVARIANT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QTIME ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QPOINT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QDATETIME ); // REQUEST'ed Class
HB_FUNC_EXTERN( QDATE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QVARIANT )
{ "QVARIANT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QVARIANT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QTIME", {HB_FS_PUBLIC}, {HB_FUNCNAME( QTIME )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QPOINT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QPOINT )}, NULL }, // REQUEST'ed Class
{ "QDATETIME", {HB_FS_PUBLIC}, {HB_FUNCNAME( QDATETIME )}, NULL }, // REQUEST'ed Class
{ "QDATE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QDATE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QVARIANT )

HB_FUNC( QVARIANT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QVariant ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant() );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QLocale & l )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLocale" ) )
    {
        const QLocale & l = * static_cast<QLocale *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( l ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QRegExp & regExp )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRegExp" ) )
    {
        const QRegExp & regExp = * static_cast<QRegExp *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( regExp ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QEasingCurve & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QEasingCurve" ) )
    {
        const QEasingCurve & val = * static_cast<QEasingCurve *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( int typeOrUserType, const void * copy )
     */
    if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_POINTER ) )
    {
        const void * copy = hb_parptr( 2 );
        qth_itemPushReturn( QtH::QVariant, new QVariant( hb_parni( 1 ), copy ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QVariant & p )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QVariant" ) )
    {
        const QVariant & p = * static_cast<QVariant *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( p ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( QDataStream & s )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDataStream" ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( * static_cast<QDataStream *>( qth_par_QthObject( 1 ) ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( int val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( hb_parni( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( uint val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( (uint)  hb_parni( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( qlonglong val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LONG ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( (qlonglong)  hb_parnll( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( qulonglong val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LONG ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( (qulonglong)  hb_parnll( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( bool val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( hb_parl( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( double val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( hb_parnd( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( float val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( (float)  hb_parnd( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( Qt::GlobalColor color )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::GlobalColor" ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( (Qt::GlobalColor)  qth_par_IntType( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( Type type )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Type" ) )
    {
        qth_itemPushReturn( QtH::QVariant, new QVariant( (Type)  qth_par_IntType( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const char * val )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        const char * val = hb_parc( 1 );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QByteArray & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QByteArray" ) )
    {
        const QByteArray & val = * static_cast<QByteArray *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QBitArray & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QBitArray" ) )
    {
        const QBitArray & val = * static_cast<QBitArray *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QString & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
    {
        QString val =  qth_par_QString( 1 );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QLatin1String & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLatin1String" ) )
    {
        const QLatin1String & val = * static_cast<QLatin1String *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QStringList & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QStringList" ) )
    {
        const QStringList & val = * static_cast<QStringList *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QChar & c )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QChar" ) )
    {
        const QChar & c = * static_cast<QChar *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( c ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QDate & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
    {
        const QDate & val = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QTime & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
    {
        const QTime & val = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QDateTime & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
    {
        const QDateTime & val = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QList<QVariant> & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QList" ) )
    {
        const QList<QVariant> & val = * static_cast<QList<QVariant> *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QMap<QString, QVariant> & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMap" ) )
    {
        const QMap<QString, QVariant> & val = * static_cast<QMap<QString, QVariant> *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QHash<QString, QVariant> & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QHash" ) )
    {
        const QHash<QString, QVariant> & val = * static_cast<QHash<QString, QVariant> *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QSize & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
    {
        const QSize & val = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QSizeF & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSizeF" ) )
    {
        const QSizeF & val = * static_cast<QSizeF *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QPoint & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
    {
        const QPoint & val = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QPointF & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPointF" ) )
    {
        const QPointF & val = * static_cast<QPointF *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QLine & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLine" ) )
    {
        const QLine & val = * static_cast<QLine *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QLineF & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLineF" ) )
    {
        const QLineF & val = * static_cast<QLineF *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QRect & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
    {
        const QRect & val = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QRectF & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRectF" ) )
    {
        const QRectF & val = * static_cast<QRectF *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    /*
     * _public_functions_ : QVariant ( const QUrl & val )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QUrl" ) )
    {
        const QUrl & val = * static_cast<QUrl *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QVariant, new QVariant( val ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CANCONVERT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : bool  canConvert ( Type t ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Type" ) )
        {
            hb_retl( p_variant->canConvert( (Type)  qth_par_IntType( 1 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_variant->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONVERT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : bool  convert ( Type t )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Type" ) )
        {
            hb_retl( p_variant->convert( (Type)  qth_par_IntType( 1 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_variant->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVALID )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : bool  isValid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_variant->isValid() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVALUE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : void  setValue ( const T & value )
         */
        if( ( hb_pcount() == 1 ) && true )
        {
            /* #begindump */
            PHB_ITEM pItem = hb_param( 1, HB_IT_ANY );
            
            switch( hb_itemType( pItem )  )
            {
                case HB_IT_STRING:
                    p_variant->setValue<char>( hb_itemGetCPtr( pItem )[0] );
                    break;
                case HB_IT_INTEGER:
                    p_variant->setValue<int>( hb_itemGetNI( pItem ) );
                    break;
                case HB_IT_OBJECT:
                    if( hb_objGetClass( pItem ) == 0 )
                    {
            
                    }
                    else
                    {
                        PQTH_ITEM pqthItem = qth_itemListGet_PQTH_ITEM( pItem );
                        if(pqthItem)
                        {
                            switch (pqthItem->clsId) {
                                case QtH::QSize :
                                    p_variant->setValue<QSize>( *(QSize*) pqthItem->cppObjectPtr );
                                    break;
                                case QtH::QPoint :
                                    p_variant->setValue<QPoint>( *(QPoint*) pqthItem->cppObjectPtr );
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                default:
                    qoutf("undefined variant type...");
                    qth_errRT_PARAM();
                    break;
            }
            /* #enddump */
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOBITARRAY )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QBitArray  toBitArray () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QBitArray'
            // qth_itemPushNewReturn( QtH::QBitArray, new QBitArray( p_variant->toBitArray() ), "QBitArray" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toBitArray", "Don't know how to return type 'QBitArray'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOBOOL )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : bool  toBool () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_variant->toBool() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOBYTEARRAY )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QByteArray  toByteArray () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QByteArray'
            // qth_itemPushNewReturn( QtH::QByteArray, new QByteArray( p_variant->toByteArray() ), "QByteArray" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toByteArray", "Don't know how to return type 'QByteArray'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOCHAR )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QChar  toChar () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QChar'
            // qth_itemPushNewReturn( QtH::QChar, new QChar( p_variant->toChar() ), "QChar" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toChar", "Don't know how to return type 'QChar'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TODATE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QDate  toDate () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_variant->toDate() ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TODATETIME )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QDateTime  toDateTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_variant->toDateTime() ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TODOUBLE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : double  toDouble ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retnd( p_variant->toDouble( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOEASINGCURVE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QEasingCurve  toEasingCurve () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QEasingCurve'
            // qth_itemPushNewReturn( QtH::QEasingCurve, new QEasingCurve( p_variant->toEasingCurve() ), "QEasingCurve" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toEasingCurve", "Don't know how to return type 'QEasingCurve'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOFLOAT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : float  toFloat ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retnd( p_variant->toFloat( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOHASH )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QHash<QString, QVariant>  toHash () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QHash'
            // qth_itemPushNewReturn( QtH::QHash, new QHash<QString, QVariant>( p_variant->toHash() ), "QHash<QString, QVariant>" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toHash", "Don't know how to return type 'QHash'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOINT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : int  toInt ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retni( p_variant->toInt( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOLINE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QLine  toLine () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QLine'
            // qth_itemPushNewReturn( QtH::QLine, new QLine( p_variant->toLine() ), "QLine" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toLine", "Don't know how to return type 'QLine'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOLINEF )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QLineF  toLineF () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QLineF'
            // qth_itemPushNewReturn( QtH::QLineF, new QLineF( p_variant->toLineF() ), "QLineF" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toLineF", "Don't know how to return type 'QLineF'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOLIST )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QList<QVariant>  toList () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QList'
            // qth_itemPushNewReturn( QtH::QList, new QList<QVariant>( p_variant->toList() ), "QList<QVariant>" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toList", "Don't know how to return type 'QList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOLOCALE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QLocale  toLocale () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QLocale'
            // qth_itemPushNewReturn( QtH::QLocale, new QLocale( p_variant->toLocale() ), "QLocale" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toLocale", "Don't know how to return type 'QLocale'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOLONGLONG )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : qlonglong  toLongLong ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retnll( p_variant->toLongLong( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOMAP )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QMap<QString, QVariant>  toMap () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QMap'
            // qth_itemPushNewReturn( QtH::QMap, new QMap<QString, QVariant>( p_variant->toMap() ), "QMap<QString, QVariant>" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toMap", "Don't know how to return type 'QMap'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOPOINT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QPoint  toPoint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QPoint, new QPoint( p_variant->toPoint() ), "QPoint" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOPOINTF )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QPointF  toPointF () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QPointF'
            // qth_itemPushNewReturn( QtH::QPointF, new QPointF( p_variant->toPointF() ), "QPointF" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toPointF", "Don't know how to return type 'QPointF'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOREAL )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : qreal  toReal ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retnd( p_variant->toReal( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TORECT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QRect  toRect () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_variant->toRect() ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TORECTF )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QRectF  toRectF () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QRectF'
            // qth_itemPushNewReturn( QtH::QRectF, new QRectF( p_variant->toRectF() ), "QRectF" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toRectF", "Don't know how to return type 'QRectF'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOREGEXP )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QRegExp  toRegExp () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QRegExp'
            // qth_itemPushNewReturn( QtH::QRegExp, new QRegExp( p_variant->toRegExp() ), "QRegExp" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toRegExp", "Don't know how to return type 'QRegExp'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSIZE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QSize  toSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_variant->toSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSIZEF )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QSizeF  toSizeF () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QSizeF'
            // qth_itemPushNewReturn( QtH::QSizeF, new QSizeF( p_variant->toSizeF() ), "QSizeF" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toSizeF", "Don't know how to return type 'QSizeF'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSTRING )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QString  toString () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_variant->toString() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSTRINGLIST )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QStringList  toStringList () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QStringList'
            // qth_itemPushNewReturn( QtH::QStringList, new QStringList( p_variant->toStringList() ), "QStringList" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toStringList", "Don't know how to return type 'QStringList'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOTIME )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QTime  toTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_variant->toTime() ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOUINT )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : uint  toUInt ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retni( p_variant->toUInt( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOULONGLONG )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : qulonglong  toULongLong ( bool * ok = 0 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_LOGICAL, QTH_BYREF | QTH_DEFAULT ) )
        {
            bool ok = hb_param( 1, HB_IT_LOGICAL ) ? hb_parl( 1 ) : 0;
            hb_retnll( p_variant->toULongLong( &ok ) );
            if( HB_ISBYREF( 1 ) )
            {
                hb_storl( ok, 1 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOURL )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : QUrl  toUrl () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QUrl'
            // qth_itemPushNewReturn( QtH::QUrl, new QUrl( p_variant->toUrl() ), "QUrl" );
            qth_errRT_UNKNOWNOBJ( "QVariant::toUrl", "Don't know how to return type 'QUrl'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TYPE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : Type  type () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_variant->type() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TYPENAME )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : const char *  typeName () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retc( p_variant->typeName() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( USERTYPE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : int  userType () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_variant->userType() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALUE )
{
    QVariant* p_variant = static_cast<QVariant *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_variant )
    {
        /*
         * _public_functions_ : T  value () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'T'
            // qth_itemPushNewReturn( QtH::T, new T( p_variant->value() ), "T" );
            qth_errRT_UNKNOWNOBJ( "QVariant::value", "Don't know how to return type 'T'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_FROMVALUE )
{
    /*
     * _static_public_members_ : QVariant  fromValue ( const T & value )
     */
    if( ( hb_pcount() == 1 ) && true )
    {
        /* #begindump */
        /* #enddump */
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_NAMETOTYPE )
{
    /*
     * _static_public_members_ : Type  nameToType ( const char * name )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        const char * name = hb_parc( 1 );
        hb_retni( QVariant::nameToType( name ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_TYPETONAME )
{
    /*
     * _static_public_members_ : const char *  typeToName ( Type typ )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Type" ) )
    {
        hb_retc( QVariant::typeToName( (Type)  qth_par_IntType( 1 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_INVALID )
{
    /*
     * _static_public_members_ : Invalid
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Invalid", Invalid );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_BITARRAY )
{
    /*
     * _static_public_members_ : BitArray
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "BitArray", BitArray );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_BITMAP )
{
    /*
     * _static_public_members_ : Bitmap
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Bitmap", Bitmap );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_BOOL )
{
    /*
     * _static_public_members_ : Bool
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Bool", Bool );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_BRUSH )
{
    /*
     * _static_public_members_ : Brush
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Brush", Brush );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_BYTEARRAY )
{
    /*
     * _static_public_members_ : ByteArray
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "ByteArray", ByteArray );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_CHAR )
{
    /*
     * _static_public_members_ : Char
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Char", Char );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_COLOR )
{
    /*
     * _static_public_members_ : Color
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Color", Color );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_CURSOR )
{
    /*
     * _static_public_members_ : Cursor
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Cursor", Cursor );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_DATE )
{
    /*
     * _static_public_members_ : Date
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Date", Date );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_DATETIME )
{
    /*
     * _static_public_members_ : DateTime
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "DateTime", DateTime );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_DOUBLE )
{
    /*
     * _static_public_members_ : Double
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Double", Double );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_EASINGCURVE )
{
    /*
     * _static_public_members_ : EasingCurve
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "EasingCurve", EasingCurve );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_FONT )
{
    /*
     * _static_public_members_ : Font
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Font", Font );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_HASH )
{
    /*
     * _static_public_members_ : Hash
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Hash", Hash );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_ICON )
{
    /*
     * _static_public_members_ : Icon
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Icon", Icon );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_IMAGE )
{
    /*
     * _static_public_members_ : Image
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Image", Image );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_INT )
{
    /*
     * _static_public_members_ : Int
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Int", Int );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_KEYSEQUENCE )
{
    /*
     * _static_public_members_ : KeySequence
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "KeySequence", KeySequence );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_LINE )
{
    /*
     * _static_public_members_ : Line
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Line", Line );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_LINEF )
{
    /*
     * _static_public_members_ : LineF
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "LineF", LineF );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_LIST )
{
    /*
     * _static_public_members_ : List
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "List", List );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_LOCALE )
{
    /*
     * _static_public_members_ : Locale
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Locale", Locale );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_LONGLONG )
{
    /*
     * _static_public_members_ : LongLong
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "LongLong", LongLong );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_MAP )
{
    /*
     * _static_public_members_ : Map
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Map", Map );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_MATRIX )
{
    /*
     * _static_public_members_ : Matrix
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Matrix", Matrix );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_TRANSFORM )
{
    /*
     * _static_public_members_ : Transform
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Transform", Transform );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_MATRIX4X4 )
{
    /*
     * _static_public_members_ : Matrix4x4
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Matrix4x4", Matrix4x4 );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_PALETTE )
{
    /*
     * _static_public_members_ : Palette
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Palette", Palette );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_PEN )
{
    /*
     * _static_public_members_ : Pen
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Pen", Pen );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_PIXMAP )
{
    /*
     * _static_public_members_ : Pixmap
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Pixmap", Pixmap );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_POINT )
{
    /*
     * _static_public_members_ : Point
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Point", Point );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_POINTF )
{
    /*
     * _static_public_members_ : PointF
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "PointF", PointF );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_POLYGON )
{
    /*
     * _static_public_members_ : Polygon
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Polygon", Polygon );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_QUATERNION )
{
    /*
     * _static_public_members_ : Quaternion
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Quaternion", Quaternion );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_RECT )
{
    /*
     * _static_public_members_ : Rect
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Rect", Rect );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_RECTF )
{
    /*
     * _static_public_members_ : RectF
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "RectF", RectF );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_REGEXP )
{
    /*
     * _static_public_members_ : RegExp
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "RegExp", RegExp );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_REGION )
{
    /*
     * _static_public_members_ : Region
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Region", Region );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_SIZE )
{
    /*
     * _static_public_members_ : Size
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Size", Size );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_SIZEF )
{
    /*
     * _static_public_members_ : SizeF
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "SizeF", SizeF );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_SIZEPOLICY )
{
    /*
     * _static_public_members_ : SizePolicy
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "SizePolicy", SizePolicy );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_STRING )
{
    /*
     * _static_public_members_ : String
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "String", String );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_STRINGLIST )
{
    /*
     * _static_public_members_ : StringList
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "StringList", StringList );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_TEXTFORMAT )
{
    /*
     * _static_public_members_ : TextFormat
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "TextFormat", TextFormat );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_TEXTLENGTH )
{
    /*
     * _static_public_members_ : TextLength
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "TextLength", TextLength );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_TIME )
{
    /*
     * _static_public_members_ : Time
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Time", Time );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_UINT )
{
    /*
     * _static_public_members_ : UInt
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "UInt", UInt );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_ULONGLONG )
{
    /*
     * _static_public_members_ : ULongLong
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "ULongLong", ULongLong );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_URL )
{
    /*
     * _static_public_members_ : Url
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Url", Url );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_VECTOR2D )
{
    /*
     * _static_public_members_ : Vector2D
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Vector2D", Vector2D );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_VECTOR3D )
{
    /*
     * _static_public_members_ : Vector3D
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Vector3D", Vector3D );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_VECTOR4D )
{
    /*
     * _static_public_members_ : Vector4D
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "Vector4D", Vector4D );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QVARIANT_E_USERTYPE )
{
    /*
     * _static_public_members_ : UserType
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QVariant::Type", "UserType", UserType );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"          , HB_FUNCNAME( NEW                    ) );
    hb_clsAdd( uiClass, "CANCONVERT"   , HB_FUNCNAME( CANCONVERT             ) );
    hb_clsAdd( uiClass, "CLEAR"        , HB_FUNCNAME( CLEAR                  ) );
    hb_clsAdd( uiClass, "CONVERT"      , HB_FUNCNAME( CONVERT                ) );
    hb_clsAdd( uiClass, "ISNULL"       , HB_FUNCNAME( ISNULL                 ) );
    hb_clsAdd( uiClass, "ISVALID"      , HB_FUNCNAME( ISVALID                ) );
    hb_clsAdd( uiClass, "SETVALUE"     , HB_FUNCNAME( SETVALUE               ) );
    hb_clsAdd( uiClass, "TOBITARRAY"   , HB_FUNCNAME( TOBITARRAY             ) );
    hb_clsAdd( uiClass, "TOBOOL"       , HB_FUNCNAME( TOBOOL                 ) );
    hb_clsAdd( uiClass, "TOBYTEARRAY"  , HB_FUNCNAME( TOBYTEARRAY            ) );
    hb_clsAdd( uiClass, "TOCHAR"       , HB_FUNCNAME( TOCHAR                 ) );
    hb_clsAdd( uiClass, "TODATE"       , HB_FUNCNAME( TODATE                 ) );
    hb_clsAdd( uiClass, "TODATETIME"   , HB_FUNCNAME( TODATETIME             ) );
    hb_clsAdd( uiClass, "TODOUBLE"     , HB_FUNCNAME( TODOUBLE               ) );
    hb_clsAdd( uiClass, "TOEASINGCURVE", HB_FUNCNAME( TOEASINGCURVE          ) );
    hb_clsAdd( uiClass, "TOFLOAT"      , HB_FUNCNAME( TOFLOAT                ) );
    hb_clsAdd( uiClass, "TOHASH"       , HB_FUNCNAME( TOHASH                 ) );
    hb_clsAdd( uiClass, "TOINT"        , HB_FUNCNAME( TOINT                  ) );
    hb_clsAdd( uiClass, "TOLINE"       , HB_FUNCNAME( TOLINE                 ) );
    hb_clsAdd( uiClass, "TOLINEF"      , HB_FUNCNAME( TOLINEF                ) );
    hb_clsAdd( uiClass, "TOLIST"       , HB_FUNCNAME( TOLIST                 ) );
    hb_clsAdd( uiClass, "TOLOCALE"     , HB_FUNCNAME( TOLOCALE               ) );
    hb_clsAdd( uiClass, "TOLONGLONG"   , HB_FUNCNAME( TOLONGLONG             ) );
    hb_clsAdd( uiClass, "TOMAP"        , HB_FUNCNAME( TOMAP                  ) );
    hb_clsAdd( uiClass, "TOPOINT"      , HB_FUNCNAME( TOPOINT                ) );
    hb_clsAdd( uiClass, "TOPOINTF"     , HB_FUNCNAME( TOPOINTF               ) );
    hb_clsAdd( uiClass, "TOREAL"       , HB_FUNCNAME( TOREAL                 ) );
    hb_clsAdd( uiClass, "TORECT"       , HB_FUNCNAME( TORECT                 ) );
    hb_clsAdd( uiClass, "TORECTF"      , HB_FUNCNAME( TORECTF                ) );
    hb_clsAdd( uiClass, "TOREGEXP"     , HB_FUNCNAME( TOREGEXP               ) );
    hb_clsAdd( uiClass, "TOSIZE"       , HB_FUNCNAME( TOSIZE                 ) );
    hb_clsAdd( uiClass, "TOSIZEF"      , HB_FUNCNAME( TOSIZEF                ) );
    hb_clsAdd( uiClass, "TOSTRING"     , HB_FUNCNAME( TOSTRING               ) );
    hb_clsAdd( uiClass, "TOSTRINGLIST" , HB_FUNCNAME( TOSTRINGLIST           ) );
    hb_clsAdd( uiClass, "TOTIME"       , HB_FUNCNAME( TOTIME                 ) );
    hb_clsAdd( uiClass, "TOUINT"       , HB_FUNCNAME( TOUINT                 ) );
    hb_clsAdd( uiClass, "TOULONGLONG"  , HB_FUNCNAME( TOULONGLONG            ) );
    hb_clsAdd( uiClass, "TOURL"        , HB_FUNCNAME( TOURL                  ) );
    hb_clsAdd( uiClass, "TYPE"         , HB_FUNCNAME( TYPE                   ) );
    hb_clsAdd( uiClass, "TYPENAME"     , HB_FUNCNAME( TYPENAME               ) );
    hb_clsAdd( uiClass, "USERTYPE"     , HB_FUNCNAME( USERTYPE               ) );
    hb_clsAdd( uiClass, "VALUE"        , HB_FUNCNAME( VALUE                  ) );
    hb_clsAdd( uiClass, "FROMVALUE"    , HB_FUNCNAME( QVARIANT_FROMVALUE     ) );
    hb_clsAdd( uiClass, "NAMETOTYPE"   , HB_FUNCNAME( QVARIANT_NAMETOTYPE    ) );
    hb_clsAdd( uiClass, "TYPETONAME"   , HB_FUNCNAME( QVARIANT_TYPETONAME    ) );
    hb_clsAdd( uiClass, "E_INVALID"    , HB_FUNCNAME( QVARIANT_E_INVALID     ) );
    hb_clsAdd( uiClass, "E_BITARRAY"   , HB_FUNCNAME( QVARIANT_E_BITARRAY    ) );
    hb_clsAdd( uiClass, "E_BITMAP"     , HB_FUNCNAME( QVARIANT_E_BITMAP      ) );
    hb_clsAdd( uiClass, "E_BOOL"       , HB_FUNCNAME( QVARIANT_E_BOOL        ) );
    hb_clsAdd( uiClass, "E_BRUSH"      , HB_FUNCNAME( QVARIANT_E_BRUSH       ) );
    hb_clsAdd( uiClass, "E_BYTEARRAY"  , HB_FUNCNAME( QVARIANT_E_BYTEARRAY   ) );
    hb_clsAdd( uiClass, "E_CHAR"       , HB_FUNCNAME( QVARIANT_E_CHAR        ) );
    hb_clsAdd( uiClass, "E_COLOR"      , HB_FUNCNAME( QVARIANT_E_COLOR       ) );
    hb_clsAdd( uiClass, "E_CURSOR"     , HB_FUNCNAME( QVARIANT_E_CURSOR      ) );
    hb_clsAdd( uiClass, "E_DATE"       , HB_FUNCNAME( QVARIANT_E_DATE        ) );
    hb_clsAdd( uiClass, "E_DATETIME"   , HB_FUNCNAME( QVARIANT_E_DATETIME    ) );
    hb_clsAdd( uiClass, "E_DOUBLE"     , HB_FUNCNAME( QVARIANT_E_DOUBLE      ) );
    hb_clsAdd( uiClass, "E_EASINGCURVE", HB_FUNCNAME( QVARIANT_E_EASINGCURVE ) );
    hb_clsAdd( uiClass, "E_FONT"       , HB_FUNCNAME( QVARIANT_E_FONT        ) );
    hb_clsAdd( uiClass, "E_HASH"       , HB_FUNCNAME( QVARIANT_E_HASH        ) );
    hb_clsAdd( uiClass, "E_ICON"       , HB_FUNCNAME( QVARIANT_E_ICON        ) );
    hb_clsAdd( uiClass, "E_IMAGE"      , HB_FUNCNAME( QVARIANT_E_IMAGE       ) );
    hb_clsAdd( uiClass, "E_INT"        , HB_FUNCNAME( QVARIANT_E_INT         ) );
    hb_clsAdd( uiClass, "E_KEYSEQUENCE", HB_FUNCNAME( QVARIANT_E_KEYSEQUENCE ) );
    hb_clsAdd( uiClass, "E_LINE"       , HB_FUNCNAME( QVARIANT_E_LINE        ) );
    hb_clsAdd( uiClass, "E_LINEF"      , HB_FUNCNAME( QVARIANT_E_LINEF       ) );
    hb_clsAdd( uiClass, "E_LIST"       , HB_FUNCNAME( QVARIANT_E_LIST        ) );
    hb_clsAdd( uiClass, "E_LOCALE"     , HB_FUNCNAME( QVARIANT_E_LOCALE      ) );
    hb_clsAdd( uiClass, "E_LONGLONG"   , HB_FUNCNAME( QVARIANT_E_LONGLONG    ) );
    hb_clsAdd( uiClass, "E_MAP"        , HB_FUNCNAME( QVARIANT_E_MAP         ) );
    hb_clsAdd( uiClass, "E_MATRIX"     , HB_FUNCNAME( QVARIANT_E_MATRIX      ) );
    hb_clsAdd( uiClass, "E_TRANSFORM"  , HB_FUNCNAME( QVARIANT_E_TRANSFORM   ) );
    hb_clsAdd( uiClass, "E_MATRIX4X4"  , HB_FUNCNAME( QVARIANT_E_MATRIX4X4   ) );
    hb_clsAdd( uiClass, "E_PALETTE"    , HB_FUNCNAME( QVARIANT_E_PALETTE     ) );
    hb_clsAdd( uiClass, "E_PEN"        , HB_FUNCNAME( QVARIANT_E_PEN         ) );
    hb_clsAdd( uiClass, "E_PIXMAP"     , HB_FUNCNAME( QVARIANT_E_PIXMAP      ) );
    hb_clsAdd( uiClass, "E_POINT"      , HB_FUNCNAME( QVARIANT_E_POINT       ) );
    hb_clsAdd( uiClass, "E_POINTF"     , HB_FUNCNAME( QVARIANT_E_POINTF      ) );
    hb_clsAdd( uiClass, "E_POLYGON"    , HB_FUNCNAME( QVARIANT_E_POLYGON     ) );
    hb_clsAdd( uiClass, "E_QUATERNION" , HB_FUNCNAME( QVARIANT_E_QUATERNION  ) );
    hb_clsAdd( uiClass, "E_RECT"       , HB_FUNCNAME( QVARIANT_E_RECT        ) );
    hb_clsAdd( uiClass, "E_RECTF"      , HB_FUNCNAME( QVARIANT_E_RECTF       ) );
    hb_clsAdd( uiClass, "E_REGEXP"     , HB_FUNCNAME( QVARIANT_E_REGEXP      ) );
    hb_clsAdd( uiClass, "E_REGION"     , HB_FUNCNAME( QVARIANT_E_REGION      ) );
    hb_clsAdd( uiClass, "E_SIZE"       , HB_FUNCNAME( QVARIANT_E_SIZE        ) );
    hb_clsAdd( uiClass, "E_SIZEF"      , HB_FUNCNAME( QVARIANT_E_SIZEF       ) );
    hb_clsAdd( uiClass, "E_SIZEPOLICY" , HB_FUNCNAME( QVARIANT_E_SIZEPOLICY  ) );
    hb_clsAdd( uiClass, "E_STRING"     , HB_FUNCNAME( QVARIANT_E_STRING      ) );
    hb_clsAdd( uiClass, "E_STRINGLIST" , HB_FUNCNAME( QVARIANT_E_STRINGLIST  ) );
    hb_clsAdd( uiClass, "E_TEXTFORMAT" , HB_FUNCNAME( QVARIANT_E_TEXTFORMAT  ) );
    hb_clsAdd( uiClass, "E_TEXTLENGTH" , HB_FUNCNAME( QVARIANT_E_TEXTLENGTH  ) );
    hb_clsAdd( uiClass, "E_TIME"       , HB_FUNCNAME( QVARIANT_E_TIME        ) );
    hb_clsAdd( uiClass, "E_UINT"       , HB_FUNCNAME( QVARIANT_E_UINT        ) );
    hb_clsAdd( uiClass, "E_ULONGLONG"  , HB_FUNCNAME( QVARIANT_E_ULONGLONG   ) );
    hb_clsAdd( uiClass, "E_URL"        , HB_FUNCNAME( QVARIANT_E_URL         ) );
    hb_clsAdd( uiClass, "E_VECTOR2D"   , HB_FUNCNAME( QVARIANT_E_VECTOR2D    ) );
    hb_clsAdd( uiClass, "E_VECTOR3D"   , HB_FUNCNAME( QVARIANT_E_VECTOR3D    ) );
    hb_clsAdd( uiClass, "E_VECTOR4D"   , HB_FUNCNAME( QVARIANT_E_VECTOR4D    ) );
    hb_clsAdd( uiClass, "E_USERTYPE"   , HB_FUNCNAME( QVARIANT_E_USERTYPE    ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
