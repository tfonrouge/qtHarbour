/*
 * $Id: qthQAbstractItemView.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QAbstractItemView>

#define DragDropMode                            QAbstractItemView::DragDropMode
#define EditTrigger                             QAbstractItemView::EditTrigger
#define EditTriggers                            QAbstractItemView::EditTriggers
#define ScrollHint                              QAbstractItemView::ScrollHint
#define EnsureVisible                           QAbstractItemView::EnsureVisible
#define PositionAtTop                           QAbstractItemView::PositionAtTop
#define PositionAtBottom                        QAbstractItemView::PositionAtBottom
#define PositionAtCenter                        QAbstractItemView::PositionAtCenter
#define ScrollMode                              QAbstractItemView::ScrollMode
#define SelectionBehavior                       QAbstractItemView::SelectionBehavior
#define SelectionMode                           QAbstractItemView::SelectionMode

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QABSTRACTITEMVIEW );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QABSTRACTSCROLLAREA );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QVARIANT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QABSTRACTITEMVIEW )
{ "QABSTRACTITEMVIEW", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QABSTRACTITEMVIEW )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QABSTRACTSCROLLAREA", { HB_FS_PUBLIC }, { HB_FUNCNAME( QABSTRACTSCROLLAREA ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QVARIANT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QVARIANT )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QABSTRACTITEMVIEW )

HB_FUNC( QABSTRACTITEMVIEW )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( ALTERNATINGROWCOLORS )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : bool  alternatingRowColors () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstracItemView->alternatingRowColors() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( AUTOSCROLLMARGIN )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : int  autoScrollMargin () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->autoScrollMargin() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLOSEPERSISTENTEDITOR )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  closePersistentEditor ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->closePersistentEditor( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CURRENTINDEX )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QModelIndex  currentIndex () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QModelIndex'
            // qth_itemPushNewReturn( QtH::QModelIndex, new QModelIndex( p_abstracItemView->currentIndex() ), "QModelIndex" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::currentIndex", "Don't know how to return type 'QModelIndex'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DEFAULTDROPACTION )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : Qt::DropAction  defaultDropAction () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->defaultDropAction() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DRAGDROPMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : DragDropMode  dragDropMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->dragDropMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DRAGDROPOVERWRITEMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : bool  dragDropOverwriteMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstracItemView->dragDropOverwriteMode() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DRAGENABLED )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : bool  dragEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstracItemView->dragEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EDITTRIGGERS )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : EditTriggers  editTriggers () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->editTriggers() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASAUTOSCROLL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : bool  hasAutoScroll () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstracItemView->hasAutoScroll() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HORIZONTALSCROLLMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : ScrollMode  horizontalScrollMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->horizontalScrollMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICONSIZE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QSize  iconSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstracItemView->iconSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INDEXAT )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual QModelIndex  indexAt ( const QPoint & point ) const = 0
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            // const QPoint & point = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            // ! Don't know how to return type 'QModelIndex'
            // qth_itemPushNewReturn( QtH::QModelIndex, new QModelIndex( p_abstracItemView->indexAt( point ) ), "QModelIndex" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::indexAt", "Don't know how to return type 'QModelIndex'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INDEXWIDGET )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QWidget *  indexWidget ( const QModelIndex & index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->indexWidget( index ), "QWidget" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMDELEGATE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QAbstractItemDelegate *  itemDelegate () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QAbstractItemDelegate'
            // qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->itemDelegate(), "QAbstractItemDelegate" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::itemDelegate", "Don't know how to return type 'QAbstractItemDelegate'" ) ;
            return;
        }
        /*
         * _public_functions_ : QAbstractItemDelegate *  itemDelegate ( const QModelIndex & index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            // const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            // ! Don't know how to return type 'QAbstractItemDelegate'
            // qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->itemDelegate( index ), "QAbstractItemDelegate" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::itemDelegate", "Don't know how to return type 'QAbstractItemDelegate'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMDELEGATEFORCOLUMN )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QAbstractItemDelegate *  itemDelegateForColumn ( int column ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            // ! Don't know how to return type 'QAbstractItemDelegate'
            // qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->itemDelegateForColumn( hb_parni( 1 ) ), "QAbstractItemDelegate" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::itemDelegateForColumn", "Don't know how to return type 'QAbstractItemDelegate'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMDELEGATEFORROW )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QAbstractItemDelegate *  itemDelegateForRow ( int row ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            // ! Don't know how to return type 'QAbstractItemDelegate'
            // qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->itemDelegateForRow( hb_parni( 1 ) ), "QAbstractItemDelegate" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::itemDelegateForRow", "Don't know how to return type 'QAbstractItemDelegate'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( KEYBOARDSEARCH )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual void  keyboardSearch ( const QString & search )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString search =  qth_par_QString( 1 );
            p_abstracItemView->keyboardSearch( search );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MODEL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QAbstractItemModel *  model () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QAbstractItemModel'
            // qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->model(), "QAbstractItemModel" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::model", "Don't know how to return type 'QAbstractItemModel'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( OPENPERSISTENTEDITOR )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  openPersistentEditor ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->openPersistentEditor( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROOTINDEX )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QModelIndex  rootIndex () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QModelIndex'
            // qth_itemPushNewReturn( QtH::QModelIndex, new QModelIndex( p_abstracItemView->rootIndex() ), "QModelIndex" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::rootIndex", "Don't know how to return type 'QModelIndex'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLLTO )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual void  scrollTo ( const QModelIndex & index, ScrollHint hint = EnsureVisible ) = 0
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QModelIndex" ) && qth_IsIntType( 2, "ScrollHint", QTH_DEFAULT ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->scrollTo( index, (ScrollHint) qth_par_IntType( 2, EnsureVisible ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTIONBEHAVIOR )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QAbstractItemView::SelectionBehavior  selectionBehavior () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->selectionBehavior() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTIONMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QAbstractItemView::SelectionMode  selectionMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->selectionMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTIONMODEL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QItemSelectionModel *  selectionModel () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QItemSelectionModel'
            // qth_itemReturn( (PCPP_OBJECT) p_abstracItemView->selectionModel(), "QItemSelectionModel" );
            qth_errRT_UNKNOWNOBJ( "QAbstractItemView::selectionModel", "Don't know how to return type 'QItemSelectionModel'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALTERNATINGROWCOLORS )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setAlternatingRowColors ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstracItemView->setAlternatingRowColors( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOSCROLL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setAutoScroll ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstracItemView->setAutoScroll( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETAUTOSCROLLMARGIN )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setAutoScrollMargin ( int margin )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_abstracItemView->setAutoScrollMargin( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDEFAULTDROPACTION )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setDefaultDropAction ( Qt::DropAction dropAction )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::DropAction" ) )
        {
            p_abstracItemView->setDefaultDropAction( (Qt::DropAction)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDRAGDROPMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setDragDropMode ( DragDropMode behavior )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "DragDropMode" ) )
        {
            p_abstracItemView->setDragDropMode( (DragDropMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDRAGDROPOVERWRITEMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setDragDropOverwriteMode ( bool overwrite )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstracItemView->setDragDropOverwriteMode( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDRAGENABLED )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setDragEnabled ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstracItemView->setDragEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDROPINDICATORSHOWN )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setDropIndicatorShown ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstracItemView->setDropIndicatorShown( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETEDITTRIGGERS )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setEditTriggers ( EditTriggers triggers )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "EditTriggers" ) )
        {
            p_abstracItemView->setEditTriggers( (EditTriggers)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHORIZONTALSCROLLMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setHorizontalScrollMode ( ScrollMode mode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "ScrollMode" ) )
        {
            p_abstracItemView->setHorizontalScrollMode( (ScrollMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICONSIZE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setIconSize ( const QSize & size )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSize" ) )
        {
            const QSize & size = * static_cast<QSize *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->setIconSize( size );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETINDEXWIDGET )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setIndexWidget ( const QModelIndex & index, QWidget * widget )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QModelIndex" ) && qth_IsObject( 2, "QWidget" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->setIndexWidget( index, static_cast<QWidget *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETITEMDELEGATE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setItemDelegate ( QAbstractItemDelegate * delegate )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAbstractItemDelegate" ) )
        {
            p_abstracItemView->setItemDelegate( static_cast<QAbstractItemDelegate *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETITEMDELEGATEFORCOLUMN )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setItemDelegateForColumn ( int column, QAbstractItemDelegate * delegate )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QAbstractItemDelegate" ) )
        {
            p_abstracItemView->setItemDelegateForColumn( hb_parni( 1 ), static_cast<QAbstractItemDelegate *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETITEMDELEGATEFORROW )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setItemDelegateForRow ( int row, QAbstractItemDelegate * delegate )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QAbstractItemDelegate" ) )
        {
            p_abstracItemView->setItemDelegateForRow( hb_parni( 1 ), static_cast<QAbstractItemDelegate *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMODEL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual void  setModel ( QAbstractItemModel * model )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAbstractItemModel" ) )
        {
            p_abstracItemView->setModel( static_cast<QAbstractItemModel *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSELECTIONBEHAVIOR )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setSelectionBehavior ( QAbstractItemView::SelectionBehavior behavior )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QAbstractItemView::SelectionBehavior" ) )
        {
            p_abstracItemView->setSelectionBehavior( (QAbstractItemView::SelectionBehavior)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSELECTIONMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setSelectionMode ( QAbstractItemView::SelectionMode mode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QAbstractItemView::SelectionMode" ) )
        {
            p_abstracItemView->setSelectionMode( (QAbstractItemView::SelectionMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSELECTIONMODEL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual void  setSelectionModel ( QItemSelectionModel * selectionModel )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QItemSelectionModel" ) )
        {
            p_abstracItemView->setSelectionModel( static_cast<QItemSelectionModel *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTABKEYNAVIGATION )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setTabKeyNavigation ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_abstracItemView->setTabKeyNavigation( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEXTELIDEMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setTextElideMode ( Qt::TextElideMode mode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::TextElideMode" ) )
        {
            p_abstracItemView->setTextElideMode( (Qt::TextElideMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVERTICALSCROLLMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : void  setVerticalScrollMode ( ScrollMode mode )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "ScrollMode" ) )
        {
            p_abstracItemView->setVerticalScrollMode( (ScrollMode)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWDROPINDICATOR )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : bool  showDropIndicator () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstracItemView->showDropIndicator() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINTFORCOLUMN )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual int  sizeHintForColumn ( int column ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_abstracItemView->sizeHintForColumn( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINTFORINDEX )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : QSize  sizeHintForIndex ( const QModelIndex & index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_abstracItemView->sizeHintForIndex( index ) ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINTFORROW )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual int  sizeHintForRow ( int row ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_abstracItemView->sizeHintForRow( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TABKEYNAVIGATION )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : bool  tabKeyNavigation () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_abstracItemView->tabKeyNavigation() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TEXTELIDEMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : Qt::TextElideMode  textElideMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->textElideMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VERTICALSCROLLMODE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : ScrollMode  verticalScrollMode () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_abstracItemView->verticalScrollMode() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VISUALRECT )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_functions_ : virtual QRect  visualRect ( const QModelIndex & index ) const = 0
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_abstracItemView->visualRect( index ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INPUTMETHODQUERY )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _reimplemented_public_functions_ : virtual QVariant  inputMethodQuery ( Qt::InputMethodQuery query ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::InputMethodQuery" ) )
        {
            qth_itemPushNewReturn( QtH::QVariant, new QVariant( p_abstracItemView->inputMethodQuery( (Qt::InputMethodQuery)  qth_par_IntType( 1 ) ) ), "QVariant" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARSELECTION )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : void  clearSelection ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstracItemView->clearSelection();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EDIT )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : void  edit ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->edit( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESET )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : virtual void  reset ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstracItemView->reset();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLLTOBOTTOM )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : void  scrollToBottom ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstracItemView->scrollToBottom();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SCROLLTOTOP )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : void  scrollToTop ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstracItemView->scrollToTop();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTALL )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : virtual void  selectAll ()
         */
        if( hb_pcount() == 0 )
        {
            p_abstracItemView->selectAll();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCURRENTINDEX )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : void  setCurrentIndex ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->setCurrentIndex( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETROOTINDEX )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : virtual void  setRootIndex ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->setRootIndex( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( UPDATE )
{
    QAbstractItemView* p_abstracItemView = static_cast<QAbstractItemView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_abstracItemView )
    {
        /*
         * _public_slots_ : void  update ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_abstracItemView->update( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QABSTRACTITEMVIEW_E_ENSUREVISIBLE )
{
    /*
     * _static_public_members_ : EnsureVisible
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QAbstractItemView::ScrollHint", "EnsureVisible", EnsureVisible );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QABSTRACTITEMVIEW_E_POSITIONATTOP )
{
    /*
     * _static_public_members_ : PositionAtTop
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QAbstractItemView::ScrollHint", "PositionAtTop", PositionAtTop );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QABSTRACTITEMVIEW_E_POSITIONATBOTTOM )
{
    /*
     * _static_public_members_ : PositionAtBottom
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QAbstractItemView::ScrollHint", "PositionAtBottom", PositionAtBottom );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QABSTRACTITEMVIEW_E_POSITIONATCENTER )
{
    /*
     * _static_public_members_ : PositionAtCenter
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QAbstractItemView::ScrollHint", "PositionAtCenter", PositionAtCenter );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "ALTERNATINGROWCOLORS"    , HB_FUNCNAME( ALTERNATINGROWCOLORS                 ) );
    hb_clsAdd( uiClass, "AUTOSCROLLMARGIN"        , HB_FUNCNAME( AUTOSCROLLMARGIN                     ) );
    hb_clsAdd( uiClass, "CLOSEPERSISTENTEDITOR"   , HB_FUNCNAME( CLOSEPERSISTENTEDITOR                ) );
    hb_clsAdd( uiClass, "CURRENTINDEX"            , HB_FUNCNAME( CURRENTINDEX                         ) );
    hb_clsAdd( uiClass, "DEFAULTDROPACTION"       , HB_FUNCNAME( DEFAULTDROPACTION                    ) );
    hb_clsAdd( uiClass, "DRAGDROPMODE"            , HB_FUNCNAME( DRAGDROPMODE                         ) );
    hb_clsAdd( uiClass, "DRAGDROPOVERWRITEMODE"   , HB_FUNCNAME( DRAGDROPOVERWRITEMODE                ) );
    hb_clsAdd( uiClass, "DRAGENABLED"             , HB_FUNCNAME( DRAGENABLED                          ) );
    hb_clsAdd( uiClass, "EDITTRIGGERS"            , HB_FUNCNAME( EDITTRIGGERS                         ) );
    hb_clsAdd( uiClass, "HASAUTOSCROLL"           , HB_FUNCNAME( HASAUTOSCROLL                        ) );
    hb_clsAdd( uiClass, "HORIZONTALSCROLLMODE"    , HB_FUNCNAME( HORIZONTALSCROLLMODE                 ) );
    hb_clsAdd( uiClass, "ICONSIZE"                , HB_FUNCNAME( ICONSIZE                             ) );
    hb_clsAdd( uiClass, "INDEXAT"                 , HB_FUNCNAME( INDEXAT                              ) );
    hb_clsAdd( uiClass, "INDEXWIDGET"             , HB_FUNCNAME( INDEXWIDGET                          ) );
    hb_clsAdd( uiClass, "ITEMDELEGATE"            , HB_FUNCNAME( ITEMDELEGATE                         ) );
    hb_clsAdd( uiClass, "ITEMDELEGATEFORCOLUMN"   , HB_FUNCNAME( ITEMDELEGATEFORCOLUMN                ) );
    hb_clsAdd( uiClass, "ITEMDELEGATEFORROW"      , HB_FUNCNAME( ITEMDELEGATEFORROW                   ) );
    hb_clsAdd( uiClass, "KEYBOARDSEARCH"          , HB_FUNCNAME( KEYBOARDSEARCH                       ) );
    hb_clsAdd( uiClass, "MODEL"                   , HB_FUNCNAME( MODEL                                ) );
    hb_clsAdd( uiClass, "OPENPERSISTENTEDITOR"    , HB_FUNCNAME( OPENPERSISTENTEDITOR                 ) );
    hb_clsAdd( uiClass, "ROOTINDEX"               , HB_FUNCNAME( ROOTINDEX                            ) );
    hb_clsAdd( uiClass, "SCROLLTO"                , HB_FUNCNAME( SCROLLTO                             ) );
    hb_clsAdd( uiClass, "SELECTIONBEHAVIOR"       , HB_FUNCNAME( SELECTIONBEHAVIOR                    ) );
    hb_clsAdd( uiClass, "SELECTIONMODE"           , HB_FUNCNAME( SELECTIONMODE                        ) );
    hb_clsAdd( uiClass, "SELECTIONMODEL"          , HB_FUNCNAME( SELECTIONMODEL                       ) );
    hb_clsAdd( uiClass, "SETALTERNATINGROWCOLORS" , HB_FUNCNAME( SETALTERNATINGROWCOLORS              ) );
    hb_clsAdd( uiClass, "SETAUTOSCROLL"           , HB_FUNCNAME( SETAUTOSCROLL                        ) );
    hb_clsAdd( uiClass, "SETAUTOSCROLLMARGIN"     , HB_FUNCNAME( SETAUTOSCROLLMARGIN                  ) );
    hb_clsAdd( uiClass, "SETDEFAULTDROPACTION"    , HB_FUNCNAME( SETDEFAULTDROPACTION                 ) );
    hb_clsAdd( uiClass, "SETDRAGDROPMODE"         , HB_FUNCNAME( SETDRAGDROPMODE                      ) );
    hb_clsAdd( uiClass, "SETDRAGDROPOVERWRITEMODE", HB_FUNCNAME( SETDRAGDROPOVERWRITEMODE             ) );
    hb_clsAdd( uiClass, "SETDRAGENABLED"          , HB_FUNCNAME( SETDRAGENABLED                       ) );
    hb_clsAdd( uiClass, "SETDROPINDICATORSHOWN"   , HB_FUNCNAME( SETDROPINDICATORSHOWN                ) );
    hb_clsAdd( uiClass, "SETEDITTRIGGERS"         , HB_FUNCNAME( SETEDITTRIGGERS                      ) );
    hb_clsAdd( uiClass, "SETHORIZONTALSCROLLMODE" , HB_FUNCNAME( SETHORIZONTALSCROLLMODE              ) );
    hb_clsAdd( uiClass, "SETICONSIZE"             , HB_FUNCNAME( SETICONSIZE                          ) );
    hb_clsAdd( uiClass, "SETINDEXWIDGET"          , HB_FUNCNAME( SETINDEXWIDGET                       ) );
    hb_clsAdd( uiClass, "SETITEMDELEGATE"         , HB_FUNCNAME( SETITEMDELEGATE                      ) );
    hb_clsAdd( uiClass, "SETITEMDELEGATEFORCOLUMN", HB_FUNCNAME( SETITEMDELEGATEFORCOLUMN             ) );
    hb_clsAdd( uiClass, "SETITEMDELEGATEFORROW"   , HB_FUNCNAME( SETITEMDELEGATEFORROW                ) );
    hb_clsAdd( uiClass, "SETMODEL"                , HB_FUNCNAME( SETMODEL                             ) );
    hb_clsAdd( uiClass, "SETSELECTIONBEHAVIOR"    , HB_FUNCNAME( SETSELECTIONBEHAVIOR                 ) );
    hb_clsAdd( uiClass, "SETSELECTIONMODE"        , HB_FUNCNAME( SETSELECTIONMODE                     ) );
    hb_clsAdd( uiClass, "SETSELECTIONMODEL"       , HB_FUNCNAME( SETSELECTIONMODEL                    ) );
    hb_clsAdd( uiClass, "SETTABKEYNAVIGATION"     , HB_FUNCNAME( SETTABKEYNAVIGATION                  ) );
    hb_clsAdd( uiClass, "SETTEXTELIDEMODE"        , HB_FUNCNAME( SETTEXTELIDEMODE                     ) );
    hb_clsAdd( uiClass, "SETVERTICALSCROLLMODE"   , HB_FUNCNAME( SETVERTICALSCROLLMODE                ) );
    hb_clsAdd( uiClass, "SHOWDROPINDICATOR"       , HB_FUNCNAME( SHOWDROPINDICATOR                    ) );
    hb_clsAdd( uiClass, "SIZEHINTFORCOLUMN"       , HB_FUNCNAME( SIZEHINTFORCOLUMN                    ) );
    hb_clsAdd( uiClass, "SIZEHINTFORINDEX"        , HB_FUNCNAME( SIZEHINTFORINDEX                     ) );
    hb_clsAdd( uiClass, "SIZEHINTFORROW"          , HB_FUNCNAME( SIZEHINTFORROW                       ) );
    hb_clsAdd( uiClass, "TABKEYNAVIGATION"        , HB_FUNCNAME( TABKEYNAVIGATION                     ) );
    hb_clsAdd( uiClass, "TEXTELIDEMODE"           , HB_FUNCNAME( TEXTELIDEMODE                        ) );
    hb_clsAdd( uiClass, "VERTICALSCROLLMODE"      , HB_FUNCNAME( VERTICALSCROLLMODE                   ) );
    hb_clsAdd( uiClass, "VISUALRECT"              , HB_FUNCNAME( VISUALRECT                           ) );
    hb_clsAdd( uiClass, "INPUTMETHODQUERY"        , HB_FUNCNAME( INPUTMETHODQUERY                     ) );
    hb_clsAdd( uiClass, "CLEARSELECTION"          , HB_FUNCNAME( CLEARSELECTION                       ) );
    hb_clsAdd( uiClass, "EDIT"                    , HB_FUNCNAME( EDIT                                 ) );
    hb_clsAdd( uiClass, "RESET"                   , HB_FUNCNAME( RESET                                ) );
    hb_clsAdd( uiClass, "SCROLLTOBOTTOM"          , HB_FUNCNAME( SCROLLTOBOTTOM                       ) );
    hb_clsAdd( uiClass, "SCROLLTOTOP"             , HB_FUNCNAME( SCROLLTOTOP                          ) );
    hb_clsAdd( uiClass, "SELECTALL"               , HB_FUNCNAME( SELECTALL                            ) );
    hb_clsAdd( uiClass, "SETCURRENTINDEX"         , HB_FUNCNAME( SETCURRENTINDEX                      ) );
    hb_clsAdd( uiClass, "SETROOTINDEX"            , HB_FUNCNAME( SETROOTINDEX                         ) );
    hb_clsAdd( uiClass, "UPDATE"                  , HB_FUNCNAME( UPDATE                               ) );
    hb_clsAdd( uiClass, "E_ENSUREVISIBLE"         , HB_FUNCNAME( QABSTRACTITEMVIEW_E_ENSUREVISIBLE    ) );
    hb_clsAdd( uiClass, "E_POSITIONATTOP"         , HB_FUNCNAME( QABSTRACTITEMVIEW_E_POSITIONATTOP    ) );
    hb_clsAdd( uiClass, "E_POSITIONATBOTTOM"      , HB_FUNCNAME( QABSTRACTITEMVIEW_E_POSITIONATBOTTOM ) );
    hb_clsAdd( uiClass, "E_POSITIONATCENTER"      , HB_FUNCNAME( QABSTRACTITEMVIEW_E_POSITIONATCENTER ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
