/*
 * $Id: qthQMenu.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QMenu>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QMENU );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QWIDGET );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class
HB_FUNC_EXTERN( QICON ); // REQUEST'ed Class
HB_FUNC_EXTERN( QRECT ); // REQUEST'ed Class
HB_FUNC_EXTERN( QACTION ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QMENU )
{ "QMENU", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QMENU )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QWIDGET", { HB_FS_PUBLIC }, { HB_FUNCNAME( QWIDGET ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }, // REQUEST'ed Class
{ "QICON", {HB_FS_PUBLIC}, {HB_FUNCNAME( QICON )}, NULL }, // REQUEST'ed Class
{ "QRECT", {HB_FS_PUBLIC}, {HB_FUNCNAME( QRECT )}, NULL }, // REQUEST'ed Class
{ "QACTION", {HB_FS_PUBLIC}, {HB_FUNCNAME( QACTION )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QMENU )

HB_FUNC( QMENU )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QMenu ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QMenu, new QMenu( parent ) );
        return;
    }
    /*
     * _public_functions_ : QMenu ( const QString & title, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_Is( 2, "QWidget", QTH_DEFAULT ) )
    {
        QString title =  qth_par_QString( 1 );
        QWidget* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 2 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QMenu, new QMenu( title, parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIONAT )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  actionAt ( const QPoint & pt ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            const QPoint & pt = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            qth_itemReturn( (PCPP_OBJECT) p_menu->actionAt( pt ), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIONGEOMETRY )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QRect  actionGeometry ( QAction * act ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            qth_itemPushNewReturn( QtH::QRect, new QRect( p_menu->actionGeometry( static_cast<QAction *>( qth_par_QthObject( 1 ) ) ) ), "QRect" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ACTIVEACTION )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  activeAction () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->activeAction(), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDACTION )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  addAction ( const QString & text )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString text =  qth_par_QString( 1 );
            qth_itemReturn( (PCPP_OBJECT) p_menu->addAction( text ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QAction *  addAction ( const QIcon & icon, const QString & text )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QIcon" ) && qth_IsString( 2 ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            QString text =  qth_par_QString( 2 );
            qth_itemReturn( (PCPP_OBJECT) p_menu->addAction( icon, text ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QAction *  addAction ( const QString & text, const QObject * receiver, const char * member, const QKeySequence & shortcut = 0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_IsString( 1 ) && qth_IsObject( 2, "QObject" ) && qth_Is( 3, HB_IT_STRING ) && qth_Is( 4, "QKeySequence", QTH_DEFAULT ) )
        {
            QString text =  qth_par_QString( 1 );
            const QObject  * receiver = static_cast<QObject *>( qth_par_QthObject( 2 ) );
            const char * member = hb_parc( 3 );
            const QKeySequence& shortcut = hb_param( 4, HB_IT_OBJECT ) ? qth_parConstRef<QKeySequence>( 4 ) : ( QKeySequence ) 0;
            qth_itemReturn( (PCPP_OBJECT) p_menu->addAction( text, receiver, member, shortcut ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QAction *  addAction ( const QIcon & icon, const QString & text, const QObject * receiver, const char * member, const QKeySequence & shortcut = 0 )
         */
        if( ( hb_pcount() <= 5 ) && qth_IsObject( 1, "QIcon" ) && qth_IsString( 2 ) && qth_IsObject( 3, "QObject" ) && qth_Is( 4, HB_IT_STRING ) && qth_Is( 5, "QKeySequence", QTH_DEFAULT ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            QString text =  qth_par_QString( 2 );
            const QObject  * receiver = static_cast<QObject *>( qth_par_QthObject( 3 ) );
            const char * member = hb_parc( 4 );
            const QKeySequence& shortcut = hb_param( 5, HB_IT_OBJECT ) ? qth_parConstRef<QKeySequence>( 5 ) : ( QKeySequence ) 0;
            qth_itemReturn( (PCPP_OBJECT) p_menu->addAction( icon, text, receiver, member, shortcut ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : void  addAction ( QAction * action )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_menu->addAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDMENU )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  addMenu ( QMenu * menu )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QMenu" ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->addMenu( static_cast<QMenu *>( qth_par_QthObject( 1 ) ) ), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QMenu *  addMenu ( const QString & title )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString title =  qth_par_QString( 1 );
            qth_itemReturn( (PCPP_OBJECT) p_menu->addMenu( title ), "QMenu" );
            return;
        }
        /*
         * _public_functions_ : QMenu *  addMenu ( const QIcon & icon, const QString & title )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QIcon" ) && qth_IsString( 2 ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            QString title =  qth_par_QString( 2 );
            qth_itemReturn( (PCPP_OBJECT) p_menu->addMenu( icon, title ), "QMenu" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSEPARATOR )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  addSeparator ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->addSeparator(), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEAR )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  clear ()
         */
        if( hb_pcount() == 0 )
        {
            p_menu->clear();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DEFAULTACTION )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  defaultAction () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->defaultAction(), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QMENU_EXEC )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  exec ()
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->exec(), "QAction" );
            return;
        }
        /*
         * _public_functions_ : QAction *  exec ( const QPoint & p, QAction * action = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QPoint" ) && qth_Is( 2, "QAction", QTH_DEFAULT ) )
        {
            const QPoint & p = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            QAction* action = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QAction>( 2 ) : ( QAction* ) 0;
            qth_itemReturn( (PCPP_OBJECT) p_menu->exec( p, action ), "QAction" );
            return;
        }
    }
    /*
     * _static_public_members_ : QAction *  exec ( QList<QAction *> actions, const QPoint & pos, QAction * at, QWidget * parent )
     */
    if( ( hb_pcount() == 4 ) && qth_IsObject( 1, "QList" ) && qth_IsObject( 2, "QPoint" ) && qth_IsObject( 3, "QAction" ) && qth_IsObject( 4, "QWidget" ) )
    {
        const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 2 ) );
        qth_itemReturn( (PCPP_OBJECT) QMenu::exec( * static_cast<QList<QAction *> *>( qth_par_QthObject( 1 ) ), pos, static_cast<QAction *>( qth_par_QthObject( 3 ) ), static_cast<QWidget *>( qth_par_QthObject( 4 ) ) ), "QAction" );
        return;
    }
    /*
     * _static_public_members_ : QAction *  exec ( QList<QAction *> actions, const QPoint & pos, QAction * at = 0 )
     */
    if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QList" ) && qth_IsObject( 2, "QPoint" ) && qth_Is( 3, "QAction", QTH_DEFAULT ) )
    {
        const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 2 ) );
        QAction* at = hb_param( 3, HB_IT_OBJECT ) ? qth_parPtr<QAction>( 3 ) : ( QAction* ) 0;
        qth_itemReturn( (PCPP_OBJECT) QMenu::exec( * static_cast<QList<QAction *> *>( qth_par_QthObject( 1 ) ), pos, at ), "QAction" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HIDETEAROFFMENU )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  hideTearOffMenu ()
         */
        if( hb_pcount() == 0 )
        {
            p_menu->hideTearOffMenu();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ICON )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QIcon  icon () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QIcon, new QIcon( p_menu->icon() ), "QIcon" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTMENU )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  insertMenu ( QAction * before, QMenu * menu )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QAction" ) && qth_IsObject( 2, "QMenu" ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->insertMenu( static_cast<QAction *>( qth_par_QthObject( 1 ) ), static_cast<QMenu *>( qth_par_QthObject( 2 ) ) ), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTSEPARATOR )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  insertSeparator ( QAction * before )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->insertSeparator( static_cast<QAction *>( qth_par_QthObject( 1 ) ) ), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISEMPTY )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : bool  isEmpty () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_menu->isEmpty() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISTEAROFFENABLED )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : bool  isTearOffEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_menu->isTearOffEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISTEAROFFMENUVISIBLE )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : bool  isTearOffMenuVisible () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_menu->isTearOffMenuVisible() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MENUACTION )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QAction *  menuAction () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemReturn( (PCPP_OBJECT) p_menu->menuAction(), "QAction" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( POPUP )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  popup ( const QPoint & p, QAction * atAction = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QPoint" ) && qth_Is( 2, "QAction", QTH_DEFAULT ) )
        {
            const QPoint & p = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            QAction* atAction = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QAction>( 2 ) : ( QAction* ) 0;
            p_menu->popup( p, atAction );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SEPARATORSCOLLAPSIBLE )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : bool  separatorsCollapsible () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_menu->separatorsCollapsible() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETACTIVEACTION )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  setActiveAction ( QAction * act )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_menu->setActiveAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDEFAULTACTION )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  setDefaultAction ( QAction * act )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAction" ) )
        {
            p_menu->setDefaultAction( static_cast<QAction *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETICON )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  setIcon ( const QIcon & icon )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QIcon" ) )
        {
            const QIcon & icon = * static_cast<QIcon *>( qth_par_QthObject( 1 ) );
            p_menu->setIcon( icon );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSEPARATORSCOLLAPSIBLE )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  setSeparatorsCollapsible ( bool collapse )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_menu->setSeparatorsCollapsible( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTEAROFFENABLED )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  setTearOffEnabled ( bool )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_menu->setTearOffEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTITLE )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : void  setTitle ( const QString & title )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString title =  qth_par_QString( 1 );
            p_menu->setTitle( title );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TITLE )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _public_functions_ : QString  title () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_menu->title() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QMenu* p_menu = static_cast<QMenu *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_menu )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_menu->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                     , HB_FUNCNAME( NEW                      ) );
    hb_clsAdd( uiClass, "ACTIONAT"                , HB_FUNCNAME( ACTIONAT                 ) );
    hb_clsAdd( uiClass, "ACTIONGEOMETRY"          , HB_FUNCNAME( ACTIONGEOMETRY           ) );
    hb_clsAdd( uiClass, "ACTIVEACTION"            , HB_FUNCNAME( ACTIVEACTION             ) );
    hb_clsAdd( uiClass, "ADDACTION"               , HB_FUNCNAME( ADDACTION                ) );
    hb_clsAdd( uiClass, "ADDMENU"                 , HB_FUNCNAME( ADDMENU                  ) );
    hb_clsAdd( uiClass, "ADDSEPARATOR"            , HB_FUNCNAME( ADDSEPARATOR             ) );
    hb_clsAdd( uiClass, "CLEAR"                   , HB_FUNCNAME( CLEAR                    ) );
    hb_clsAdd( uiClass, "DEFAULTACTION"           , HB_FUNCNAME( DEFAULTACTION            ) );
    hb_clsAdd( uiClass, "EXEC"                    , HB_FUNCNAME( QMENU_EXEC               ) );
    hb_clsAdd( uiClass, "HIDETEAROFFMENU"         , HB_FUNCNAME( HIDETEAROFFMENU          ) );
    hb_clsAdd( uiClass, "ICON"                    , HB_FUNCNAME( ICON                     ) );
    hb_clsAdd( uiClass, "INSERTMENU"              , HB_FUNCNAME( INSERTMENU               ) );
    hb_clsAdd( uiClass, "INSERTSEPARATOR"         , HB_FUNCNAME( INSERTSEPARATOR          ) );
    hb_clsAdd( uiClass, "ISEMPTY"                 , HB_FUNCNAME( ISEMPTY                  ) );
    hb_clsAdd( uiClass, "ISTEAROFFENABLED"        , HB_FUNCNAME( ISTEAROFFENABLED         ) );
    hb_clsAdd( uiClass, "ISTEAROFFMENUVISIBLE"    , HB_FUNCNAME( ISTEAROFFMENUVISIBLE     ) );
    hb_clsAdd( uiClass, "MENUACTION"              , HB_FUNCNAME( MENUACTION               ) );
    hb_clsAdd( uiClass, "POPUP"                   , HB_FUNCNAME( POPUP                    ) );
    hb_clsAdd( uiClass, "SEPARATORSCOLLAPSIBLE"   , HB_FUNCNAME( SEPARATORSCOLLAPSIBLE    ) );
    hb_clsAdd( uiClass, "SETACTIVEACTION"         , HB_FUNCNAME( SETACTIVEACTION          ) );
    hb_clsAdd( uiClass, "SETDEFAULTACTION"        , HB_FUNCNAME( SETDEFAULTACTION         ) );
    hb_clsAdd( uiClass, "SETICON"                 , HB_FUNCNAME( SETICON                  ) );
    hb_clsAdd( uiClass, "SETSEPARATORSCOLLAPSIBLE", HB_FUNCNAME( SETSEPARATORSCOLLAPSIBLE ) );
    hb_clsAdd( uiClass, "SETTEAROFFENABLED"       , HB_FUNCNAME( SETTEAROFFENABLED        ) );
    hb_clsAdd( uiClass, "SETTITLE"                , HB_FUNCNAME( SETTITLE                 ) );
    hb_clsAdd( uiClass, "TITLE"                   , HB_FUNCNAME( TITLE                    ) );
    hb_clsAdd( uiClass, "SIZEHINT"                , HB_FUNCNAME( SIZEHINT                 ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
