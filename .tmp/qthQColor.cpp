/*
 * $Id: qthQColor.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QColor>

#define Spec                                    QColor::Spec
#define Rgb                                     QColor::Rgb
#define Hsv                                     QColor::Hsv
#define Cmyk                                    QColor::Cmyk
#define Hsl                                     QColor::Hsl
#define Invalid                                 QColor::Invalid

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QCOLOR );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QCOLOR )
{ "QCOLOR", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QCOLOR )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QCOLOR )

HB_FUNC( QCOLOR )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QColor ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QColor, new QColor() );
        return;
    }
    /*
     * _public_functions_ : QColor ( int r, int g, int b, int a = 255 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
        qth_itemPushReturn( QtH::QColor, new QColor( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a ) );
        return;
    }
    /*
     * _public_functions_ : QColor ( QRgb color )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QRgb" ) )
    {
        qth_itemPushReturn( QtH::QColor, new QColor( (QRgb)  qth_par_IntType( 1 ) ) );
        return;
    }
    /*
     * _public_functions_ : QColor ( const QString & name )
     */
    if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
    {
        QString name =  qth_par_QString( 1 );
        qth_itemPushReturn( QtH::QColor, new QColor( name ) );
        return;
    }
    /*
     * _public_functions_ : QColor ( const char * name )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_STRING ) )
    {
        const char * name = hb_parc( 1 );
        qth_itemPushReturn( QtH::QColor, new QColor( name ) );
        return;
    }
    /*
     * _public_functions_ : QColor ( const QColor & color )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QColor" ) )
    {
        const QColor & color = * static_cast<QColor *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QColor, new QColor( color ) );
        return;
    }
    /*
     * _public_functions_ : QColor ( Qt::GlobalColor color )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::GlobalColor" ) )
    {
        qth_itemPushReturn( QtH::QColor, new QColor( (Qt::GlobalColor)  qth_par_IntType( 1 ) ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALPHA )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  alpha () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->alpha() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ALPHAF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  alphaF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->alphaF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BLACK )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  black () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->black() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BLACKF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  blackF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->blackF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BLUE )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  blue () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->blue() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( BLUEF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  blueF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->blueF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CONVERTTO )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  convertTo ( Spec colorSpec ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Spec" ) )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->convertTo( (Spec)  qth_par_IntType( 1 ) ) ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CYAN )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  cyan () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->cyan() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CYANF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  cyanF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->cyanF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DARKER )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  darker ( int factor = 200 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int factor = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 200;
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->darker( factor ) ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETCMYK )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getCmyk ( int * c, int * m, int * y, int * k, int * a = 0 )
         */
        if( ( hb_pcount() <= 5 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 5, HB_IT_INTEGER, QTH_BYREF | QTH_DEFAULT ) )
        {
            int c = hb_parni( 1 );
            int m = hb_parni( 2 );
            int y = hb_parni( 3 );
            int k = hb_parni( 4 );
            int a = hb_param( 5, HB_IT_INTEGER ) ? hb_parni( 5 ) : 0;
            p_color->getCmyk( &c, &m, &y, &k, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( c, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( m, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( y, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( k, 4 );
            }
            if( HB_ISBYREF( 5 ) )
            {
                hb_storni( a, 5 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETCMYKF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getCmykF ( qreal * c, qreal * m, qreal * y, qreal * k, qreal * a = 0 )
         */
        if( ( hb_pcount() <= 5 ) && qth_Is( 1, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 2, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 3, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 4, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 5, HB_IT_DOUBLE, QTH_BYREF | QTH_DEFAULT ) )
        {
            qreal c = (qreal)  hb_parnd( 1 );
            qreal m = (qreal)  hb_parnd( 2 );
            qreal y = (qreal)  hb_parnd( 3 );
            qreal k = (qreal)  hb_parnd( 4 );
            qreal a = hb_param( 5, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 5 ) : 0;
            p_color->getCmykF( &c, &m, &y, &k, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_stornd( c, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_stornd( m, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_stornd( y, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_stornd( k, 4 );
            }
            if( HB_ISBYREF( 5 ) )
            {
                hb_stornd( a, 5 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETHSL )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getHsl ( int * h, int * s, int * l, int * a = 0 ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF | QTH_DEFAULT ) )
        {
            int h = hb_parni( 1 );
            int s = hb_parni( 2 );
            int l = hb_parni( 3 );
            int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 0;
            p_color->getHsl( &h, &s, &l, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( h, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( s, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( l, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( a, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETHSLF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getHslF ( qreal * h, qreal * s, qreal * l, qreal * a = 0 ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 2, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 3, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 4, HB_IT_DOUBLE, QTH_BYREF | QTH_DEFAULT ) )
        {
            qreal h = (qreal)  hb_parnd( 1 );
            qreal s = (qreal)  hb_parnd( 2 );
            qreal l = (qreal)  hb_parnd( 3 );
            qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 0;
            p_color->getHslF( &h, &s, &l, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_stornd( h, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_stornd( s, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_stornd( l, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_stornd( a, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETHSV )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getHsv ( int * h, int * s, int * v, int * a = 0 ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF | QTH_DEFAULT ) )
        {
            int h = hb_parni( 1 );
            int s = hb_parni( 2 );
            int v = hb_parni( 3 );
            int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 0;
            p_color->getHsv( &h, &s, &v, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( h, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( s, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( v, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( a, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETHSVF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getHsvF ( qreal * h, qreal * s, qreal * v, qreal * a = 0 ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 2, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 3, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 4, HB_IT_DOUBLE, QTH_BYREF | QTH_DEFAULT ) )
        {
            qreal h = (qreal)  hb_parnd( 1 );
            qreal s = (qreal)  hb_parnd( 2 );
            qreal v = (qreal)  hb_parnd( 3 );
            qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 0;
            p_color->getHsvF( &h, &s, &v, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_stornd( h, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_stornd( s, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_stornd( v, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_stornd( a, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETRGB )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getRgb ( int * r, int * g, int * b, int * a = 0 ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 2, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 3, HB_IT_INTEGER, QTH_BYREF ) && qth_Is( 4, HB_IT_INTEGER, QTH_BYREF | QTH_DEFAULT ) )
        {
            int r = hb_parni( 1 );
            int g = hb_parni( 2 );
            int b = hb_parni( 3 );
            int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 0;
            p_color->getRgb( &r, &g, &b, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_storni( r, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_storni( g, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_storni( b, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_storni( a, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GETRGBF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  getRgbF ( qreal * r, qreal * g, qreal * b, qreal * a = 0 ) const
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 2, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 3, HB_IT_DOUBLE, QTH_BYREF ) && qth_Is( 4, HB_IT_DOUBLE, QTH_BYREF | QTH_DEFAULT ) )
        {
            qreal r = (qreal)  hb_parnd( 1 );
            qreal g = (qreal)  hb_parnd( 2 );
            qreal b = (qreal)  hb_parnd( 3 );
            qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 0;
            p_color->getRgbF( &r, &g, &b, &a );
            hb_ret();
            if( HB_ISBYREF( 1 ) )
            {
                hb_stornd( r, 1 );
            }
            if( HB_ISBYREF( 2 ) )
            {
                hb_stornd( g, 2 );
            }
            if( HB_ISBYREF( 3 ) )
            {
                hb_stornd( b, 3 );
            }
            if( HB_ISBYREF( 4 ) )
            {
                hb_stornd( a, 4 );
            }
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GREEN )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  green () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->green() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GREENF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  greenF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->greenF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSLHUE )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  hslHue () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->hslHue() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSLHUEF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  hslHueF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->hslHueF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSLSATURATION )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  hslSaturation () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->hslSaturation() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSLSATURATIONF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  hslSaturationF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->hslSaturationF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSVHUE )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  hsvHue () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->hsvHue() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSVHUEF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  hsvHueF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->hsvHueF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSVSATURATION )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  hsvSaturation () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->hsvSaturation() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HSVSATURATIONF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  hsvSaturationF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->hsvSaturationF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HUE )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  hue () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->hue() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HUEF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  hueF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->hueF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVALID )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : bool  isValid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_color->isValid() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LIGHTER )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  lighter ( int factor = 150 ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int factor = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 150;
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->lighter( factor ) ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LIGHTNESS )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  lightness () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->lightness() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( LIGHTNESSF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  lightnessF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->lightnessF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAGENTA )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  magenta () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->magenta() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAGENTAF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  magentaF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->magentaF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( NAME )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QString  name () const
         */
        if( hb_pcount() == 0 )
        {
            qth_ret_QString( p_color->name() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RED )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  red () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->red() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( REDF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  redF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->redF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RGB )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QRgb  rgb () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->rgb() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RGBA )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QRgb  rgba () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->rgba() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SATURATION )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  saturation () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->saturation() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SATURATIONF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  saturationF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->saturationF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALPHA )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setAlpha ( int alpha )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_color->setAlpha( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETALPHAF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setAlphaF ( qreal alpha )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_color->setAlphaF( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBLUE )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setBlue ( int blue )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_color->setBlue( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETBLUEF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setBlueF ( qreal blue )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_color->setBlueF( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCMYK )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setCmyk ( int c, int m, int y, int k, int a = 255 )
         */
        if( ( hb_pcount() <= 5 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) && qth_Is( 5, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int a = hb_param( 5, HB_IT_INTEGER ) ? hb_parni( 5 ) : 255;
            p_color->setCmyk( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCMYKF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setCmykF ( qreal c, qreal m, qreal y, qreal k, qreal a = 1.0 )
         */
        if( ( hb_pcount() <= 5 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE ) && qth_Is( 5, HB_IT_DOUBLE, QTH_DEFAULT ) )
        {
            qreal a = hb_param( 5, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 5 ) : 1.0;
            p_color->setCmykF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), (qreal)  hb_parnd( 4 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGREEN )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setGreen ( int green )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_color->setGreen( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGREENF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setGreenF ( qreal green )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_color->setGreenF( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHSL )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setHsl ( int h, int s, int l, int a = 255 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
            p_color->setHsl( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHSLF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setHslF ( qreal h, qreal s, qreal l, qreal a = 1.0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE, QTH_DEFAULT ) )
        {
            qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 1.0;
            p_color->setHslF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHSV )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setHsv ( int h, int s, int v, int a = 255 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
            p_color->setHsv( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHSVF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setHsvF ( qreal h, qreal s, qreal v, qreal a = 1.0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE, QTH_DEFAULT ) )
        {
            qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 1.0;
            p_color->setHsvF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETNAMEDCOLOR )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setNamedColor ( const QString & name )
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString name =  qth_par_QString( 1 );
            p_color->setNamedColor( name );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRED )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setRed ( int red )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_color->setRed( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETREDF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setRedF ( qreal red )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_DOUBLE ) )
        {
            p_color->setRedF( (qreal)  hb_parnd( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRGB )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setRgb ( int r, int g, int b, int a = 255 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
            p_color->setRgb( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a );
            hb_ret();
            return;
        }
        /*
         * _public_functions_ : void  setRgb ( QRgb rgb )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QRgb" ) )
        {
            p_color->setRgb( (QRgb)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRGBF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setRgbF ( qreal r, qreal g, qreal b, qreal a = 1.0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE, QTH_DEFAULT ) )
        {
            qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 1.0;
            p_color->setRgbF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), a );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETRGBA )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : void  setRgba ( QRgb rgba )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QRgb" ) )
        {
            p_color->setRgba( (QRgb)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPEC )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : Spec  spec () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->spec() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOCMYK )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  toCmyk () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->toCmyk() ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOHSL )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  toHsl () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->toHsl() ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOHSV )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  toHsv () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->toHsv() ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TORGB )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : QColor  toRgb () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QColor, new QColor( p_color->toRgb() ), "QColor" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALUE )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  value () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->value() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VALUEF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  valueF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->valueF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( YELLOW )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : int  yellow () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_color->yellow() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( YELLOWF )
{
    QColor* p_color = static_cast<QColor *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_color )
    {
        /*
         * _public_functions_ : qreal  yellowF () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnd( p_color->yellowF() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_ALLOWX11COLORNAMES )
{
#if X11
    /*
     * _static_public_members_ : bool  allowX11ColorNames ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QColor::allowX11ColorNames() == true );
        return;
    }
#endif  /* X11 */
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_COLORNAMES )
{
    /*
     * _static_public_members_ : QStringList  colorNames ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QStringList'
        // qth_itemPushNewReturn( QtH::QStringList, new QStringList( QColor::colorNames() ), "QStringList" );
        qth_errRT_UNKNOWNOBJ( "QColor::colorNames", "Don't know how to return type 'QStringList'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMCMYK )
{
    /*
     * _static_public_members_ : QColor  fromCmyk ( int c, int m, int y, int k, int a = 255 )
     */
    if( ( hb_pcount() <= 5 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) && qth_Is( 5, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int a = hb_param( 5, HB_IT_INTEGER ) ? hb_parni( 5 ) : 255;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromCmyk( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMCMYKF )
{
    /*
     * _static_public_members_ : QColor  fromCmykF ( qreal c, qreal m, qreal y, qreal k, qreal a = 1.0 )
     */
    if( ( hb_pcount() <= 5 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE ) && qth_Is( 5, HB_IT_DOUBLE, QTH_DEFAULT ) )
    {
        qreal a = hb_param( 5, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 5 ) : 1.0;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromCmykF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), (qreal)  hb_parnd( 4 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMHSL )
{
    /*
     * _static_public_members_ : QColor  fromHsl ( int h, int s, int l, int a = 255 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromHsl( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMHSLF )
{
    /*
     * _static_public_members_ : QColor  fromHslF ( qreal h, qreal s, qreal l, qreal a = 1.0 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE, QTH_DEFAULT ) )
    {
        qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 1.0;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromHslF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMHSV )
{
    /*
     * _static_public_members_ : QColor  fromHsv ( int h, int s, int v, int a = 255 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromHsv( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMHSVF )
{
    /*
     * _static_public_members_ : QColor  fromHsvF ( qreal h, qreal s, qreal v, qreal a = 1.0 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE, QTH_DEFAULT ) )
    {
        qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 1.0;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromHsvF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMRGB )
{
    /*
     * _static_public_members_ : QColor  fromRgb ( QRgb rgb )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QRgb" ) )
    {
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromRgb( (QRgb)  qth_par_IntType( 1 ) ) ), "QColor" );
        return;
    }
    /*
     * _static_public_members_ : QColor  fromRgb ( int r, int g, int b, int a = 255 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
    {
        int a = hb_param( 4, HB_IT_INTEGER ) ? hb_parni( 4 ) : 255;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromRgb( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMRGBF )
{
    /*
     * _static_public_members_ : QColor  fromRgbF ( qreal r, qreal g, qreal b, qreal a = 1.0 )
     */
    if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_DOUBLE ) && qth_Is( 2, HB_IT_DOUBLE ) && qth_Is( 3, HB_IT_DOUBLE ) && qth_Is( 4, HB_IT_DOUBLE, QTH_DEFAULT ) )
    {
        qreal a = hb_param( 4, HB_IT_DOUBLE ) ?  (qreal) hb_parnd( 4 ) : 1.0;
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromRgbF( (qreal)  hb_parnd( 1 ), (qreal)  hb_parnd( 2 ), (qreal)  hb_parnd( 3 ), a ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_FROMRGBA )
{
    /*
     * _static_public_members_ : QColor  fromRgba ( QRgb rgba )
     */
    if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "QRgb" ) )
    {
        qth_itemPushNewReturn( QtH::QColor, new QColor( QColor::fromRgba( (QRgb)  qth_par_IntType( 1 ) ) ), "QColor" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_ISVALIDCOLOR )
{
#if QT_VERSION >= 0x040700
    /*
     * _static_public_members_ : bool  isValidColor ( const QString & name )
     */
    if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
    {
        QString name =  qth_par_QString( 1 );
        hb_retl( QColor::isValidColor( name ) == true );
        return;
    }
#endif  /* QT_VERSION >= 0x040700 */
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_SETALLOWX11COLORNAMES )
{
#if X11
    /*
     * _static_public_members_ : void  setAllowX11ColorNames ( bool enabled )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
    {
        QColor::setAllowX11ColorNames( hb_parl( 1 ) );
        hb_ret();
        return;
    }
#endif  /* X11 */
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_E_RGB )
{
    /*
     * _static_public_members_ : Rgb
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QColor::Spec", "Rgb", Rgb );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_E_HSV )
{
    /*
     * _static_public_members_ : Hsv
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QColor::Spec", "Hsv", Hsv );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_E_CMYK )
{
    /*
     * _static_public_members_ : Cmyk
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QColor::Spec", "Cmyk", Cmyk );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_E_HSL )
{
    /*
     * _static_public_members_ : Hsl
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QColor::Spec", "Hsl", Hsl );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QCOLOR_E_INVALID )
{
    /*
     * _static_public_members_ : Invalid
     */
    if( hb_pcount() == 0 )
    {
        qth_registerClassEnum( hb_stackSelfItem(), "QColor::Spec", "Invalid", Invalid );
        hb_itemReturn( hb_stackSelfItem() );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                  , HB_FUNCNAME( NEW                          ) );
    hb_clsAdd( uiClass, "ALPHA"                , HB_FUNCNAME( ALPHA                        ) );
    hb_clsAdd( uiClass, "ALPHAF"               , HB_FUNCNAME( ALPHAF                       ) );
    hb_clsAdd( uiClass, "BLACK"                , HB_FUNCNAME( BLACK                        ) );
    hb_clsAdd( uiClass, "BLACKF"               , HB_FUNCNAME( BLACKF                       ) );
    hb_clsAdd( uiClass, "BLUE"                 , HB_FUNCNAME( BLUE                         ) );
    hb_clsAdd( uiClass, "BLUEF"                , HB_FUNCNAME( BLUEF                        ) );
    hb_clsAdd( uiClass, "CONVERTTO"            , HB_FUNCNAME( CONVERTTO                    ) );
    hb_clsAdd( uiClass, "CYAN"                 , HB_FUNCNAME( CYAN                         ) );
    hb_clsAdd( uiClass, "CYANF"                , HB_FUNCNAME( CYANF                        ) );
    hb_clsAdd( uiClass, "DARKER"               , HB_FUNCNAME( DARKER                       ) );
    hb_clsAdd( uiClass, "GETCMYK"              , HB_FUNCNAME( GETCMYK                      ) );
    hb_clsAdd( uiClass, "GETCMYKF"             , HB_FUNCNAME( GETCMYKF                     ) );
    hb_clsAdd( uiClass, "GETHSL"               , HB_FUNCNAME( GETHSL                       ) );
    hb_clsAdd( uiClass, "GETHSLF"              , HB_FUNCNAME( GETHSLF                      ) );
    hb_clsAdd( uiClass, "GETHSV"               , HB_FUNCNAME( GETHSV                       ) );
    hb_clsAdd( uiClass, "GETHSVF"              , HB_FUNCNAME( GETHSVF                      ) );
    hb_clsAdd( uiClass, "GETRGB"               , HB_FUNCNAME( GETRGB                       ) );
    hb_clsAdd( uiClass, "GETRGBF"              , HB_FUNCNAME( GETRGBF                      ) );
    hb_clsAdd( uiClass, "GREEN"                , HB_FUNCNAME( GREEN                        ) );
    hb_clsAdd( uiClass, "GREENF"               , HB_FUNCNAME( GREENF                       ) );
    hb_clsAdd( uiClass, "HSLHUE"               , HB_FUNCNAME( HSLHUE                       ) );
    hb_clsAdd( uiClass, "HSLHUEF"              , HB_FUNCNAME( HSLHUEF                      ) );
    hb_clsAdd( uiClass, "HSLSATURATION"        , HB_FUNCNAME( HSLSATURATION                ) );
    hb_clsAdd( uiClass, "HSLSATURATIONF"       , HB_FUNCNAME( HSLSATURATIONF               ) );
    hb_clsAdd( uiClass, "HSVHUE"               , HB_FUNCNAME( HSVHUE                       ) );
    hb_clsAdd( uiClass, "HSVHUEF"              , HB_FUNCNAME( HSVHUEF                      ) );
    hb_clsAdd( uiClass, "HSVSATURATION"        , HB_FUNCNAME( HSVSATURATION                ) );
    hb_clsAdd( uiClass, "HSVSATURATIONF"       , HB_FUNCNAME( HSVSATURATIONF               ) );
    hb_clsAdd( uiClass, "HUE"                  , HB_FUNCNAME( HUE                          ) );
    hb_clsAdd( uiClass, "HUEF"                 , HB_FUNCNAME( HUEF                         ) );
    hb_clsAdd( uiClass, "ISVALID"              , HB_FUNCNAME( ISVALID                      ) );
    hb_clsAdd( uiClass, "LIGHTER"              , HB_FUNCNAME( LIGHTER                      ) );
    hb_clsAdd( uiClass, "LIGHTNESS"            , HB_FUNCNAME( LIGHTNESS                    ) );
    hb_clsAdd( uiClass, "LIGHTNESSF"           , HB_FUNCNAME( LIGHTNESSF                   ) );
    hb_clsAdd( uiClass, "MAGENTA"              , HB_FUNCNAME( MAGENTA                      ) );
    hb_clsAdd( uiClass, "MAGENTAF"             , HB_FUNCNAME( MAGENTAF                     ) );
    hb_clsAdd( uiClass, "NAME"                 , HB_FUNCNAME( NAME                         ) );
    hb_clsAdd( uiClass, "RED"                  , HB_FUNCNAME( RED                          ) );
    hb_clsAdd( uiClass, "REDF"                 , HB_FUNCNAME( REDF                         ) );
    hb_clsAdd( uiClass, "RGB"                  , HB_FUNCNAME( RGB                          ) );
    hb_clsAdd( uiClass, "RGBA"                 , HB_FUNCNAME( RGBA                         ) );
    hb_clsAdd( uiClass, "SATURATION"           , HB_FUNCNAME( SATURATION                   ) );
    hb_clsAdd( uiClass, "SATURATIONF"          , HB_FUNCNAME( SATURATIONF                  ) );
    hb_clsAdd( uiClass, "SETALPHA"             , HB_FUNCNAME( SETALPHA                     ) );
    hb_clsAdd( uiClass, "SETALPHAF"            , HB_FUNCNAME( SETALPHAF                    ) );
    hb_clsAdd( uiClass, "SETBLUE"              , HB_FUNCNAME( SETBLUE                      ) );
    hb_clsAdd( uiClass, "SETBLUEF"             , HB_FUNCNAME( SETBLUEF                     ) );
    hb_clsAdd( uiClass, "SETCMYK"              , HB_FUNCNAME( SETCMYK                      ) );
    hb_clsAdd( uiClass, "SETCMYKF"             , HB_FUNCNAME( SETCMYKF                     ) );
    hb_clsAdd( uiClass, "SETGREEN"             , HB_FUNCNAME( SETGREEN                     ) );
    hb_clsAdd( uiClass, "SETGREENF"            , HB_FUNCNAME( SETGREENF                    ) );
    hb_clsAdd( uiClass, "SETHSL"               , HB_FUNCNAME( SETHSL                       ) );
    hb_clsAdd( uiClass, "SETHSLF"              , HB_FUNCNAME( SETHSLF                      ) );
    hb_clsAdd( uiClass, "SETHSV"               , HB_FUNCNAME( SETHSV                       ) );
    hb_clsAdd( uiClass, "SETHSVF"              , HB_FUNCNAME( SETHSVF                      ) );
    hb_clsAdd( uiClass, "SETNAMEDCOLOR"        , HB_FUNCNAME( SETNAMEDCOLOR                ) );
    hb_clsAdd( uiClass, "SETRED"               , HB_FUNCNAME( SETRED                       ) );
    hb_clsAdd( uiClass, "SETREDF"              , HB_FUNCNAME( SETREDF                      ) );
    hb_clsAdd( uiClass, "SETRGB"               , HB_FUNCNAME( SETRGB                       ) );
    hb_clsAdd( uiClass, "SETRGBF"              , HB_FUNCNAME( SETRGBF                      ) );
    hb_clsAdd( uiClass, "SETRGBA"              , HB_FUNCNAME( SETRGBA                      ) );
    hb_clsAdd( uiClass, "SPEC"                 , HB_FUNCNAME( SPEC                         ) );
    hb_clsAdd( uiClass, "TOCMYK"               , HB_FUNCNAME( TOCMYK                       ) );
    hb_clsAdd( uiClass, "TOHSL"                , HB_FUNCNAME( TOHSL                        ) );
    hb_clsAdd( uiClass, "TOHSV"                , HB_FUNCNAME( TOHSV                        ) );
    hb_clsAdd( uiClass, "TORGB"                , HB_FUNCNAME( TORGB                        ) );
    hb_clsAdd( uiClass, "VALUE"                , HB_FUNCNAME( VALUE                        ) );
    hb_clsAdd( uiClass, "VALUEF"               , HB_FUNCNAME( VALUEF                       ) );
    hb_clsAdd( uiClass, "YELLOW"               , HB_FUNCNAME( YELLOW                       ) );
    hb_clsAdd( uiClass, "YELLOWF"              , HB_FUNCNAME( YELLOWF                      ) );
    hb_clsAdd( uiClass, "ALLOWX11COLORNAMES"   , HB_FUNCNAME( QCOLOR_ALLOWX11COLORNAMES    ) );
    hb_clsAdd( uiClass, "COLORNAMES"           , HB_FUNCNAME( QCOLOR_COLORNAMES            ) );
    hb_clsAdd( uiClass, "FROMCMYK"             , HB_FUNCNAME( QCOLOR_FROMCMYK              ) );
    hb_clsAdd( uiClass, "FROMCMYKF"            , HB_FUNCNAME( QCOLOR_FROMCMYKF             ) );
    hb_clsAdd( uiClass, "FROMHSL"              , HB_FUNCNAME( QCOLOR_FROMHSL               ) );
    hb_clsAdd( uiClass, "FROMHSLF"             , HB_FUNCNAME( QCOLOR_FROMHSLF              ) );
    hb_clsAdd( uiClass, "FROMHSV"              , HB_FUNCNAME( QCOLOR_FROMHSV               ) );
    hb_clsAdd( uiClass, "FROMHSVF"             , HB_FUNCNAME( QCOLOR_FROMHSVF              ) );
    hb_clsAdd( uiClass, "FROMRGB"              , HB_FUNCNAME( QCOLOR_FROMRGB               ) );
    hb_clsAdd( uiClass, "FROMRGBF"             , HB_FUNCNAME( QCOLOR_FROMRGBF              ) );
    hb_clsAdd( uiClass, "FROMRGBA"             , HB_FUNCNAME( QCOLOR_FROMRGBA              ) );
    hb_clsAdd( uiClass, "ISVALIDCOLOR"         , HB_FUNCNAME( QCOLOR_ISVALIDCOLOR          ) );
    hb_clsAdd( uiClass, "SETALLOWX11COLORNAMES", HB_FUNCNAME( QCOLOR_SETALLOWX11COLORNAMES ) );
    hb_clsAdd( uiClass, "E_RGB"                , HB_FUNCNAME( QCOLOR_E_RGB                 ) );
    hb_clsAdd( uiClass, "E_HSV"                , HB_FUNCNAME( QCOLOR_E_HSV                 ) );
    hb_clsAdd( uiClass, "E_CMYK"               , HB_FUNCNAME( QCOLOR_E_CMYK                ) );
    hb_clsAdd( uiClass, "E_HSL"                , HB_FUNCNAME( QCOLOR_E_HSL                 ) );
    hb_clsAdd( uiClass, "E_INVALID"            , HB_FUNCNAME( QCOLOR_E_INVALID             ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
