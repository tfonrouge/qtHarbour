/*
 * $Id: qthQTableView.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QTableView>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTABLEVIEW );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QABSTRACTITEMVIEW );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTABLEVIEW )
{ "QTABLEVIEW", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTABLEVIEW )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QABSTRACTITEMVIEW", { HB_FS_PUBLIC }, { HB_FUNCNAME( QABSTRACTITEMVIEW ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTABLEVIEW )

HB_FUNC( QTABLEVIEW )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QTableView ( QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 1 ) && qth_Is( 1, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 1, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 1 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QTableView, new QTableView( parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( CLEARSPANS )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  clearSpans ()
         */
        if( hb_pcount() == 0 )
        {
            p_tableView->clearSpans();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLUMNAT )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  columnAt ( int x ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->columnAt( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLUMNSPAN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  columnSpan ( int row, int column ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->columnSpan( hb_parni( 1 ), hb_parni( 2 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLUMNVIEWPORTPOSITION )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  columnViewportPosition ( int column ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->columnViewportPosition( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COLUMNWIDTH )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  columnWidth ( int column ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->columnWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( GRIDSTYLE )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : Qt::PenStyle  gridStyle () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_tableView->gridStyle() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HORIZONTALHEADER )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : QHeaderView *  horizontalHeader () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QHeaderView'
            // qth_itemReturn( (PCPP_OBJECT) p_tableView->horizontalHeader(), "QHeaderView" );
            qth_errRT_UNKNOWNOBJ( "QTableView::horizontalHeader", "Don't know how to return type 'QHeaderView'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISCOLUMNHIDDEN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : bool  isColumnHidden ( int column ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retl( p_tableView->isColumnHidden( hb_parni( 1 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISCORNERBUTTONENABLED )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : bool  isCornerButtonEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tableView->isCornerButtonEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISROWHIDDEN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : bool  isRowHidden ( int row ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retl( p_tableView->isRowHidden( hb_parni( 1 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISSORTINGENABLED )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : bool  isSortingEnabled () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tableView->isSortingEnabled() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROWAT )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  rowAt ( int y ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->rowAt( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROWHEIGHT )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  rowHeight ( int row ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->rowHeight( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROWSPAN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  rowSpan ( int row, int column ) const
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->rowSpan( hb_parni( 1 ), hb_parni( 2 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ROWVIEWPORTPOSITION )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : int  rowViewportPosition ( int row ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_tableView->rowViewportPosition( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLUMNHIDDEN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setColumnHidden ( int column, bool hide )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_LOGICAL ) )
        {
            p_tableView->setColumnHidden( hb_parni( 1 ), hb_parl( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCOLUMNWIDTH )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setColumnWidth ( int column, int width )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_tableView->setColumnWidth( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETCORNERBUTTONENABLED )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setCornerButtonEnabled ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tableView->setCornerButtonEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGRIDSTYLE )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setGridStyle ( Qt::PenStyle style )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::PenStyle" ) )
        {
            p_tableView->setGridStyle( (Qt::PenStyle)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETHORIZONTALHEADER )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setHorizontalHeader ( QHeaderView * header )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QHeaderView" ) )
        {
            p_tableView->setHorizontalHeader( static_cast<QHeaderView *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETROWHEIGHT )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setRowHeight ( int row, int height )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_tableView->setRowHeight( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETROWHIDDEN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setRowHidden ( int row, bool hide )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_LOGICAL ) )
        {
            p_tableView->setRowHidden( hb_parni( 1 ), hb_parl( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSORTINGENABLED )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setSortingEnabled ( bool enable )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tableView->setSortingEnabled( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSPAN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setSpan ( int row, int column, int rowSpanCount, int columnSpanCount )
         */
        if( ( hb_pcount() == 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) && qth_Is( 3, HB_IT_INTEGER ) && qth_Is( 4, HB_IT_INTEGER ) )
        {
            p_tableView->setSpan( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETVERTICALHEADER )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setVerticalHeader ( QHeaderView * header )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QHeaderView" ) )
        {
            p_tableView->setVerticalHeader( static_cast<QHeaderView *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETWORDWRAP )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  setWordWrap ( bool on )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tableView->setWordWrap( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWGRID )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : bool  showGrid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tableView->showGrid() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SORTBYCOLUMN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : void  sortByColumn ( int column, Qt::SortOrder order )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsIntType( 2, "Qt::SortOrder" ) )
        {
            p_tableView->sortByColumn( hb_parni( 1 ), (Qt::SortOrder)  qth_par_IntType( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( VERTICALHEADER )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : QHeaderView *  verticalHeader () const
         */
        if( hb_pcount() == 0 )
        {
            // ! Don't know how to return type 'QHeaderView'
            // qth_itemReturn( (PCPP_OBJECT) p_tableView->verticalHeader(), "QHeaderView" );
            qth_errRT_UNKNOWNOBJ( "QTableView::verticalHeader", "Don't know how to return type 'QHeaderView'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( WORDWRAP )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_functions_ : bool  wordWrap () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_tableView->wordWrap() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INDEXAT )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _reimplemented_public_functions_ : virtual QModelIndex  indexAt ( const QPoint & pos ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPoint" ) )
        {
            // const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
            // ! Don't know how to return type 'QModelIndex'
            // qth_itemPushNewReturn( QtH::QModelIndex, new QModelIndex( p_tableView->indexAt( pos ) ), "QModelIndex" );
            qth_errRT_UNKNOWNOBJ( "QTableView::indexAt", "Don't know how to return type 'QModelIndex'" ) ;
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMODEL )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  setModel ( QAbstractItemModel * model )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QAbstractItemModel" ) )
        {
            p_tableView->setModel( static_cast<QAbstractItemModel *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETROOTINDEX )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  setRootIndex ( const QModelIndex & index )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QModelIndex" ) )
        {
            const QModelIndex & index = * static_cast<QModelIndex *>( qth_par_QthObject( 1 ) );
            p_tableView->setRootIndex( index );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSELECTIONMODEL )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  setSelectionModel ( QItemSelectionModel * selectionModel )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QItemSelectionModel" ) )
        {
            p_tableView->setSelectionModel( static_cast<QItemSelectionModel *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HIDECOLUMN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  hideColumn ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->hideColumn( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HIDEROW )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  hideRow ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->hideRow( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESIZECOLUMNTOCONTENTS )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  resizeColumnToContents ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->resizeColumnToContents( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESIZECOLUMNSTOCONTENTS )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  resizeColumnsToContents ()
         */
        if( hb_pcount() == 0 )
        {
            p_tableView->resizeColumnsToContents();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESIZEROWTOCONTENTS )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  resizeRowToContents ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->resizeRowToContents( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( RESIZEROWSTOCONTENTS )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  resizeRowsToContents ()
         */
        if( hb_pcount() == 0 )
        {
            p_tableView->resizeRowsToContents();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTCOLUMN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  selectColumn ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->selectColumn( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SELECTROW )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  selectRow ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->selectRow( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSHOWGRID )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  setShowGrid ( bool show )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LOGICAL ) )
        {
            p_tableView->setShowGrid( hb_parl( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWCOLUMN )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  showColumn ( int column )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->showColumn( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SHOWROW )
{
    QTableView* p_tableView = static_cast<QTableView *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_tableView )
    {
        /*
         * _public_slots_ : void  showRow ( int row )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_tableView->showRow( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                    , HB_FUNCNAME( NEW                     ) );
    hb_clsAdd( uiClass, "CLEARSPANS"             , HB_FUNCNAME( CLEARSPANS              ) );
    hb_clsAdd( uiClass, "COLUMNAT"               , HB_FUNCNAME( COLUMNAT                ) );
    hb_clsAdd( uiClass, "COLUMNSPAN"             , HB_FUNCNAME( COLUMNSPAN              ) );
    hb_clsAdd( uiClass, "COLUMNVIEWPORTPOSITION" , HB_FUNCNAME( COLUMNVIEWPORTPOSITION  ) );
    hb_clsAdd( uiClass, "COLUMNWIDTH"            , HB_FUNCNAME( COLUMNWIDTH             ) );
    hb_clsAdd( uiClass, "GRIDSTYLE"              , HB_FUNCNAME( GRIDSTYLE               ) );
    hb_clsAdd( uiClass, "HORIZONTALHEADER"       , HB_FUNCNAME( HORIZONTALHEADER        ) );
    hb_clsAdd( uiClass, "ISCOLUMNHIDDEN"         , HB_FUNCNAME( ISCOLUMNHIDDEN          ) );
    hb_clsAdd( uiClass, "ISCORNERBUTTONENABLED"  , HB_FUNCNAME( ISCORNERBUTTONENABLED   ) );
    hb_clsAdd( uiClass, "ISROWHIDDEN"            , HB_FUNCNAME( ISROWHIDDEN             ) );
    hb_clsAdd( uiClass, "ISSORTINGENABLED"       , HB_FUNCNAME( ISSORTINGENABLED        ) );
    hb_clsAdd( uiClass, "ROWAT"                  , HB_FUNCNAME( ROWAT                   ) );
    hb_clsAdd( uiClass, "ROWHEIGHT"              , HB_FUNCNAME( ROWHEIGHT               ) );
    hb_clsAdd( uiClass, "ROWSPAN"                , HB_FUNCNAME( ROWSPAN                 ) );
    hb_clsAdd( uiClass, "ROWVIEWPORTPOSITION"    , HB_FUNCNAME( ROWVIEWPORTPOSITION     ) );
    hb_clsAdd( uiClass, "SETCOLUMNHIDDEN"        , HB_FUNCNAME( SETCOLUMNHIDDEN         ) );
    hb_clsAdd( uiClass, "SETCOLUMNWIDTH"         , HB_FUNCNAME( SETCOLUMNWIDTH          ) );
    hb_clsAdd( uiClass, "SETCORNERBUTTONENABLED" , HB_FUNCNAME( SETCORNERBUTTONENABLED  ) );
    hb_clsAdd( uiClass, "SETGRIDSTYLE"           , HB_FUNCNAME( SETGRIDSTYLE            ) );
    hb_clsAdd( uiClass, "SETHORIZONTALHEADER"    , HB_FUNCNAME( SETHORIZONTALHEADER     ) );
    hb_clsAdd( uiClass, "SETROWHEIGHT"           , HB_FUNCNAME( SETROWHEIGHT            ) );
    hb_clsAdd( uiClass, "SETROWHIDDEN"           , HB_FUNCNAME( SETROWHIDDEN            ) );
    hb_clsAdd( uiClass, "SETSORTINGENABLED"      , HB_FUNCNAME( SETSORTINGENABLED       ) );
    hb_clsAdd( uiClass, "SETSPAN"                , HB_FUNCNAME( SETSPAN                 ) );
    hb_clsAdd( uiClass, "SETVERTICALHEADER"      , HB_FUNCNAME( SETVERTICALHEADER       ) );
    hb_clsAdd( uiClass, "SETWORDWRAP"            , HB_FUNCNAME( SETWORDWRAP             ) );
    hb_clsAdd( uiClass, "SHOWGRID"               , HB_FUNCNAME( SHOWGRID                ) );
    hb_clsAdd( uiClass, "SORTBYCOLUMN"           , HB_FUNCNAME( SORTBYCOLUMN            ) );
    hb_clsAdd( uiClass, "VERTICALHEADER"         , HB_FUNCNAME( VERTICALHEADER          ) );
    hb_clsAdd( uiClass, "WORDWRAP"               , HB_FUNCNAME( WORDWRAP                ) );
    hb_clsAdd( uiClass, "INDEXAT"                , HB_FUNCNAME( INDEXAT                 ) );
    hb_clsAdd( uiClass, "SETMODEL"               , HB_FUNCNAME( SETMODEL                ) );
    hb_clsAdd( uiClass, "SETROOTINDEX"           , HB_FUNCNAME( SETROOTINDEX            ) );
    hb_clsAdd( uiClass, "SETSELECTIONMODEL"      , HB_FUNCNAME( SETSELECTIONMODEL       ) );
    hb_clsAdd( uiClass, "HIDECOLUMN"             , HB_FUNCNAME( HIDECOLUMN              ) );
    hb_clsAdd( uiClass, "HIDEROW"                , HB_FUNCNAME( HIDEROW                 ) );
    hb_clsAdd( uiClass, "RESIZECOLUMNTOCONTENTS" , HB_FUNCNAME( RESIZECOLUMNTOCONTENTS  ) );
    hb_clsAdd( uiClass, "RESIZECOLUMNSTOCONTENTS", HB_FUNCNAME( RESIZECOLUMNSTOCONTENTS ) );
    hb_clsAdd( uiClass, "RESIZEROWTOCONTENTS"    , HB_FUNCNAME( RESIZEROWTOCONTENTS     ) );
    hb_clsAdd( uiClass, "RESIZEROWSTOCONTENTS"   , HB_FUNCNAME( RESIZEROWSTOCONTENTS    ) );
    hb_clsAdd( uiClass, "SELECTCOLUMN"           , HB_FUNCNAME( SELECTCOLUMN            ) );
    hb_clsAdd( uiClass, "SELECTROW"              , HB_FUNCNAME( SELECTROW               ) );
    hb_clsAdd( uiClass, "SETSHOWGRID"            , HB_FUNCNAME( SETSHOWGRID             ) );
    hb_clsAdd( uiClass, "SHOWCOLUMN"             , HB_FUNCNAME( SHOWCOLUMN              ) );
    hb_clsAdd( uiClass, "SHOWROW"                , HB_FUNCNAME( SHOWROW                 ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
