/*
 * $Id:$
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QToolTip>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QTOOLTIP );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QTOOLTIP )
{ "QTOOLTIP", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QTOOLTIP )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL }
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QTOOLTIP )

HB_FUNC( QTOOLTIP )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC( QTOOLTIP_FONT )
{
    /*
     * _static_public_members_ : QFont  font ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QFont'
        // qth_itemPushNewReturn( QtH::QFont, new QFont( QToolTip::font() ), "QFont" );
        qth_errRT_UNKNOWNOBJ( "QToolTip::font", "Don't know how to return type 'QFont'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_HIDETEXT )
{
    /*
     * _static_public_members_ : void  hideText ()
     */
    if( hb_pcount() == 0 )
    {
        QToolTip::hideText();
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_ISVISIBLE )
{
    /*
     * _static_public_members_ : bool  isVisible ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retl( QToolTip::isVisible() == true );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_PALETTE )
{
    /*
     * _static_public_members_ : QPalette  palette ()
     */
    if( hb_pcount() == 0 )
    {
        // ! Don't know how to return type 'QPalette'
        // qth_itemPushNewReturn( QtH::QPalette, new QPalette( QToolTip::palette() ), "QPalette" );
        qth_errRT_UNKNOWNOBJ( "QToolTip::palette", "Don't know how to return type 'QPalette'" ) ;
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_SETFONT )
{
    /*
     * _static_public_members_ : void  setFont ( const QFont & font )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QFont" ) )
    {
        const QFont & font = * static_cast<QFont *>( qth_par_QthObject( 1 ) );
        QToolTip::setFont( font );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_SETPALETTE )
{
    /*
     * _static_public_members_ : void  setPalette ( const QPalette & palette )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QPalette" ) )
    {
        const QPalette & palette = * static_cast<QPalette *>( qth_par_QthObject( 1 ) );
        QToolTip::setPalette( palette );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_SHOWTEXT )
{
    /*
     * _static_public_members_ : void  showText ( const QPoint & pos, const QString & text, QWidget * w, const QRect & rect )
     */
    if( ( hb_pcount() == 4 ) && qth_IsObject( 1, "QPoint" ) && qth_IsString( 2 ) && qth_IsObject( 3, "QWidget" ) && qth_IsObject( 4, "QRect" ) )
    {
        const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        QString text =  qth_par_QString( 2 );
        const QRect & rect = * static_cast<QRect *>( qth_par_QthObject( 4 ) );
        QToolTip::showText( pos, text, static_cast<QWidget *>( qth_par_QthObject( 3 ) ), rect );
        hb_ret();
        return;
    }
    /*
     * _static_public_members_ : void  showText ( const QPoint & pos, const QString & text, QWidget * w = 0 )
     */
    if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QPoint" ) && qth_IsString( 2 ) && qth_Is( 3, "QWidget", QTH_DEFAULT ) )
    {
        const QPoint & pos = * static_cast<QPoint *>( qth_par_QthObject( 1 ) );
        QString text =  qth_par_QString( 2 );
        QWidget* w = hb_param( 3, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 3 ) : ( QWidget* ) 0;
        QToolTip::showText( pos, text, w );
        hb_ret();
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QTOOLTIP_TEXT )
{
    /*
     * _static_public_members_ : QString  text ()
     */
    if( hb_pcount() == 0 )
    {
        qth_ret_QString( QToolTip::text() );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "FONT"      , HB_FUNCNAME( QTOOLTIP_FONT       ) );
    hb_clsAdd( uiClass, "HIDETEXT"  , HB_FUNCNAME( QTOOLTIP_HIDETEXT   ) );
    hb_clsAdd( uiClass, "ISVISIBLE" , HB_FUNCNAME( QTOOLTIP_ISVISIBLE  ) );
    hb_clsAdd( uiClass, "PALETTE"   , HB_FUNCNAME( QTOOLTIP_PALETTE    ) );
    hb_clsAdd( uiClass, "SETFONT"   , HB_FUNCNAME( QTOOLTIP_SETFONT    ) );
    hb_clsAdd( uiClass, "SETPALETTE", HB_FUNCNAME( QTOOLTIP_SETPALETTE ) );
    hb_clsAdd( uiClass, "SHOWTEXT"  , HB_FUNCNAME( QTOOLTIP_SHOWTEXT   ) );
    hb_clsAdd( uiClass, "TEXT"      , HB_FUNCNAME( QTOOLTIP_TEXT       ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
