/*
 * $Id: qthQDateTime.wip 139 2011-07-23 05:56:29Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QDateTime>


/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QDATETIME );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QTHBASE );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QTIME ); // REQUEST'ed Class
HB_FUNC_EXTERN( QDATE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QDATETIME )
{ "QDATETIME", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QDATETIME )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QTHBASE", { HB_FS_PUBLIC }, { HB_FUNCNAME( QTHBASE ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QTIME", {HB_FS_PUBLIC}, {HB_FUNCNAME( QTIME )}, NULL }, // REQUEST'ed Class
{ "QDATE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QDATE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QDATETIME )

HB_FUNC( QDATETIME )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QDateTime ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushReturn( QtH::QDateTime, new QDateTime() );
        return;
    }
    /*
     * _public_functions_ : QDateTime ( const QDate & date )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
    {
        const QDate & date = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QDateTime, new QDateTime( date ) );
        return;
    }
    /*
     * _public_functions_ : QDateTime ( const QDate & date, const QTime & time, Qt::TimeSpec spec = Qt::LocalTime )
     */
    if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QDate" ) && qth_IsObject( 2, "QTime" ) && qth_IsIntType( 3, "Qt::TimeSpec", QTH_DEFAULT ) )
    {
        const QDate & date = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
        const QTime & time = * static_cast<QTime *>( qth_par_QthObject( 2 ) );
        qth_itemPushReturn( QtH::QDateTime, new QDateTime( date, time, (Qt::TimeSpec) qth_par_IntType( 3, Qt::LocalTime ) ) );
        return;
    }
    /*
     * _public_functions_ : QDateTime ( const QDateTime & other )
     */
    if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
    {
        const QDateTime & other = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
        qth_itemPushReturn( QtH::QDateTime, new QDateTime( other ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDDAYS )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  addDays ( int ndays ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->addDays( hb_parni( 1 ) ) ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDMSECS )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  addMSecs ( qint64 msecs ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LONG ) )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->addMSecs( (qint64)  hb_parnll( 1 ) ) ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDMONTHS )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  addMonths ( int nmonths ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->addMonths( hb_parni( 1 ) ) ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSECS )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  addSecs ( int s ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->addSecs( hb_parni( 1 ) ) ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDYEARS )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  addYears ( int nyears ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->addYears( hb_parni( 1 ) ) ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DATE )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDate  date () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDate, new QDate( p_dateTime->date() ), "QDate" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DAYSTO )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : int  daysTo ( const QDateTime & other ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
        {
            const QDateTime & other = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            hb_retni( p_dateTime->daysTo( other ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISNULL )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : bool  isNull () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_dateTime->isNull() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ISVALID )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : bool  isValid () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_dateTime->isValid() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MSECSTO )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : qint64  msecsTo ( const QDateTime & other ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
        {
            const QDateTime & other = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            hb_retnll( p_dateTime->msecsTo( other ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SECSTO )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : int  secsTo ( const QDateTime & other ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDateTime" ) )
        {
            const QDateTime & other = * static_cast<QDateTime *>( qth_par_QthObject( 1 ) );
            hb_retni( p_dateTime->secsTo( other ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDATE )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : void  setDate ( const QDate & date )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QDate" ) )
        {
            const QDate & date = * static_cast<QDate *>( qth_par_QthObject( 1 ) );
            p_dateTime->setDate( date );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETMSECSSINCEEPOCH )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : void  setMSecsSinceEpoch ( qint64 msecs )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LONG ) )
        {
            p_dateTime->setMSecsSinceEpoch( (qint64)  hb_parnll( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTIME )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : void  setTime ( const QTime & time )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QTime" ) )
        {
            const QTime & time = * static_cast<QTime *>( qth_par_QthObject( 1 ) );
            p_dateTime->setTime( time );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTIMESPEC )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : void  setTimeSpec ( Qt::TimeSpec spec )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::TimeSpec" ) )
        {
            p_dateTime->setTimeSpec( (Qt::TimeSpec)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETTIME_T )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : void  setTime_t ( uint seconds )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_dateTime->setTime_t( (uint)  hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TIME )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QTime  time () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QTime, new QTime( p_dateTime->time() ), "QTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TIMESPEC )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : Qt::TimeSpec  timeSpec () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTime->timeSpec() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOLOCALTIME )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  toLocalTime () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->toLocalTime() ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOMSECSSINCEEPOCH )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : qint64  toMSecsSinceEpoch () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retnll( p_dateTime->toMSecsSinceEpoch() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOSTRING )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QString  toString ( const QString & format ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsString( 1 ) )
        {
            QString format =  qth_par_QString( 1 );
            qth_ret_QString( p_dateTime->toString( format ) );
            return;
        }
        /*
         * _public_functions_ : QString  toString ( Qt::DateFormat format = Qt::TextDate ) const
         */
        if( ( hb_pcount() <= 1 ) && qth_IsIntType( 1, "Qt::DateFormat", QTH_DEFAULT ) )
        {
            qth_ret_QString( p_dateTime->toString( (Qt::DateFormat) qth_par_IntType( 1, Qt::TextDate ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOTIMESPEC )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  toTimeSpec ( Qt::TimeSpec specification ) const
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Qt::TimeSpec" ) )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->toTimeSpec( (Qt::TimeSpec)  qth_par_IntType( 1 ) ) ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOTIME_T )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : uint  toTime_t () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_dateTime->toTime_t() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TOUTC )
{
    QDateTime* p_dateTime = static_cast<QDateTime *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_dateTime )
    {
        /*
         * _public_functions_ : QDateTime  toUTC () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( p_dateTime->toUTC() ), "QDateTime" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATETIME_CURRENTDATETIME )
{
    /*
     * _static_public_members_ : QDateTime  currentDateTime ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( QDateTime::currentDateTime() ), "QDateTime" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATETIME_CURRENTDATETIMEUTC )
{
    /*
     * _static_public_members_ : QDateTime  currentDateTimeUtc ()
     */
    if( hb_pcount() == 0 )
    {
        qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( QDateTime::currentDateTimeUtc() ), "QDateTime" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATETIME_CURRENTMSECSSINCEEPOCH )
{
    /*
     * _static_public_members_ : qint64  currentMSecsSinceEpoch ()
     */
    if( hb_pcount() == 0 )
    {
        hb_retnll( QDateTime::currentMSecsSinceEpoch() );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATETIME_FROMMSECSSINCEEPOCH )
{
    /*
     * _static_public_members_ : QDateTime  fromMSecsSinceEpoch ( qint64 msecs )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_LONG ) )
    {
        qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( QDateTime::fromMSecsSinceEpoch( (qint64)  hb_parnll( 1 ) ) ), "QDateTime" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATETIME_FROMSTRING )
{
    /*
     * _static_public_members_ : QDateTime  fromString ( const QString & string, Qt::DateFormat format = Qt::TextDate )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsString( 1 ) && qth_IsIntType( 2, "Qt::DateFormat", QTH_DEFAULT ) )
    {
        QString string =  qth_par_QString( 1 );
        qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( QDateTime::fromString( string, (Qt::DateFormat) qth_par_IntType( 2, Qt::TextDate ) ) ), "QDateTime" );
        return;
    }
    /*
     * _static_public_members_ : QDateTime  fromString ( const QString & string, const QString & format )
     */
    if( ( hb_pcount() == 2 ) && qth_IsString( 1 ) && qth_IsString( 2 ) )
    {
        QString string =  qth_par_QString( 1 );
        QString format =  qth_par_QString( 2 );
        qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( QDateTime::fromString( string, format ) ), "QDateTime" );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC( QDATETIME_FROMTIME_T )
{
    /*
     * _static_public_members_ : QDateTime  fromTime_t ( uint seconds )
     */
    if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
    {
        qth_itemPushNewReturn( QtH::QDateTime, new QDateTime( QDateTime::fromTime_t( (uint)  hb_parni( 1 ) ) ), "QDateTime" );
        return;
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                   , HB_FUNCNAME( NEW                              ) );
    hb_clsAdd( uiClass, "ADDDAYS"               , HB_FUNCNAME( ADDDAYS                          ) );
    hb_clsAdd( uiClass, "ADDMSECS"              , HB_FUNCNAME( ADDMSECS                         ) );
    hb_clsAdd( uiClass, "ADDMONTHS"             , HB_FUNCNAME( ADDMONTHS                        ) );
    hb_clsAdd( uiClass, "ADDSECS"               , HB_FUNCNAME( ADDSECS                          ) );
    hb_clsAdd( uiClass, "ADDYEARS"              , HB_FUNCNAME( ADDYEARS                         ) );
    hb_clsAdd( uiClass, "DATE"                  , HB_FUNCNAME( DATE                             ) );
    hb_clsAdd( uiClass, "DAYSTO"                , HB_FUNCNAME( DAYSTO                           ) );
    hb_clsAdd( uiClass, "ISNULL"                , HB_FUNCNAME( ISNULL                           ) );
    hb_clsAdd( uiClass, "ISVALID"               , HB_FUNCNAME( ISVALID                          ) );
    hb_clsAdd( uiClass, "MSECSTO"               , HB_FUNCNAME( MSECSTO                          ) );
    hb_clsAdd( uiClass, "SECSTO"                , HB_FUNCNAME( SECSTO                           ) );
    hb_clsAdd( uiClass, "SETDATE"               , HB_FUNCNAME( SETDATE                          ) );
    hb_clsAdd( uiClass, "SETMSECSSINCEEPOCH"    , HB_FUNCNAME( SETMSECSSINCEEPOCH               ) );
    hb_clsAdd( uiClass, "SETTIME"               , HB_FUNCNAME( SETTIME                          ) );
    hb_clsAdd( uiClass, "SETTIMESPEC"           , HB_FUNCNAME( SETTIMESPEC                      ) );
    hb_clsAdd( uiClass, "SETTIME_T"             , HB_FUNCNAME( SETTIME_T                        ) );
    hb_clsAdd( uiClass, "TIME"                  , HB_FUNCNAME( TIME                             ) );
    hb_clsAdd( uiClass, "TIMESPEC"              , HB_FUNCNAME( TIMESPEC                         ) );
    hb_clsAdd( uiClass, "TOLOCALTIME"           , HB_FUNCNAME( TOLOCALTIME                      ) );
    hb_clsAdd( uiClass, "TOMSECSSINCEEPOCH"     , HB_FUNCNAME( TOMSECSSINCEEPOCH                ) );
    hb_clsAdd( uiClass, "TOSTRING"              , HB_FUNCNAME( TOSTRING                         ) );
    hb_clsAdd( uiClass, "TOTIMESPEC"            , HB_FUNCNAME( TOTIMESPEC                       ) );
    hb_clsAdd( uiClass, "TOTIME_T"              , HB_FUNCNAME( TOTIME_T                         ) );
    hb_clsAdd( uiClass, "TOUTC"                 , HB_FUNCNAME( TOUTC                            ) );
    hb_clsAdd( uiClass, "CURRENTDATETIME"       , HB_FUNCNAME( QDATETIME_CURRENTDATETIME        ) );
    hb_clsAdd( uiClass, "CURRENTDATETIMEUTC"    , HB_FUNCNAME( QDATETIME_CURRENTDATETIMEUTC     ) );
    hb_clsAdd( uiClass, "CURRENTMSECSSINCEEPOCH", HB_FUNCNAME( QDATETIME_CURRENTMSECSSINCEEPOCH ) );
    hb_clsAdd( uiClass, "FROMMSECSSINCEEPOCH"   , HB_FUNCNAME( QDATETIME_FROMMSECSSINCEEPOCH    ) );
    hb_clsAdd( uiClass, "FROMSTRING"            , HB_FUNCNAME( QDATETIME_FROMSTRING             ) );
    hb_clsAdd( uiClass, "FROMTIME_T"            , HB_FUNCNAME( QDATETIME_FROMTIME_T             ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
