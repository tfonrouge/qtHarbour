/*
 * $Id: qthQBoxLayout.wip 126 2011-04-12 15:44:57Z tfonrouge $
 *
 * File autogenerated by Wip utility v0.1-151
 * Do not edit this file.
 *
 * (C) 2012. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2012. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#include "qtharbour.h"

#include <QBoxLayout>

#define Direction                               QBoxLayout::Direction

/*
 * Wip: Class Creation & Object Instantiation Section INIT
 */

HB_FUNC( QBOXLAYOUT );
HB_FUNC_EXTERN( __CLSLOCKDEF );
HB_FUNC_EXTERN( HBCLASS );
HB_FUNC_EXTERN( QLAYOUT );
HB_FUNC_STATIC( S_REGISTERMETHODS );
HB_FUNC_EXTERN( __CLSUNLOCKDEF );
HB_FUNC_EXTERN( __OBJHASMSG );
HB_FUNC_INITSTATICS();
HB_FUNC_EXTERN( QSIZE ); // REQUEST'ed Class

HB_INIT_SYMBOLS_BEGIN( hb_vm_SymbolInit_QBOXLAYOUT )
{ "QBOXLAYOUT", {HB_FS_PUBLIC | HB_FS_FIRST | HB_FS_LOCAL}, {HB_FUNCNAME( QBOXLAYOUT )}, NULL },
{ "__CLSLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSLOCKDEF )}, NULL },
{ "NEW", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "HBCLASS", {HB_FS_PUBLIC}, {HB_FUNCNAME( HBCLASS )}, NULL },
{ "QLAYOUT", { HB_FS_PUBLIC }, { HB_FUNCNAME( QLAYOUT ) }, NULL },
{ "CREATE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "S_REGISTERMETHODS", {HB_FS_STATIC | HB_FS_LOCAL}, {HB_FUNCNAME( S_REGISTERMETHODS )}, NULL },
{ "HCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__CLSUNLOCKDEF", {HB_FS_PUBLIC}, {HB_FUNCNAME( __CLSUNLOCKDEF )}, NULL },
{ "INSTANCE", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "__OBJHASMSG", {HB_FS_PUBLIC}, {HB_FUNCNAME( __OBJHASMSG )}, NULL },
{ "INITCLASS", {HB_FS_PUBLIC | HB_FS_MESSAGE}, {NULL}, NULL },
{ "(_INITSTATICS_1)", {HB_FS_INITEXIT | HB_FS_LOCAL}, {hb_INITSTATICS}, NULL },
{ "QSIZE", {HB_FS_PUBLIC}, {HB_FUNCNAME( QSIZE )}, NULL }  // REQUEST'ed Class
HB_INIT_SYMBOLS_END( hb_vm_SymbolInit_QBOXLAYOUT )

HB_FUNC( QBOXLAYOUT )
{
    qthClassObjCreator( symbols, 1 );
}

HB_FUNC_INITSTATICS()
{
    qthInitStatics( symbols, 1 );
}
/*
 * Wip: Class Creation & Object Instantiation Section END
 */

/*
 * Wip: Method's Declaration Section INIT
 */
HB_FUNC_STATIC( NEW )
{
    /*
     * _public_functions_ : QBoxLayout ( Direction dir, QWidget * parent = 0 )
     */
    if( ( hb_pcount() <= 2 ) && qth_IsIntType( 1, "Direction" ) && qth_Is( 2, "QWidget", QTH_DEFAULT ) )
    {
        QWidget* parent = hb_param( 2, HB_IT_OBJECT ) ? qth_parPtr<QWidget>( 2 ) : ( QWidget* ) 0;
        qth_itemPushReturn( QtH::QBoxLayout, new QBoxLayout( (Direction)  qth_par_IntType( 1 ), parent ) );
        return;
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDLAYOUT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  addLayout ( QLayout * layout, int stretch = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_IsObject( 1, "QLayout" ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int stretch = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
            p_boxLayout->addLayout( static_cast<QLayout *>( qth_par_QthObject( 1 ) ), stretch );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSPACERITEM )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  addSpacerItem ( QSpacerItem * spacerItem )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QSpacerItem" ) )
        {
            p_boxLayout->addSpacerItem( static_cast<QSpacerItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSPACING )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  addSpacing ( int size )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_boxLayout->addSpacing( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSTRETCH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  addStretch ( int stretch = 0 )
         */
        if( ( hb_pcount() <= 1 ) && qth_Is( 1, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int stretch = hb_param( 1, HB_IT_INTEGER ) ? hb_parni( 1 ) : 0;
            p_boxLayout->addStretch( stretch );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDSTRUT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  addStrut ( int size )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_boxLayout->addStrut( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDWIDGET )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  addWidget ( QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0 )
         */
        if( ( hb_pcount() <= 3 ) && qth_IsObject( 1, "QWidget" ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) && qth_IsIntType( 3, "Qt::Alignment", QTH_DEFAULT ) )
        {
            int stretch = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
            p_boxLayout->addWidget( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), stretch, (Qt::Alignment) qth_par_IntType( 3, 0 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( DIRECTION )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : Direction  direction () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_boxLayout->direction() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTLAYOUT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  insertLayout ( int index, QLayout * layout, int stretch = 0 )
         */
        if( ( hb_pcount() <= 3 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QLayout" ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int stretch = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : 0;
            p_boxLayout->insertLayout( hb_parni( 1 ), static_cast<QLayout *>( qth_par_QthObject( 2 ) ), stretch );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTSPACERITEM )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  insertSpacerItem ( int index, QSpacerItem * spacerItem )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QSpacerItem" ) )
        {
            p_boxLayout->insertSpacerItem( hb_parni( 1 ), static_cast<QSpacerItem *>( qth_par_QthObject( 2 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTSPACING )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  insertSpacing ( int index, int size )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_boxLayout->insertSpacing( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTSTRETCH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  insertStretch ( int index, int stretch = 0 )
         */
        if( ( hb_pcount() <= 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            int stretch = hb_param( 2, HB_IT_INTEGER ) ? hb_parni( 2 ) : 0;
            p_boxLayout->insertStretch( hb_parni( 1 ), stretch );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INSERTWIDGET )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  insertWidget ( int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0 )
         */
        if( ( hb_pcount() <= 4 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_IsObject( 2, "QWidget" ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) && qth_IsIntType( 4, "Qt::Alignment", QTH_DEFAULT ) )
        {
            int stretch = hb_param( 3, HB_IT_INTEGER ) ? hb_parni( 3 ) : 0;
            p_boxLayout->insertWidget( hb_parni( 1 ), static_cast<QWidget *>( qth_par_QthObject( 2 ) ), stretch, (Qt::Alignment) qth_par_IntType( 4, 0 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETDIRECTION )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  setDirection ( Direction direction )
         */
        if( ( hb_pcount() == 1 ) && qth_IsIntType( 1, "Direction" ) )
        {
            p_boxLayout->setDirection( (Direction)  qth_par_IntType( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSPACING )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  setSpacing ( int spacing )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            p_boxLayout->setSpacing( hb_parni( 1 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTRETCH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : void  setStretch ( int index, int stretch )
         */
        if( ( hb_pcount() == 2 ) && qth_Is( 1, HB_IT_INTEGER ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            p_boxLayout->setStretch( hb_parni( 1 ), hb_parni( 2 ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETSTRETCHFACTOR )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : bool  setStretchFactor ( QWidget * widget, int stretch )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QWidget" ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retl( p_boxLayout->setStretchFactor( static_cast<QWidget *>( qth_par_QthObject( 1 ) ), hb_parni( 2 ) ) == true );
            return;
        }
        /*
         * _public_functions_ : bool  setStretchFactor ( QLayout * layout, int stretch )
         */
        if( ( hb_pcount() == 2 ) && qth_IsObject( 1, "QLayout" ) && qth_Is( 2, HB_IT_INTEGER ) )
        {
            hb_retl( p_boxLayout->setStretchFactor( static_cast<QLayout *>( qth_par_QthObject( 1 ) ), hb_parni( 2 ) ) == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SPACING )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : int  spacing () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_boxLayout->spacing() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( STRETCH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _public_functions_ : int  stretch ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_boxLayout->stretch( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ADDITEM )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  addItem ( QLayoutItem * item )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QLayoutItem" ) )
        {
            p_boxLayout->addItem( static_cast<QLayoutItem *>( qth_par_QthObject( 1 ) ) );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( COUNT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual int  count () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_boxLayout->count() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( EXPANDINGDIRECTIONS )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual Qt::Orientations  expandingDirections () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retni( p_boxLayout->expandingDirections() );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HASHEIGHTFORWIDTH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual bool  hasHeightForWidth () const
         */
        if( hb_pcount() == 0 )
        {
            hb_retl( p_boxLayout->hasHeightForWidth() == true );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( HEIGHTFORWIDTH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual int  heightForWidth ( int w ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_boxLayout->heightForWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( INVALIDATE )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  invalidate ()
         */
        if( hb_pcount() == 0 )
        {
            p_boxLayout->invalidate();
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( ITEMAT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QLayoutItem *  itemAt ( int index ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_boxLayout->itemAt( hb_parni( 1 ) ), "QLayoutItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MAXIMUMSIZE )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  maximumSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_boxLayout->maximumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMHEIGHTFORWIDTH )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual int  minimumHeightForWidth ( int w ) const
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            hb_retni( p_boxLayout->minimumHeightForWidth( hb_parni( 1 ) ) );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( MINIMUMSIZE )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  minimumSize () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_boxLayout->minimumSize() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SETGEOMETRY )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual void  setGeometry ( const QRect & r )
         */
        if( ( hb_pcount() == 1 ) && qth_IsObject( 1, "QRect" ) )
        {
            const QRect & r = * static_cast<QRect *>( qth_par_QthObject( 1 ) );
            p_boxLayout->setGeometry( r );
            hb_ret();
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( SIZEHINT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QSize  sizeHint () const
         */
        if( hb_pcount() == 0 )
        {
            qth_itemPushNewReturn( QtH::QSize, new QSize( p_boxLayout->sizeHint() ), "QSize" );
            return;
        }
    }
    qth_errRT_PARAM();
}

HB_FUNC_STATIC( TAKEAT )
{
    QBoxLayout* p_boxLayout = static_cast<QBoxLayout *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );

    if( p_boxLayout )
    {
        /*
         * _reimplemented_public_functions_ : virtual QLayoutItem *  takeAt ( int index )
         */
        if( ( hb_pcount() == 1 ) && qth_Is( 1, HB_IT_INTEGER ) )
        {
            qth_itemReturn( (PCPP_OBJECT) p_boxLayout->takeAt( hb_parni( 1 ) ), "QLayoutItem" );
            return;
        }
    }
    qth_errRT_PARAM();
}

/*
 * Wip: Method's Declaration Section END
 */

/*
 * Wip: Register Harbour Method's Section INIT
 */
HB_FUNC_STATIC( S_REGISTERMETHODS )
{
    HB_USHORT uiClass = hb_itemGetNI( hb_param( 1, HB_IT_NUMERIC ) );

    hb_clsAdd( uiClass, "NEW"                  , HB_FUNCNAME( NEW                   ) );
    hb_clsAdd( uiClass, "ADDLAYOUT"            , HB_FUNCNAME( ADDLAYOUT             ) );
    hb_clsAdd( uiClass, "ADDSPACERITEM"        , HB_FUNCNAME( ADDSPACERITEM         ) );
    hb_clsAdd( uiClass, "ADDSPACING"           , HB_FUNCNAME( ADDSPACING            ) );
    hb_clsAdd( uiClass, "ADDSTRETCH"           , HB_FUNCNAME( ADDSTRETCH            ) );
    hb_clsAdd( uiClass, "ADDSTRUT"             , HB_FUNCNAME( ADDSTRUT              ) );
    hb_clsAdd( uiClass, "ADDWIDGET"            , HB_FUNCNAME( ADDWIDGET             ) );
    hb_clsAdd( uiClass, "DIRECTION"            , HB_FUNCNAME( DIRECTION             ) );
    hb_clsAdd( uiClass, "INSERTLAYOUT"         , HB_FUNCNAME( INSERTLAYOUT          ) );
    hb_clsAdd( uiClass, "INSERTSPACERITEM"     , HB_FUNCNAME( INSERTSPACERITEM      ) );
    hb_clsAdd( uiClass, "INSERTSPACING"        , HB_FUNCNAME( INSERTSPACING         ) );
    hb_clsAdd( uiClass, "INSERTSTRETCH"        , HB_FUNCNAME( INSERTSTRETCH         ) );
    hb_clsAdd( uiClass, "INSERTWIDGET"         , HB_FUNCNAME( INSERTWIDGET          ) );
    hb_clsAdd( uiClass, "SETDIRECTION"         , HB_FUNCNAME( SETDIRECTION          ) );
    hb_clsAdd( uiClass, "SETSPACING"           , HB_FUNCNAME( SETSPACING            ) );
    hb_clsAdd( uiClass, "SETSTRETCH"           , HB_FUNCNAME( SETSTRETCH            ) );
    hb_clsAdd( uiClass, "SETSTRETCHFACTOR"     , HB_FUNCNAME( SETSTRETCHFACTOR      ) );
    hb_clsAdd( uiClass, "SPACING"              , HB_FUNCNAME( SPACING               ) );
    hb_clsAdd( uiClass, "STRETCH"              , HB_FUNCNAME( STRETCH               ) );
    hb_clsAdd( uiClass, "ADDITEM"              , HB_FUNCNAME( ADDITEM               ) );
    hb_clsAdd( uiClass, "COUNT"                , HB_FUNCNAME( COUNT                 ) );
    hb_clsAdd( uiClass, "EXPANDINGDIRECTIONS"  , HB_FUNCNAME( EXPANDINGDIRECTIONS   ) );
    hb_clsAdd( uiClass, "HASHEIGHTFORWIDTH"    , HB_FUNCNAME( HASHEIGHTFORWIDTH     ) );
    hb_clsAdd( uiClass, "HEIGHTFORWIDTH"       , HB_FUNCNAME( HEIGHTFORWIDTH        ) );
    hb_clsAdd( uiClass, "INVALIDATE"           , HB_FUNCNAME( INVALIDATE            ) );
    hb_clsAdd( uiClass, "ITEMAT"               , HB_FUNCNAME( ITEMAT                ) );
    hb_clsAdd( uiClass, "MAXIMUMSIZE"          , HB_FUNCNAME( MAXIMUMSIZE           ) );
    hb_clsAdd( uiClass, "MINIMUMHEIGHTFORWIDTH", HB_FUNCNAME( MINIMUMHEIGHTFORWIDTH ) );
    hb_clsAdd( uiClass, "MINIMUMSIZE"          , HB_FUNCNAME( MINIMUMSIZE           ) );
    hb_clsAdd( uiClass, "SETGEOMETRY"          , HB_FUNCNAME( SETGEOMETRY           ) );
    hb_clsAdd( uiClass, "SIZEHINT"             , HB_FUNCNAME( SIZEHINT              ) );
    hb_clsAdd( uiClass, "TAKEAT"               , HB_FUNCNAME( TAKEAT                ) );
}
/*
 * Wip: Register Harbour Method's Section END
 */
