/*
 * $Id: qthQCoreApplication.wip 129 2011-04-19 18:22:34Z tfonrouge $
 *
 * (C) 2011. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2011. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

namespace QEventLoop

#begindump
static void qthApplication_Terminate( void* cargo )
{
    qth_itemListReleaseAll();
}

HB_CALL_ON_STARTUP_BEGIN( _end_ )
hb_vmAtExit( qthApplication_Terminate, NULL );
HB_CALL_ON_STARTUP_END( _end_ )

#define Encoding    QCoreApplication::Encoding
#define CodecForTr  QCoreApplication::CodecForTr

static int argc;
static char **argv;
static QCoreApplication* pQApp = NULL;

HB_FUNC_STATIC( NEW )
{
    if(!pQApp)
    {
        argc = hb_cmdargARGC();
        argv = hb_cmdargARGV();
        pQApp = new QCoreApplication( argc, argv );

        qth_itemPushReturn( QtH::QCoreApplication, pQApp );
    }
}
#enddump

#varname coreApplication

CLASS QCoreApplication FROM QObject

/*                  */
/* Public Functions */
/*                  */

_Public_Functions_

#register New

//QCoreApplication ( int & argc, char ** argv )
~QCoreApplication ()
bool  filterEvent ( void * message, long * result )
virtual bool  notify ( QObject * receiver, QEvent * event )
#if IImplementIt
EventFilter  setEventFilter ( EventFilter filter )
#if __WIN32__
virtual bool  winEventFilter ( MSG * msg, long * result )

/*              */
/* Public Slots */
/*              */

_Public_Slots_

void  quit ()

/*                       */
/* Static Public Members */
/*                       */

_Static_Public_Members_

void  addLibraryPath ( const QString & path )
QString  applicationDirPath ()
QString  applicationFilePath ()
QString  applicationName ()
qint64  applicationPid ()
QString  applicationVersion ()
QStringList  arguments ()
bool  closingDown ()
int  exec ()
void  exit ( int returnCode = 0 )
void  flush ()
bool  hasPendingEvents ()
void  installTranslator ( QTranslator * translationFile )
QCoreApplication *  instance ()
QStringList  libraryPaths ()
QString  organizationDomain ()
QString  organizationName ()
void  postEvent ( QObject * receiver, QEvent * event )
void  postEvent ( QObject * receiver, QEvent * event, int priority )
void  processEvents ( QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents )
void  processEvents ( QEventLoop::ProcessEventsFlags flags, int maxtime )
void  removeLibraryPath ( const QString & path )
void  removePostedEvents ( QObject * receiver )
void  removePostedEvents ( QObject * receiver, int eventType )
void  removeTranslator ( QTranslator * translationFile )
bool  sendEvent ( QObject * receiver, QEvent * event )
void  sendPostedEvents ( QObject * receiver, int event_type )
void  sendPostedEvents ()
void  setApplicationName ( const QString & application )
void  setApplicationVersion ( const QString & version )
void  setAttribute ( Qt::ApplicationAttribute attribute, bool on = true )
void  setLibraryPaths ( const QStringList & paths )
void  setOrganizationDomain ( const QString & orgDomain )
void  setOrganizationName ( const QString & orgName )
bool  startingUp ()
bool  testAttribute ( Qt::ApplicationAttribute attribute )
QString  translate ( const char * context, const char * sourceText, const char * disambiguation, Encoding encoding, int n )
QString  translate ( const char * context, const char * sourceText, const char * disambiguation = 0, Encoding encoding = CodecForTr )
