/*
 * $Id: qthQObject.wip 130 2011-04-20 15:54:25Z tfonrouge $
 *
 * (C) 2011. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2011. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */


#begindump
#include <QMetaObject>
#include <QMetaMethod>
#include "qth_DynSlot.h"
#enddump

#varname object

#begindump
HB_FUNC_STATIC( HBCONNECT )
{
    QObject* object = static_cast<QObject *> ( qth_itemListGet_CPP( hb_stackSelfItem() ) );
    
    if( object )
    {
        if( HB_ISCHAR( 1 ) && hb_param( 2, HB_IT_BLOCK ) && qth_Is( 3, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            const char* szSignal = hb_parcx( 1 );
            PHB_ITEM pCodeBlock = hb_param( 2, HB_IT_BLOCK );

            if( pCodeBlock )
            {
                DynObject* dynObject;

                if( qth_itemListGet_PQTH_ITEM( object )->dynObject )
                {
                    dynObject = qth_itemListGet_PQTH_ITEM( object )->dynObject;
                }
                else
                {
                    dynObject = new DynObject( object );
                    qth_itemListGet_PQTH_ITEM( object )->dynObject = dynObject;
                }

                Qt::ConnectionType type = hb_param( 3, HB_IT_INTEGER ) ? (Qt::ConnectionType) hb_parni( 3 ) : (Qt::ConnectionType) Qt::AutoConnection;

                hb_retl( dynObject->connectDynSlot_Block( object, szSignal + 1, pCodeBlock, type ) );
            }
            return;
        }
        if( HB_ISCHAR( 1 ) && hb_param( 2, HB_IT_OBJECT ) && HB_ISCHAR( 3 ) && qth_Is( 4, HB_IT_INTEGER, QTH_DEFAULT ) )
        {
            const char* szSignal = hb_parcx( 1 );
            PHB_ITEM pReceiver = hb_param( 2, HB_IT_OBJECT );

            if( hb_objHasMsg( pReceiver, hb_parcx( 3 ) ) )
            {
                DynObject* dynObject;

                if( qth_itemListGet_PQTH_ITEM( object )->dynObject )
                {
                    dynObject = qth_itemListGet_PQTH_ITEM( object )->dynObject;
                }
                else
                {
                    dynObject = new DynObject( object );
                    qth_itemListGet_PQTH_ITEM( object )->dynObject = dynObject;
                }

                Qt::ConnectionType type = hb_param( 4, HB_IT_INTEGER ) ? (Qt::ConnectionType) hb_parni( 4 ) : (Qt::ConnectionType) Qt::AutoConnection;

                hb_retl( dynObject->connectDynSlot_Method( object, szSignal + 1, pReceiver, hb_parcx( 3 ), type ) );
            }
            return;
        }
        qth_errRT_PARAM();
    }
}
#enddump

CLASS QObject FROM QTHBASE

/*                  */
/* Public Functions */
/*                  */

_Public_Functions_

#register hbConnect

QObject ( QObject * parent = 0 )
virtual  ~QObject ()
bool  blockSignals ( bool block )
const QObjectList &  children () const
bool  connect ( const QObject * sender, const char * signal, const char * method, Qt::ConnectionType type = Qt::AutoConnection ) const
bool  disconnect ( const char * signal = 0, const QObject * receiver = 0, const char * method = 0 )
bool  disconnect ( const QObject * receiver, const char * method = 0 )
void  dumpObjectInfo ()
void  dumpObjectTree ()
QList<QByteArray>  dynamicPropertyNames () const
virtual bool  event ( QEvent * e )
virtual bool  eventFilter ( QObject * watched, QEvent * event )
//T  findChild ( const QString & name = QString() ) const
//QList<T>  findChildren ( const QString & name = QString() ) const
//QList<T>  findChildren ( const QRegExp & regExp ) const
bool  inherits ( const char * className ) const
void  installEventFilter ( QObject * filterObj )
bool  isWidgetType () const
void  killTimer ( int id )
virtual const QMetaObject *  metaObject () const
void  moveToThread ( QThread * targetThread )
QString  objectName () const
QObject *  parent () const
QVariant  property ( const char * name ) const
void  removeEventFilter ( QObject * obj )
void  setObjectName ( const QString & name )
void  setParent ( QObject * parent )
bool  setProperty ( const char * name, const QVariant & value )
bool  signalsBlocked () const
int  startTimer ( int interval )
QThread *  thread () const

/*              */
/* Public Slots */
/*              */

_Public_Slots_

void  deleteLater ()

/*                       */
/* Static Public Members */
/*                       */

_Static_Public_Members_

bool  connect ( const QObject * sender, const char * signal, const QObject * receiver, const char * method, Qt::ConnectionType type = Qt::AutoConnection )
bool  disconnect ( const QObject * sender, const char * signal, const QObject * receiver, const char * method )
const QMetaObject  staticMetaObject
QString  tr ( const char * sourceText, const char * disambiguation = 0, int n = -1 )
QString  trUtf8 ( const char * sourceText, const char * disambiguation = 0, int n = -1 )
