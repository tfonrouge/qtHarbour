/*
 * $Id: qthQMap.wip 134 2011-06-07 12:35:37Z tfonrouge $
 *
 * (C) 2011. qtHarbour     http://sourceforge.net/projects/qth/
 * (C) 2011. Teo Fonrouge  <tfonrouge/at/gmail/dot/com>
 *
 */

#varname map

CLASS QMap FROM QTHBASE
// qthbegin
Public Types
class	const_iterator
class	iterator
typedef	ConstIterator
typedef	Iterator
typedef	difference_type
typedef	key_type
typedef	mapped_type
typedef	size_type

Public Functions
QMap ()
QMap ( const QMap<Key, T> & other )
QMap ( const std::map<Key, T> & other )
~QMap ()
iterator	begin ()
const_iterator	begin () const
void	clear ()
const_iterator	constBegin () const
const_iterator	constEnd () const
const_iterator	constFind ( const Key & key ) const
bool	contains ( const Key & key ) const
int	count ( const Key & key ) const
int	count () const
bool	empty () const
iterator	end ()
const_iterator	end () const
iterator	erase ( iterator pos )
iterator	find ( const Key & key )
const_iterator	find ( const Key & key ) const
iterator	insert ( const Key & key, const T & value )
iterator	insertMulti ( const Key & key, const T & value )
bool	isEmpty () const
const Key	key ( const T & value ) const
const Key	key ( const T & value, const Key & defaultKey ) const
QList<Key>	keys () const
QList<Key>	keys ( const T & value ) const
iterator	lowerBound ( const Key & key )
const_iterator	lowerBound ( const Key & key ) const
int	remove ( const Key & key )
int	size () const
T	take ( const Key & key )
std::map<Key, T>	toStdMap () const
QList<Key>	uniqueKeys () const
QMap<Key, T> &	unite ( const QMap<Key, T> & other )
iterator	upperBound ( const Key & key )
const_iterator	upperBound ( const Key & key ) const
const T	value ( const Key & key ) const
const T	value ( const Key & key, const T & defaultValue ) const
QList<T>	values () const
QList<T>	values ( const Key & key ) const
bool	operator!= ( const QMap<Key, T> & other ) const
QMap<Key, T> &	operator= ( const QMap<Key, T> & other )
bool	operator== ( const QMap<Key, T> & other ) const
T &	operator[] ( const Key & key )
const T	operator[] ( const Key & key ) const
// qthend
